<?xml version="1.0"?>
<!DOCTYPE project>

<project name="build-common-ivy" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:ivy="antlib:org.apache.ivy.ant">
	<macrodef name="mirrors-get">
		<attribute name="dest" />
		<attribute default="false" name="ignoreerrors" />
		<attribute default="false" name="skipexisting" />
		<attribute name="src" />
		<attribute default="false" name="verbose" />

		<sequential>
			<condition property="cache.dir" value="C:/opt/dev/cache" else="/opt/dev/cache">
				<contains string="${os.name}" substring="Windows" casesensitive="false" />
			</condition>

			<var name="dest" value="@{dest}" />
			<var name="src" value="@{src}" />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					import java.util.regex.Matcher;
					import java.util.regex.Pattern;

					public String trimSlash(String s) {
						if (s.endsWith("/")) {
							s = s.substring(0, s.length() - 1);
						}

						return s;
					}

					String dest = project.getProperty("dest");
					String src = project.getProperty("src");
					String cacheDir = project.getProperty("cache.dir");

					String cacheFilePath = src.replace("http://", cacheDir + "/http/");

					int x = cacheFilePath.lastIndexOf("/");

					String cacheFileName = cacheFilePath.substring(x + 1);
					String cacheFileDir = trimSlash(cacheFilePath.substring(0, x));

					String destDirOrFile = dest;

					if (destDirOrFile.contains("/")) {
						int x = destDirOrFile.lastIndexOf("/");

						destDirOrFile = destDirOrFile.substring(x + 1);
					}

					Pattern pattern = Pattern.compile("[\\w\\-]+\\.[\\w]+");

					Matcher matcher = pattern.matcher(destDirOrFile);

					String destFileDir = dest;
					String destFileName = cacheFileName;

					if (matcher.find()) {
						destFileDir = ".";
						destFileName = matcher.group();

						if (dest.contains("/")) {
							int x = dest.lastIndexOf("/");

							destFileDir = dest.substring(0, x);
						}
					}
					else {
						destFileDir = dest;
						destFileName = cacheFileName;
					}

					destFileDir = trimSlash(destFileDir);

					project.setProperty("cache.file.dir", cacheFileDir);
					project.setProperty("cache.file.path", cacheFilePath);
					project.setProperty("dest.file.path", destFileDir + "/" + destFileName);
				]]>
			</script>

			<if>
				<available file="${cache.dir}" />
				<then>
					<if>
						<not>
							<available file="${cache.file.path}" />
						</not>
						<then>
							<mkdir dir="${cache.file.dir}" />

							<mirrors-get-cmd
								dest="${cache.file.path}"
								ignoreerrors="@{ignoreerrors}"
								skipexisting="@{skipexisting}"
								src="@{src}"
								verbose="@{verbose}"
							/>
						</then>
					</if>

					<copy
						file="${cache.file.path}"
						overwrite="true"
						tofile="${dest.file.path}"
					/>
				</then>
				<else>
					<mirrors-get-cmd
						dest="@{dest}"
						ignoreerrors="@{ignoreerrors}"
						skipexisting="@{skipexisting}"
						src="@{src}"
						verbose="@{verbose}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="mirrors-get-cmd">
		<attribute name="dest" />
		<attribute default="false" name="ignoreerrors" />
		<attribute default="false" name="skipexisting" />
		<attribute name="src" />
		<attribute default="false" name="verbose" />

		<sequential>
			<propertyregex
				input="@{src}"
				override="true"
				property="mirrors.src"
				regexp="http://"
				replace="http://mirrors/"
			/>

			<trycatch>
				<try>
					<get
						dest="@{dest}"
						ignoreerrors="@{ignoreerrors}"
						skipexisting="@{skipexisting}"
						src="${mirrors.src}"
						verbose="@{verbose}"
					/>
				</try>
				<catch>
					<get
						dest="@{dest}"
						ignoreerrors="@{ignoreerrors}"
						skipexisting="@{skipexisting}"
						src="@{src}"
						verbose="@{verbose}"
					/>
				</catch>
			</trycatch>
		</sequential>
	</macrodef>

	<if>
		<not>
			<available file="${ivy.home}/ivy-${ivy.version}.jar" />
		</not>
		<then>
			<mkdir dir="${ivy.home}" />

			<mirrors-get
				dest="${ivy.home}/ivy-${ivy.version}.jar"
				src="${ivy.jar.url}"
			/>
		</then>
	</if>

	<path id="ivy.lib.path">
		<fileset
			dir="${ivy.home}"
			includes="ivy-${ivy.version}.jar"
		/>
	</path>

	<taskdef classpathref="ivy.lib.path" resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" />

	<ivy:settings file="${project.dir}/ivy-settings.xml" />
</project>