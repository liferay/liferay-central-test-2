<?xml version="1.0"?>

<project name="portal-test" basedir="." default="test" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="build.xml" />

	<property file="${project.dir}/test.generated.properties" />
	<property file="${project.dir}/test.${user.name}.properties" />
	<property file="${project.dir}/test.${env.COMPUTERNAME}.properties" />
	<property file="${project.dir}/test.${env.HOST}.properties" />
	<property file="${project.dir}/test.${env.HOSTNAME}.properties" />
	<property file="${project.dir}/test.properties" />

	<propertycopy from="app.server.${app.server.type}.start.executable" name="app.server.start.executable" />
	<propertycopy from="app.server.${app.server.type}.start.executable.arg.line" name="app.server.start.executable.arg.line" />
	<propertycopy from="app.server.${app.server.type}.stop.executable" name="app.server.stop.executable" />
	<propertycopy from="app.server.${app.server.type}.stop.executable.arg.line" name="app.server.stop.executable.arg.line" />

	<propertycopy from="browser.${browser.type}.version" name="browser.version" />

	<propertycopy from="java.jdk.${java.jdk.type}.version" name="java.jdk.version" />

	<propertycopy from="liferay.portal.${liferay.portal.branch}.bundle" name="liferay.portal.bundle" />

	<propertycopy from="operating.system.${operating.system.type}.version" name="operating.system.version" />

	<property name="plink.executable" location="${project.dir}/tools/putty/plink.exe" />
	<property name="pscp.executable" location="${project.dir}/tools/putty/pscp.exe" />

	<macrodef name="check-config">
		<sequential>
			<if>
				<not>
					<isset property="app.server.type" />
				</not>
				<then>
					<property name="app.server.type" value="tomcat" />
				</then>
			</if>

			<if>
				<not>
					<or>
						<equals arg1="${app.server.type}" arg2="glassfish" />
						<equals arg1="${app.server.type}" arg2="jboss" />
						<equals arg1="${app.server.type}" arg2="jetty" />
						<equals arg1="${app.server.type}" arg2="jonas" />
						<equals arg1="${app.server.type}" arg2="resin" />
						<equals arg1="${app.server.type}" arg2="tcserver" />
						<equals arg1="${app.server.type}" arg2="tomcat" />
						<equals arg1="${app.server.type}" arg2="weblogic" />
						<equals arg1="${app.server.type}" arg2="websphere" />
					</or>
				</not>
				<then>
					<fail>Please set "app.server.type" to one of the following:${line.separator}, glassfish, jboss, jetty, jonas, resin, tcserver, tomcat, weblogic, or websphere.</fail>
				</then>
			</if>

			<if>
				<not>
					<isset property="browser.type" />
				</not>
				<then>
					<property name="browser.type" value="firefox" />
				</then>
			</if>

			<if>
				<not>
					<or>
						<equals arg1="${browser.type}" arg2="firefox" />
						<equals arg1="${browser.type}" arg2="googlechrome" />
						<equals arg1="${browser.type}" arg2="ie" />
					</or>
				</not>
				<then>
					<fail>Please set "browser.type" to one of the following:${line.separator}firefox, googlechrome, ie.</fail>
				</then>
			</if>

			<if>
				<not>
					<isset property="database.type" />
				</not>
				<then>
					<property name="database.type" value="mysql" />
				</then>
			</if>

			<if>
				<not>
					<or>
						<equals arg1="${database.type}" arg2="db2" />
						<equals arg1="${database.type}" arg2="hsql" />
						<equals arg1="${database.type}" arg2="mysql" />
						<equals arg1="${database.type}" arg2="oracle" />
						<equals arg1="${database.type}" arg2="postgresql" />
						<equals arg1="${database.type}" arg2="sql.server" />
						<equals arg1="${database.type}" arg2="sybase" />
					</or>
				</not>
				<then>
					<fail>Please set "database.type" to one of the following:${line.separator}db2, hsql, mysql, oracle, postgresql, sql.server, sybase.</fail>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="generate-jdbc-properties">
		<attribute name="properties.file" />
		<element name="post-action" optional="true" />

		<sequential>
			<get-database-property property.name="database.driver" />
			<get-database-property property.name="database.password" />
			<get-database-property property.name="database.url" />
			<get-database-property property.name="database.username" />

			<echo file="@{properties.file}"><![CDATA[liferay.home=${project.dir}
jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}]]></echo>

			<post-action />
		</sequential>
	</macrodef>

	<macrodef name="get-auto-deploy-dir">
		<sequential>
			<var name="auto.deploy.dir" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="plugins.deployment.type" />
				</then>
			</if>

			<if>
				<equals arg1="${plugins.deployment.type}" arg2="osgi" />
				<then>
					<var name="auto.deploy.dir" value="${liferay.home}/osgi/modules" />
				</then>
				<else>
					<var name="auto.deploy.dir" value="${liferay.home}/deploy" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-database-property">
		<attribute name="property.name" />

		<sequential>
			<check-config />

			<var name="property.name" unset="true" />
			<var name="@{property.name}" unset="true" />

			<property name="property.name" value="@{property.name}" />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					String propertyName = project.getProperty("property.name");

					StringBuilder sb = new StringBuilder();

					sb.append("database.");
					sb.append(project.getProperty("database.type"));
					sb.append(".");
					sb.append(propertyName.substring(9));

					propertyValue = project.getProperty(sb.toString());

					project.setProperty(propertyName, propertyValue);
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="get-env-app-server">
		<sequential>
			<propertyregex
				input="${app.server.version}"
				override="true"
				property="app.server.major.version"
				regexp="(\d+\.\d+).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${app.server.major.version}"
				global="true"
				input="${app.server.major.version}"
				override="true"
				property="app.server.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.app.server.${app.server.type}${app.server.major.version.build}"
				name="env.option.app.server"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-env-browser">
		<sequential>
			<propertyregex
				input="${browser.version}"
				override="true"
				property="browser.major.version"
				regexp="(\d+\.\d+).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${browser.major.version}"
				global="true"
				input="${browser.major.version}"
				override="true"
				property="browser.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.browser.${browser.type}${browser.major.version.build}"
				name="env.option.browser"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-env-database">
		<sequential>
			<get-database-property property.name="database.version" />

			<propertyregex
				input="${database.version}"
				override="true"
				property="database.major.version"
				regexp="(\d+\.?\d+?).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${database.major.version}"
				global="true"
				input="${database.major.version}"
				override="true"
				property="database.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.database.${database.type}${database.major.version.build}"
				name="env.option.database"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-env-java-jdk">
		<sequential>
			<propertycopy
				from="env.option.java.jdk.${java.jdk.type}.${java.jdk.version}"
				name="env.option.java.jdk"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-env-liferay-portal">
		<sequential>
			<if>
				<not>
					<available file="git-commit-portal" />
				</not>
				<then>
					<record-git-commit-portal />
				</then>
			</if>

			<loadfile
				property="liferay.plugins.git.id"
				srcfile="git-commit-plugins"
			/>

			<loadfile
				property="liferay.portal.git.id"
				srcfile="git-commit-portal"
			/>

			<if>
				<or>
					<not>
						<isset property="env.SOURCE_JOB_BUILD_NUMBER" />
					</not>
					<equals arg1="${env.SOURCE_JOB_BUILD_NUMBER}" arg2="1" />
				</or>
				<then>
					<property name="liferay.previous.plugins.git.id" value="${liferay.plugins.git.id}" />
					<property name="liferay.previous.portal.git.id" value="${liferay.portal.git.id}" />
				</then>
				<else>
					<math
						datatype="int"
						operand1="${env.SOURCE_JOB_BUILD_NUMBER}"
						operand2="1"
						operation="-"
						result="previous.build.number"
					/>

					<property name="previous.commit.id.dir" value="${jenkins.shared.user.content.dir}/jobs/${env.SOURCE_JOB_NAME}/builds/${previous.build.number}" />

					<loadfile failonerror="false" property="liferay.previous.plugins.git.id" srcfile="${previous.commit.id.dir}/git-commit-plugins">
						<filterchain>
							<striplinebreaks/>
						</filterchain>
					</loadfile>

					<loadfile failonerror="false" property="liferay.previous.portal.git.id" srcfile="${previous.commit.id.dir}/git-commit-portal">
						<filterchain>
							<striplinebreaks/>
						</filterchain>
					</loadfile>
				</else>
			</if>

			<property name="liferay.compare.urls" value="https://github.com/liferay/liferay-plugins-ee/compare/${liferay.previous.plugins.git.id}...${liferay.plugins.git.id},https://github.com/liferay/liferay-portal-ee/compare/${liferay.previous.portal.git.id}...${liferay.portal.git.id}" />
		</sequential>
	</macrodef>

	<macrodef name="get-env-operating-system">
		<sequential>
			<propertyregex
				defaultValue="${operating.system.version}"
				global="true"
				input="${operating.system.version}"
				override="true"
				property="operating.system.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.operating.system.${operating.system.type}${operating.system.version.build}"
				name="env.option.operating.system"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-ip-address">
		<sequential>
			<if>
				<isset property="ip.address" />
				<then>
					<var name="ip.address" value="${ip.address}" />
				</then>
				<elseif>
					<os family="unix" />
					<then>
						<exec executable="/bin/bash" os="${os.unix}" outputproperty="ip.address">
							<arg value="-c" />
							<arg value="ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'" />
						</exec>
					</then>
				</elseif>
				<else>
					<fail message="Please set the property ${ip.address}." />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-class-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="poshi.class.name" unset="true" />

			<get-test-simple-class-name />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					String testSimpleClassName = project.getProperty("test.simple.class.name");

					String poshiClassName = testSimpleClassName.substring(0, testSimpleClassName.length() - 8);

					project.setProperty("poshi.class.name", poshiClassName);
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-method-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="poshi.method.name" unset="true" />

			<get-test-method-name />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					String testMethodName = project.getProperty("test.method.name");

					String poshiClassName = testMethodName.substring(4);

					project.setProperty("poshi.method.name", poshiClassName);
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-test-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<if>
				<contains string="${test.class}" substring="#" />
				<then>
					<get-poshi-class-name />
					<get-poshi-method-name />

					<var name="poshi.test.name" value="${poshi.class.name}#${poshi.method.name}" />
				</then>
				<else>
					<get-poshi-class-name />

					<var name="poshi.test.name" value="${poshi.class.name}" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-test-class-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.class.name" unset="true" />

			<get-poshi-class-name />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					import org.apache.tools.ant.DirectoryScanner;

					String poshiClassName = project.getProperty("poshi.class.name");

					try {
						DirectoryScanner directoryScanner = new DirectoryScanner();

						if (project.getProperty("test.basedir") != null) {
							directoryScanner.setBasedir(project.getProperty("test.basedir"));
						}
						else {
							directoryScanner.setBasedir(project.getBaseDir());
						}

						directoryScanner.setIncludes(new String[] {"**/test/functional/**/" + poshiClassName + ".testcase"});

						directoryScanner.scan();

						String[] fileNames = directoryScanner.getIncludedFiles();

						String fileName = fileNames[0];

						int x = fileName.indexOf("/test/functional/") + 17;

						String className = fileName.substring(x);

						className = className.replaceAll("/", ".");
						className = className.replaceAll(".testcase", "TestCase");

						project.setProperty("test.class.name", className);
					}
					catch (Exception e) {
					}
				]]>
			</script>

			<fail message="${test.name}.testcase does not exist." unless="test.class.name" />
		</sequential>
	</macrodef>

	<macrodef name="get-test-method-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.method.name" unset="true" />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					String testClass = project.getProperty("test.class");

					int x = testClass.indexOf("#");

					if (x != -1) {
						String testMethodName = testClass.substring(x + 1);

						if (!testMethodName.startsWith("test")) {
							testMethodName = "test" + testMethodName;
						}

						project.setProperty("test.method.name", testMethodName);
					}
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="get-test-simple-class-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.simple.class.name" unset="true" />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					String testClass = project.getProperty("test.class");

					String testSimpleClassName = testClass;

					if (testClass.contains("#")) {
						int x = testClass.indexOf("#");

						testSimpleClassName =  testClass.substring(0, x);
					}

					if (!testSimpleClassName.endsWith("TestCase")) {
						testSimpleClassName = testSimpleClassName + "TestCase";
					}

					project.setProperty("test.simple.class.name", testSimpleClassName);
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="get-test-url">
		<sequential>
			<get-testcase-property property.name="mobile.device.enabled" />

			<get-testcase-property property.name="testcase.url" />

			<if>
				<isset property="test.url" />
				<then>
					<var name="test.url" value="${test.url}" />
				</then>
				<elseif>
					<equals arg1="${mobile.device.enabled}" arg2="true" />
					<then>
						<get-ip-address />

						<var name="test.url" value="http://${ip.address}:8080" />
					</then>
				</elseif>
				<elseif>
					<isset property="testcase.url" />
					<then>
						<var name="test.url" value="${testcase.url}" />
					</then>
				</elseif>
				<else>
					<var name="test.url" value="http://localhost:8080" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-testcase-property">
		<attribute name="property.name" />

		<sequential>
			<var name="@{property.name}" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<property file="${project.dir}/test.generated.properties" />

					<var name="property.name" value="@{property.name}" />

					<get-test-method-name />
					<get-test-simple-class-name />

					<script classpathref="project.classpath" language="beanshell">
						<![CDATA[
							String propertyName = project.getProperty("property.name");
							String testMethodName = project.getProperty("test.method.name");
							String testSimpleClassName = project.getProperty("test.simple.class.name");

							StringBuilder sb = new StringBuilder();

							sb.append(testSimpleClassName);
							sb.append(".");
							sb.append(testMethodName);
							sb.append(".");
							sb.append(propertyName);

							String propertyValue = project.getProperty(sb.toString());

							if (propertyValue == null) {
								sb = new StringBuilder();

								sb.append(testSimpleClassName);
								sb.append(".");
								sb.append("all");
								sb.append(".");
								sb.append(propertyName);

								propertyValue = project.getProperty(sb.toString());
							}

							project.setProperty(propertyName, propertyValue);
						]]>
					</script>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-case-defect">
		<sequential>
			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="known.issues" />
				</then>
			</if>

			<condition property="testray.case.defect" value="${known.issues}" else="">
				<isset property="known.issues" />
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-components">
		<sequential>
			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="testray.component.names" />
					<get-testcase-property property.name="testray.main.component.name" />
				</then>
			</if>

			<condition property="testray.main.component.name" value="">
				<not>
					<isset property="testray.main.component.name" />
				</not>
			</condition>

			<condition property="testray.component.names" value="${testray.main.component.name}">
				<not>
					<isset property="testray.component.names" />
				</not>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-logs">
		<sequential>
			<antelope:stringutil property="job.name" string="${env.JOB_NAME}">
				<antelope:replace regex="," replacement="_" />
			</antelope:stringutil>

			<property name="testray.logs.dir" value="${job.name}/builds/${env.TOP_LEVEL_BUILD_NUMBER}" />

			<property name="testray.logs.console" value="${testray.logs.dir}/console.txt" />
			<property name="testray.logs.report" value="${testray.logs.dir}/report.html" />
		</sequential>
	</macrodef>

	<macrodef name="get-testray-project-name">
		<sequential>
			<propertyregex
				input="${testray.product.version}"
				override="true"
				property="testray.product.major.version"
				regexp="(\d+\.?\d+?).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${testray.product.major.version}"
				global="true"
				input="${testray.product.major.version}"
				override="true"
				property="testray.product.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="testray.project.${testray.product.type}${testray.product.major.version.build}.name"
				name="testray.project.name"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-run-id">
		<sequential>
			<var name="testray.run.id" unset="true" />

			<propertyregex
				input="${app.server.version}"
				override="true"
				property="app.server.major.version"
				regexp="(\d+\.\d+).*"
				replace="\1"
			/>

			<propertyregex
				input="${browser.version}"
				override="true"
				property="browser.major.version"
				regexp="(\d+\.\d+).*"
				replace="\1"
			/>

			<get-database-property property.name="database.version" />

			<propertyregex
				input="${database.version}"
				override="true"
				property="database.major.version"
				regexp="(\d+\.?\d+?).*"
				replace="\1"
			/>

			<property name="testray.run.id" value="${app.server.type}-${app.server.major.version} ${database.type}-${database.major.version} ${browser.type}-${browser.major.version} ${operating.system.type}-${operating.system.version} jdk${java.jdk.version}-${java.jdk.type}" />
		</sequential>
	</macrodef>

	<macrodef name="get-testray-team-name">
		<sequential>
			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					import org.apache.commons.lang.WordUtils;

					String testrayMainComponentName = project.getProperty("testray.main.component.name");
					String testrayTeamNamesString = project.getProperty("testray.team.names");

					String[] testrayTeamNames = testrayTeamNamesString.split(",");

					for (String testrayTeamName : testrayTeamNames) {
						StringBuilder sb = new StringBuilder();

						sb.append("testray.team.");
						sb.append(testrayTeamName);
						sb.append(".component.names");

						String testrayTeamComponentNamesString = project.getProperty(sb.toString());

						Set testrayTeamComponentNames = new HashSet(Arrays.asList(testrayTeamComponentNamesString.split(",")));

						if (testrayTeamComponentNames.contains(testrayMainComponentName)) {
							project.setProperty("testray.team.name", WordUtils.capitalize(testrayTeamName.replace('-', ' ')));

							break;
						}
					}
				]]>
			</script>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-testcase-description">
		<sequential>
			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="description" />
				</then>
			</if>

			<condition property="testray.testcase.description" value="${description}" else="">
				<isset property="description" />
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-testcase-name">
		<sequential>
			<var name="testray.testcase.name" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<get-poshi-test-name />

					<property name="testray.testcase.name" value="${poshi.test.name}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-testcase-priority">
		<sequential>
			<var name="testray.testcase.priority" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="priority" />

					<property name="testray.testcase.priority" value="${priority}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-testcase-product-edition">
		<sequential>
			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="testray.testcase.product.edition" />
				</then>
			</if>

			<condition property="testray.testcase.product.edition" value="CE">
				<not>
					<isset property="testray.testcase.product.edition" />
				</not>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="prepare-additional-bundles">
		<sequential>
			<get-testcase-property property.name="app.server.bundles.size" />

			<if>
				<isset property="app.server.bundles.size" />
				<then>
					<var name="app.server.bundle.index" value="1" />

					<antelope:repeat count="${app.server.bundles.size}">
						<set-app-server-properties
							app.server.bundle.index="${app.server.bundle.index}"
						/>

						<delete dir="${test.app.server.parent.dir}" />

						<copy todir="${test.app.server.dir}">
							<fileset dir="${app.server.dir}" />
						</copy>

						<if>
	  					 	<available file="${liferay.home}/deploy" />
							<then>
								<copy todir="${test.app.server.parent.dir}/deploy">
									<fileset dir="${liferay.home}/deploy" />
								</copy>
							</then>
						</if>

						<if>
	  					 	<available file="${liferay.home}/osgi" />
							<then>
								<copy todir="${test.app.server.parent.dir}/osgi">
									<fileset dir="${liferay.home}/osgi" />
								</copy>
							</then>
						</if>

						<chmod perm="a+x">
							<fileset dir="${test.app.server.bin.dir}">
								<include name="*.sh" />
							</fileset>
						</chmod>

						<replaceregexp
							file="${test.app.server.dir}/conf/server.xml"
							flags="g"
							match="=&quot;8(\d\d\d)&quot;"
							replace="=&quot;${test.app.server.leading.port.number}\1&quot;"
						/>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="liferay.home=${liferay.home}"
							value="liferay.home=${test.app.server.parent.dir}"
						/>

						<math
							datatype="int"
							operand1="${app.server.bundle.index}"
							operand2="1"
							operation="+"
							result="app.server.bundle.index"
						/>
					</antelope:repeat>

					<var name="app.server.bundle.index" unset="true" />
				</then>
			</if>

			<get-testcase-property property.name="databases.size" />

			<if>
				<isset property="databases.size" />
				<then>
					<var name="database.index" value="1" />

					<antelope:repeat count="${databases.size}">
						<set-app-server-properties
							app.server.bundle.index="${database.index}"
						/>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="lportal"
							value="lportal${database.index}"
						/>

						<math
							datatype="int"
							operand1="${database.index}"
							operand2="1"
							operation="+"
							result="database.index"
						/>
					</antelope:repeat>

					<var name="database.index" unset="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-database-jndi">
		<sequential>
			<if>
				<not>
					<and>
						<equals arg1="${app.server.type}" arg2="tomcat" />
						<equals arg1="${database.type}" arg2="mysql" />
					</and>
				</not>
				<then>
					<fail>Tests utilizing JNDI are only available for Tomcat+MySQL.</fail>
				</then>
			</if>

			<if>
				<not>
					<resourcecontains
						resource="${app.server.dir}/conf/context.xml"
						substring="jdbc/LiferayPool"
					/>
				</not>
				<then>
					<replace file="${app.server.dir}/conf/context.xml">
						<replacetoken><![CDATA[<Context>]]></replacetoken>
						<replacevalue>
							<![CDATA[
								<Context>
									<ResourceLink name="jdbc/LiferayPool" global="jdbc/LiferayPool" type="javax.sql.DataSource" />
							]]>
						</replacevalue>
					</replace>
				</then>
			</if>

			<if>
				<not>
					<resourcecontains
						resource="${app.server.dir}/conf/server.xml"
						substring="jdbc/LiferayPool"
					/>
				</not>
				<then>
					<get-database-property property.name="database.host" />
					<get-database-property property.name="database.password" />
					<get-database-property property.name="database.schema" />
					<get-database-property property.name="database.username" />

					<replace file="${app.server.dir}/conf/server.xml">
						<replacetoken><![CDATA[<GlobalNamingResources>]]></replacetoken>
						<replacevalue expandproperties="true">
							<![CDATA[
								<GlobalNamingResources>
									<Resource
										auth="Container"
										description="Global Address Database"
										driverClassName="com.mysql.jdbc.Driver"
										maxActive="40"
										maxIdle="20"
										maxWait="1000"
										name="jdbc/LiferayPool"
										password="${database.password}"
										type="javax.sql.DataSource"
										url="jdbc:mysql://${database.host}:3306/${database.schema}?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false"
										username="${database.username}"
									/>
							]]>
						</replacevalue>
					</replace>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-fix-pack-bundle" >
		<sequential>
			<if>
				<and>
					<isset property="test.fix.pack.base.url" />
					<isset property="test.fix.pack.zip.name" />
				</and>
				<then>
					<property name="test.build.fix.pack.zip.url" value="${test.fix.pack.base.url}/${test.fix.pack.zip.name}" />
				</then>
			</if>

			<if>
				<and>
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<matches pattern="http" string="${test.build.fix.pack.zip.url}" />
				</and>
				<then>
					<path id="app.server.dir">
						<dirset dir="${app.server.parent.dir}">
							<include name="*${app.server.type}-*" />
						</dirset>
					</path>

					<property name="app.server.dir" refid="app.server.dir" />

					<mirrors-get
						dest="${basedir}"
						src="${test.fix.pack.base.url}/patching-tool/LATEST.txt"
					/>

					<loadfile
						property="patching.tool.version"
						srcFile="LATEST.txt"
					/>

					<delete file="${basedir}/LATEST.txt" />

					<property name="test.build.patching.tool.zip.url" value="${test.fix.pack.base.url}/patching-tool/patching-tool-${patching.tool.version}.zip" />

					<mirrors-get
						dest="${basedir}"
						src="${test.build.patching.tool.zip.url}"
					/>

					<unzip dest="${app.server.dir}">
						<fileset
							dir="${basedir}"
							includes="patching-tool*"
						/>
					</unzip>

					<chmod perm="a+x">
						<fileset dir="${app.server.dir}/patching-tool">
							<include name="*.sh" />
						</fileset>
					</chmod>

					<mirrors-get
						dest="${app.server.dir}/patching-tool/patches"
						src="${test.build.fix.pack.zip.url}"
					/>

					<propertyregex
						input="${test.build.fix.pack.zip.url}"
						property="test.build.fix.pack.zip.file.name"
						regexp=".+/"
						replace=""
					/>

					<check-fix-pack-requirements
						fix.pack.dir="${app.server.dir}/patching-tool/patches"
						fix.pack.file.name="${test.build.fix.pack.zip.file.name}"
					/>

					<execute dir="${app.server.dir}/patching-tool">
						patching-tool${file.suffix.bat} auto-discovery
						patching-tool${file.suffix.bat} install -force
						patching-tool${file.suffix.bat} update-plugins
					</execute>

					<antelope:stringutil property="patching.tool.zip.file.name" string="${test.build.patching.tool.zip.url}">
						<antelope:replace regex=".+/patching-tool-" replacement="patching-tool-" />
					</antelope:stringutil>

					<delete file="${basedir}/${patching.tool.zip.file.name}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-cluster-properties">
		<sequential>
			<if>
				<not>
					<equals arg1="${app.server.type}" arg2="tomcat" />
				</not>
				<then>
					<fail>The public test clustering scripts are only available for Tomcat.</fail>
				</then>
			</if>

			<replace
				file="${app.server.tomcat.dir}/conf/server.xml"
				token="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;"
				value="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;0&quot;&gt;"
			/>

			<get-testcase-property property.name="app.server.bundles.size" />

			<if>
				<isset property="app.server.bundles.size" />
				<then>
					<var name="app.server.bundle.index" value="1" />

					<antelope:repeat count="${app.server.bundles.size}">
						<set-app-server-properties
							app.server.bundle.index="${app.server.bundle.index}"
						/>

						<replace
							file="${test.app.server.dir}/conf/server.xml"
							token="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;"
							value="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;${test.app.server.leading.port.number}&quot;&gt;"
						/>

						<math
							datatype="int"
							operand1="${app.server.bundle.index}"
							operand2="1"
							operation="+"
							result="app.server.bundle.index"
						/>
					</antelope:repeat>

					<var name="app.server.bundle.index" unset="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="print-gc-logs">
		<sequential>
			<if>
				<available file="/tmp/ant-gc.log" />
				<then>
					<loadfile property="ant-gc-log" srcFile="/tmp/ant-gc.log" />

					<echo>
Ant GC log:

${ant-gc-log}
					</echo>
				</then>
				<else>
					<echo>Unable to read /tmp/ant-gc.log</echo>
				</else>
			</if>

			<if>
				<available file="/tmp/tomcat-gc.log" />
				<then>
					<loadfile property="tomcat-gc-log" srcFile="/tmp/tomcat-gc.log" />

					<echo>
Tomcat GC log:

${tomcat-gc-log}
					</echo>
				</then>
				<else>
					<echo>Unable to read /tmp/tomcat-gc.log</echo>
				</else>
			</if>

			<if>
				<available file="/tmp/tsant-gc.log" />
				<then>
					<loadfile property="tsant-gc-log" srcFile="/tmp/tsant-gc.log" />

					<echo>
	Tsant GC log:

	${tsant-gc-log}</echo>
				</then>
				<else>
					<echo>Unable to read /tmp/tsant-gc.log</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-git-commit-plugins">
		<sequential>
			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					File pluginsDir = null;

					String lpPluginsDirName = project.getProperty("lp.plugins.dir");

					if ((lpPluginsDirName == null) || lpPluginsDirName.equals("")) {
						File projectDir = new File(project.getProperty("project.dir"));

						String projectDirName = projectDir.getName();

						String pluginsDirName = "liferay-plugins" + projectDirName.substring("liferay-portal".length());

						pluginsDir = new File(projectDir.getParent(), pluginsDirName);
					}
					else {
						if (lpPluginsDirName.contains("${basedir.name}")) {
							lpPluginsDirName = lpPluginsDirName.substring(0, lpPluginsDirName.lastIndexOf("/"));
						}

						pluginsDir = new File(lpPluginsDirName);
					}

					project.setProperty("git.plugins.dir", pluginsDir.toString());
				]]>
			</script>

			<exec dir="${git.plugins.dir}" executable="git" outputproperty="git.commit.plugins.rev.parse">
				<arg line="rev-parse HEAD" />
			</exec>

			<echo>Recording ${git.plugins.dir} with ${git.commit.plugins.rev.parse}.</echo>

			<var name="git.plugins.dir" unset="true" />

			<echo file="git-commit-plugins">${git.commit.plugins.rev.parse}</echo>

			<if>
				<isset property="env.JENKINS_HOME" />
				<then>
					<copy
						file="git-commit-plugins"
						todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-git-commit-portal">
		<sequential>
			<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
				<arg line="rev-parse HEAD" />
			</exec>

			<echo file="git-commit-portal">${git.commit.portal.rev.parse}</echo>

			<if>
				<isset property="env.JENKINS_HOME" />
				<then>
					<copy
						file="git-commit-portal"
						todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-test-class-file-names">
		<sequential>
			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					import org.apache.tools.ant.DirectoryScanner;

					List getClassGroups(List classFileNames, int groupsSize) {
						List classFileNameGroups = new ArrayList(groupsSize);

						for (int i = 0; i < groupsSize; i++) {
							classFileNameGroups.add(new ArrayList());
						}

						int i = 0;

						for (String classFileName : classFileNames) {
							List classFileNameGroup = classFileNameGroups.get(i++ % groupsSize);

							classFileNameGroup.add(classFileName);
						}

						return classFileNameGroups;
					}

					List getClassFileNames() {
						DirectoryScanner directoryScanner = new DirectoryScanner();

						directoryScanner.setBasedir(project.getBaseDir());
						directoryScanner.setExcludes(
							new String[] {
								"modules/apps/social/social-networking-test/test/integration/**/*Test.java",
								"modules/portal/portal-json-web-service-extender/test/integration/**/*Test.java",
								"modules/portal/portal-template-freemarker/test/integration/**/*Test.java",
								"modules/util/osgi-util/test/integration/**/*Test.java",
								"portal-service/test/unit/com/liferay/portal/log/assertor/PortalLogAssertorTest.java",
								"*/pacl/test/[\\w]+Test.class",
								"**/*ServiceHttpTest.java",
								"**/*ServiceJsonTest.java",
								"**/*ServiceSoapTest.java"
							});
						directoryScanner.setIncludes(new String[] {"**/test/integration/**/*Test.java", "**/test/unit/**/*Test.java"});

						directoryScanner.scan();

						List classFileNames = new ArrayList();

						for (String fileName : directoryScanner.getIncludedFiles()) {
							String classFileName = fileName.substring(fileName.indexOf("com" + File.separator), fileName.length() - 4);

							classFileName = classFileName.concat("class");

							classFileNames.add(classFileName);
						}

						Collections.sort(classFileNames);

						return classFileNames;
					}

					StringBuilder sb = new StringBuilder();

					int allTestClassGroupsSize = Integer.parseInt(project.getProperty("test.class.groups.size"));

					String autoBalanceTestClassNamesString = project.getProperty("test.class.names.auto.balance");

					String[] autoBalanceTestClassNames = autoBalanceTestClassNamesString.split(",");

					List classFileNames = getClassFileNames();

					List testClassGroups = getClassGroups(classFileNames, allTestClassGroupsSize);

					for (i = 0; i < allTestClassGroupsSize; i++) {
						List testClassGroup = testClassGroups.get(i);

						sb.append("TEST_CLASS_GROUP_");
						sb.append(i);
						sb.append("=");

						for (String testClass : testClassGroup) {
							sb.append(testClass);
							sb.append(",");
						}

						for (String testClass : autoBalanceTestClassNames) {
							if (!testClassGroup.contains(testClass)) {
								sb.append(testClass);
								sb.append(",");
							}
						}

						if (!testClassGroup.isEmpty() || autoBalanceTestClassNames.length > 0) {
							sb.setLength(sb.length() - 1);
						}

						sb.append("\n\n");
					}

					sb.append("TEST_CLASS_GROUPS=");

					for (int i = 0; i < allTestClassGroupsSize; i++) {
						sb.append(i);
						sb.append(" ");
					}

					if (allTestClassGroupsSize > 0) {
						sb.setLength(sb.length() - 1);
					}

					project.setProperty("test.class.file.names.properties.content", sb.toString());
				]]>
			</script>

			<echo file="test.class.file.names.properties">${test.class.file.names.properties.content}</echo>
		</sequential>
	</macrodef>

	<macrodef name="set-app-server-properties">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />

		<sequential>
			<var name="test.app.server.bin.dir" unset="true" />
			<var name="test.app.server.classes.portal.dir" unset="true" />
			<var name="test.app.server.deploy.dir" unset="true" />
			<var name="test.app.server.dir" unset="true" />
			<var name="test.app.server.leading.port.number" unset="true" />
			<var name="test.app.server.liferay.home" unset="true" />
			<var name="test.app.server.parent.dir" unset="true" />

			<math
				datatype="int"
				operand1="@{app.server.bundle.index}"
				operand2="8"
				operation="+"
				result="test.app.server.leading.port.number"
			/>

			<if>
				 <equals arg1="@{app.server.bundle.index}" arg2="0" />
				 <then>
					<var name="test.app.server.bin.dir" value="@{app.server.bin.dir}" />
					<var name="test.app.server.classes.portal.dir" value="${app.server.classes.portal.dir}" />
					<var name="test.app.server.deploy.dir" value="${app.server.deploy.dir}" />
					<var name="test.app.server.dir" value="${app.server.dir}" />
					<var name="test.app.server.liferay.home" value="${liferay.home}" />
					<var name="test.app.server.parent.dir" value="${app.server.parent.dir}" />
				 </then>
				 <else>
					<antelope:stringutil property="test.app.server.bin.dir" string="@{app.server.bin.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.classes.portal.dir" string="${app.server.classes.portal.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.deploy.dir" string="${app.server.deploy.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.dir" string="${app.server.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.liferay.home" string="${liferay.home}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.parent.dir" string="${app.server.parent.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>
				 </else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="set-portal-impl-portal-ext-properties">
		<sequential>
			<generate-jdbc-properties properties.file="portal-impl/src/portal-ext.properties" />
		</sequential>
	</macrodef>

	<macrodef name="set-portal-impl-portal-test-ext-properties">
		<sequential>
			<generate-jdbc-properties properties.file="portal-impl/test/portal-test-ext.properties">
				<post-action>
					<echo file="@{properties.file}" append="true"><![CDATA[
module.framework.base.dir=${project.dir}/osgi]]></echo>
				</post-action>
			</generate-jdbc-properties>
		</sequential>
	</macrodef>

	<macrodef name="set-portal-impl-system-ext-properties">
		<sequential>
			<echo file="portal-impl/test/system-ext.properties">log.sanitizer.enabled=false</echo>
		</sequential>
	</macrodef>

	<macrodef name="set-tomcat-version-number">
		<attribute name="liferay.portal.bundle" />

		<sequential>
			<if>
				<equals arg1="@{liferay.portal.bundle}" arg2="6.1.20" />
				<then>
					<echo file="app.server.${user.name}.properties" append="true">
						app.server.tomcat.version=7.0.27
					</echo>

					<var name="app.server.tomcat.bin.dir" value="${app.server.parent.dir}/tomcat-7.0.27/bin" />
				</then>
				<elseif>
					<or>
						<contains string="@{liferay.portal.bundle}" substring="6.2.10" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.2" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.3" />
					</or>
					<then>
						<echo file="app.server.${user.name}.properties" append="true">
							app.server.tomcat.version=7.0.42
						</echo>

						<var name="app.server.tomcat.bin.dir" value="${app.server.parent.dir}/tomcat-7.0.42/bin" />
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat">
		<sequential>
			<setup-testable-tomcat-logging />

			<setup-testable-tomcat-jmx />

			<setup-testable-tomcat-manager />

			<setup-testable-tomcat-osgi-modules />
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-logging">
		<sequential>
			<if>
				<and>
					<equals arg1="@{testable.tomcat.debug.logging}" arg2="on" />
					<not>
						<resourcecontains resource="${app.server.tomcat.dir}/conf/logging.properties" substring="org.apache.catalina.level" />
					</not>
				</and>
				<then>
					<echo file="${app.server.tomcat.dir}/conf/logging.properties" append="true">
						<![CDATA[
org.apache.catalina.level=ALL

org.apache.catalina.loader.WebappClassLoader.level=INFO
org.apache.catalina.loader.WebappLoader.level=INFO
org.apache.catalina.startup.ClassLoaderFactory.level=INFO]]>
					</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-jmx">
		<sequential>
			<var name="testable.tomcat.jmx.opts" value="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=${jmx.remote.authenticate} -Dcom.sun.management.jmxremote.port=${jmx.remote.port} -Dcom.sun.management.jmxremote.ssl=${jmx.remote.ssl}" />

			<if>
				<not>
					<resourcecontains resource="${app.server.tomcat.dir}/bin/setenv.bat" substring="${testable.tomcat.jmx.opts}" />
				</not>
				<then>
					<echo file="${app.server.tomcat.dir}/bin/setenv.bat" append="true">
						<![CDATA[
							set "JMX_OPTS=${testable.tomcat.jmx.opts}"

							set "CATALINA_OPTS=%CATALINA_OPTS% %JMX_OPTS%"
						]]>
					</echo>
				</then>
			</if>

			<if>
				<not>
					<resourcecontains resource="${app.server.tomcat.dir}/bin/setenv.sh" substring="${testable.tomcat.jmx.opts}" />
				</not>
				<then>
					<echo file="${app.server.tomcat.dir}/bin/setenv.sh" append="true">
						<![CDATA[
							JMX_OPTS="${testable.tomcat.jmx.opts}"

							CATALINA_OPTS="${CATALINA_OPTS} ${JMX_OPTS}"
						]]>
					</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-manager">
		<sequential>
			<if>
				<not>
					<available file="${app.server.tomcat.dir}/webapps/manager" type="dir" />
				</not>
				<then>
					<antelope:stringutil string="${app.server.tomcat.dir}" property="tomcat.version.beginindex">
						<antelope:indexof string="tomcat-" fromindex="0" />
					</antelope:stringutil>

					<antelope:math
						datatype="int"
						operand1="${tomcat.version.beginindex}"
						operand2="7"
						operation="+"
						result="tomcat.version.beginindex"
					/>

					<antelope:stringutil string="${app.server.tomcat.dir}" property="tomcat.version">
						<antelope:substring beginindex="${tomcat.version.beginindex}" />
					</antelope:stringutil>

					<antelope:stringutil string="${tomcat.version}" property="tomcat.major.version.endindex">
						<antelope:indexof string="." fromindex="0" />
					</antelope:stringutil>

					<antelope:stringutil string="${tomcat.version}" property="tomcat.major.version">
						<antelope:substring beginindex="0" endindex="${tomcat.major.version.endindex}" />
					</antelope:stringutil>

					<mirrors-get
						dest="tomcat.zip"
						src="${app.server.tomcat.zip.url}"
					/>

					<unzip
						dest="${app.server.tomcat.dir}/webapps"
						src="tomcat.zip"
					>
						<patternset
							includes="apache-tomcat-${tomcat.version}/webapps/manager/**/*"
						/>
						<mapper>
							<globmapper from="apache-tomcat-${tomcat.version}/webapps/*" to="*" />
						</mapper>
					</unzip>

					<delete file="tomcat.zip" />
				</then>
			</if>

			<xmltask source="${app.server.tomcat.dir}/conf/tomcat-users.xml" dest="${app.server.tomcat.dir}/conf/tomcat-users.xml">
				<copy path="/tomcat-users/role[@rolename='manager-gui']/@rolename" property="tomcat.role.manager-gui.exists" />
				<copy path="/tomcat-users/role[@rolename='manager-jmx']/@rolename" property="tomcat.role.manager-jmx.exists" />
				<copy path="/tomcat-users/role[@rolename='manager-script']/@rolename" property="tomcat.role.manager-script.exists" />
				<copy path="/tomcat-users/role[@rolename='manager-status']/@rolename" property="tomcat.role.manager-status.exists" />
				<copy path="/tomcat-users/role[@rolename='tomcat']/@rolename" property="tomcat.role.tomcat.exists" />
				<copy path="/tomcat-users/user[@username='${app.server.tomcat.manager.user}']/@username" property="tomcat.user.exists" />

				<call path="/">
					<actions>
						<if>
							<not>
								<and>
									<isset property="tomcat.role.manager-gui.exists" />
									<isset property="tomcat.role.manager-script.exists" />
									<isset property="tomcat.role.manager-jmx.exists" />
									<isset property="tomcat.role.manager-status.exists" />
									<isset property="tomcat.role.tomcat.exists" />
									<isset property="tomcat.user.exists" />
								</and>
							</not>
							<then>
								<tstamp>
									<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
								</tstamp>

								<copy
									file="${app.server.tomcat.dir}/conf/tomcat-users.xml"
									overwrite="true"
									tofile="${app.server.tomcat.dir}/conf/tomcat-users.xml.${tstamp.value}"
								/>
							</then>
						</if>
					</actions>
				</call>

				<insert path="/tomcat-users" unless="tomcat.role.tomcat.exists"><![CDATA[
					<role rolename="tomcat" />
				]]></insert>

				<insert path="/tomcat-users" unless="tomcat.role.manager-gui.exists"><![CDATA[
					<role rolename="manager-gui" />
				]]></insert>

				<insert path="/tomcat-users" unless="tomcat.role.manager-script.exists"><![CDATA[
					<role rolename="manager-script" />
				]]></insert>

				<insert path="/tomcat-users" unless="tomcat.role.manager-jmx.exists"><![CDATA[
					<role rolename="manager-jmx" />
				]]></insert>

				<insert path="/tomcat-users" unless="tomcat.role.manager-status.exists"><![CDATA[
					<role rolename="manager-status" />
				]]></insert>

				<insert path="/tomcat-users" unless="tomcat.user.exists"><![CDATA[
					<user
						password="${app.server.tomcat.manager.password}"
						roles="tomcat,manager-gui,manager-script,manager-jmx,manager-status"
						username="${app.server.tomcat.manager.user}"
					/>
				]]></insert>
			</xmltask>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-osgi-modules">
		<sequential>
			<copy todir="${liferay.home}/osgi/modules">
				<fileset dir="${liferay.home}/osgi/test" />
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="start-android-device">
		<sequential>
			<fail message="Please set the property ${mobile.android.home}." unless="mobile.android.home" />

			<execute>
				echo no | ${mobile.android.home}/tools/android create avd -f -n deviceName -t android-19
			</execute>

			<echo file="${user.home}/.android/avd/deviceName.avd/config.ini" append="true">
				hw.keyboard=yes
			</echo>

			<exec executable="/bin/bash" os="${os.unix}" spawn="true">
				<arg value="-c" />
				<arg value="${mobile.android.home}/tools/emulator -avd deviceName -no-boot-anim" />
			</exec>

			<exec executable="cmd.exe" os="${os.windows}">
				<arg value="/c" />
				<arg value="${mobile.android.home}/tools/emulator -avd deviceName -no-boot-anim" />
			</exec>

			<sleep seconds="120" />

			<execute>
				${mobile.android.home}/platform-tools/adb push ${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/dependencies/mobile/swipe_down.sh /data/local
				${mobile.android.home}/platform-tools/adb push ${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/dependencies/mobile/swipe_up.sh /data/local
				${mobile.android.home}/platform-tools/adb push ${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/dependencies/mobile/tap.sh /data/local

				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell chmod 0777 /data/local/swipe_down.sh
				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell chmod 0777 /data/local/swipe_up.sh
				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell chmod 0777 /data/local/tap.sh

				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell settings put system pointer_location 1
				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell settings put system show_touches 1
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="start-appium">
		<sequential>
			<fail message="Please set the property ${mobile.android.home}." unless="mobile.android.home" />

			<parallel>
				<daemons>
					<exec executable="/bin/bash" os="${os.unix}">
						<env key="PATH" value="${env.PATH}:${mobile.android.home}/tools:${mobile.android.home}/platform-tools" />
						<arg value="-c" />
						<arg value="${appium.unix.cmd}" />
					</exec>

					<exec dir="${appium.win32.dir}" executable="cmd.exe" os="${os.windows}">
						<env key="Path" value="${env.Path}:${mobile.android.home}/tools:${mobile.android.home}/platform-tools" />
						<arg value="/c" />
						<arg value="${appium.win32.cmd}" />
					</exec>
				</daemons>
			</parallel>
		</sequential>
	</macrodef>

	<macrodef name="start-app-server">
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="" name="testable.portal.started.marker.file" />

		<sequential>
			<if>
				<equals arg1="${tcat.enabled}" arg2="true" />
				<then>
					<start-app-server-cmd
						app.server.bin.dir="${app.server.tcat.admin.bin.dir}"
						app.server.bundle.index="@{app.server.bundle.index}"
						testable.portal.started.marker.file="@{testable.portal.started.marker.file}"
					/>

					<start-app-server-cmd
						app.server.bin.dir="${app.server.tcat.agent.bin.dir}"
						app.server.bundle.index="@{app.server.bundle.index}"
						testable.portal.started.marker.file="@{testable.portal.started.marker.file}"
					/>
				</then>
				<else>
					<start-app-server-cmd
						app.server.bundle.index="@{app.server.bundle.index}"
						testable.portal.started.marker.file="@{testable.portal.started.marker.file}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-app-server-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="" name="testable.portal.started.marker.file" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.index="@{app.server.bundle.index}"
			/>

			<local name="portal.not.started" />

			<if>
				<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
				<then>
					<waitfor maxwait="1" maxwaitunit="second" timeoutproperty="portal.not.started">
						<socket server="localhost" port="${test.app.server.leading.port.number}180" />
					</waitfor>
				</then>
				<elseif>
					<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.agent.bin.dir}" />
					<then>
						<waitfor maxwait="1" maxwaitunit="second" timeoutproperty="portal.not.started">
							<socket server="localhost" port="${test.app.server.leading.port.number}080" />
						</waitfor>
					</then>
				</elseif>
				<else>
					<waitfor maxwait="1" maxwaitunit="second" timeoutproperty="portal.not.started">
						<socket server="localhost" port="${test.app.server.leading.port.number}080" />
					</waitfor>
				</else>
			</if>

			<if>
				<isset property="portal.not.started" />
				<then>
					<if>
						<not>
							<equals arg1="@{testable.portal.started.marker.file}" arg2="" />
						</not>
						<then>
							<echo file="@{testable.portal.started.marker.file}" message="1" />
						</then>
					</if>

					<if>
						<equals arg1="${app.server.type}" arg2="jboss" />
						<then>
							<echo file="${test.app.server.deploy.dir}/ROOT.war.dodeploy"></echo>
						</then>
					</if>

					<antcall target="delete-liferay-home" />

					<if>
						<equals arg1="${test.ant.launched.by.selenium}" arg2="true" />
						<then>
							<exec dir="${test.app.server.bin.dir}" executable="${app.server.start.executable}" resolveexecutable="true">
								<arg line="${app.server.start.executable.arg.line}" />
							</exec>

							<wait-for-app-server app.server.bin.dir="@{app.server.bin.dir}" />
						</then>
						<else>
							<parallel>
								<sequential>
									<wait-for-app-server app.server.bin.dir="@{app.server.bin.dir}" />
								</sequential>
								<daemons>
									<exec dir="${test.app.server.bin.dir}" executable="${app.server.start.executable}" failonerror="true" resolveexecutable="true">
										<arg line="${app.server.start.executable.arg.line}" />
									</exec>
								</daemons>
							</parallel>
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-lcs-app-server">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="8" name="app.server.leading.port.number" />

		<sequential>
			<parallel>
				<sequential>
					<waitfor maxwait="5" maxwaitunit="minute" timeoutproperty="app.server.waiting.timeout">
						<socket server="localhost" port="@{app.server.leading.port.number}080" />
					</waitfor>
				</sequential>
				<daemons>
					<exec dir="@{app.server.bin.dir}" executable="${app.server.start.executable}" failonerror="true" resolveexecutable="true">
						<arg line="${app.server.start.executable.arg.line}" />
					</exec>
				</daemons>
			</parallel>

			<if>
				<equals arg1="@{app.server.bundle.index}" arg2="0" />
				<then>
					<record action="stop" name="${project.dir}/log" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-android-device">
		<sequential>
			<fail message="Please set the property ${mobile.android.home}." unless="mobile.android.home" />

			<execute>
				${mobile.android.home}/platform-tools/adb emu kill
				${mobile.android.home}/tools/android delete avd -n deviceName
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server">
		<attribute default="0" name="app.server.bundle.index" />

		<sequential>
			<if>
				<equals arg1="${tcat.enabled}" arg2="true" />
				<then>
					<stop-app-server-cmd
						app.server.bin.dir="${app.server.tcat.admin.bin.dir}"
						app.server.bundle.index="@{app.server.bundle.index}"
					/>

					<stop-app-server-cmd
						app.server.bin.dir="${app.server.tcat.agent.bin.dir}"
						app.server.bundle.index="@{app.server.bundle.index}"
					/>
				</then>
				<else>
					<stop-app-server-cmd
						app.server.bundle.index="@{app.server.bundle.index}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-appium">
		<sequential>
			<exec executable="/bin/bash" os="${os.unix}" >
				<arg value="-c" />
				<arg value="killall node" />
			</exec>

			<exec executable="/bin/bash" os="${os.unix}" >
				<arg value="-c" />
				<arg value="fuser -k 9515/tcp" />
			</exec>

			<exec executable="cmd.exe" os="${os.windows}" >
				<arg value="/c" />
				<arg value="tskill node" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.index="@{app.server.bundle.index}"
			/>

			<if>
				<and>
					<equals arg1="@{app.server.bundle.index}" arg2="0" />
					<not>
						<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
					</not>
				</and>
				<then>
					<antcall target="clean-up-logs" />

					<record action="start" name="${project.dir}/log" />
				</then>
			</if>

			<exec dir="${test.app.server.bin.dir}" executable="${app.server.stop.executable}" resolveexecutable="true">
				<arg line="${app.server.stop.executable.arg.line}" />
			</exec>

			<if>
				<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
				<then>
					<waitfor maxwait="1" maxwaitunit="minute">
						<not>
							<http url="http://localhost:${test.app.server.leading.port.number}180/console" />
						</not>
					</waitfor>
				</then>
				<elseif>
					<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.agent.bin.dir}" />
					<then>
						<waitfor maxwait="1" maxwaitunit="minute">
							<not>
								<http url="http://localhost:${test.app.server.leading.port.number}080" />
							</not>
						</waitfor>
					</then>
				</elseif>
				<else>
					<waitfor maxwait="1" maxwaitunit="minute">
						<not>
							<http url="http://localhost:${test.app.server.leading.port.number}080/web/guest" />
						</not>
					</waitfor>
				</else>
			</if>

			<if>
				<and>
					<equals arg1="@{app.server.bundle.index}" arg2="0" />
					<not>
						<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
					</not>
				</and>
				<then>
					<record action="stop" name="${project.dir}/log" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-lcs-app-server">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="8" name="app.server.leading.port.number" />

		<sequential>
			<if>
				<equals arg1="@{app.server.bundle.index}" arg2="0" />
				<then>
					<antcall target="clean-up-logs" />

					<record action="start" name="${project.dir}/log" />
				</then>
			</if>

			<exec dir="@{app.server.bin.dir}" executable="${app.server.stop.executable}" resolveexecutable="true">
				<arg line="${app.server.stop.executable.arg.line}" />
			</exec>

			<waitfor maxwait="1" maxwaitunit="minute">
				<not>
					<socket server="localhost" port="@{app.server.leading.port.number}080" />
				</not>
			</waitfor>
		</sequential>
	</macrodef>

	<macrodef name="wait-for-app-server">
		<attribute name="app.server.bin.dir" />
		<sequential>
			<local name="app.server.waiting.url" />

			<if>
				<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
				<then>
					<property name="app.server.waiting.url" value="http://localhost:${test.app.server.leading.port.number}180/console" />
				</then>
				<elseif>
					<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.agent.bin.dir}" />
					<then>
						<property name="app.server.waiting.url" value="http://localhost:${test.app.server.leading.port.number}080" />
					</then>
				</elseif>
				<else>
					<property name="app.server.waiting.url" value="http://localhost:${test.app.server.leading.port.number}080/web/guest" />
				</else>
			</if>

			<local name="app.server.waiting.timeout" />

			<waitfor maxwait="5" maxwaitunit="minute" timeoutproperty="app.server.waiting.timeout">
				<http url="${app.server.waiting.url}" />
			</waitfor>

			<fail if="app.server.waiting.timeout" message="App server waiting timeout on ${app.server.waiting.url}" />
		</sequential>
	</macrodef>

	<target name="build-sql-file">
		<get-testcase-property property.name="portal.version" />

		<if>
			<isset property="portal.version" />
			<then>
				<if>
					<equals arg1="${portal.version}" arg2="6.1.2" />
					<then>
						<property name="portal.version.url.path" value="6.1.2-ga3" />
					</then>
					<else>
						<property name="portal.version.url.path" value="${portal.version}" />
					</else>
				</if>

				<if>
					<or>
						<equals arg1="${portal.version}" arg2="6.0.6" />
						<equals arg1="${portal.version}" arg2="6.1.2" />
					</or>
					<then>
						<propertycopy from="sql.legacy.base.url[ce]" name="sql.legacy.base.url" />
					</then>
					<else>
						<propertycopy from="sql.legacy.base.url[ee]" name="sql.legacy.base.url" />
					</else>
				</if>

				<propertycopy from="sql.legacy.zip[${portal.version}]" name="sql.legacy.zip" />

				<delete dir="sql/legacy" failonerror="false" />

				<tstamp>
					<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
				</tstamp>

				<mirrors-get src="${sql.legacy.base.url}/${portal.version.url.path}/${sql.legacy.zip}" dest="${tstamp.value}.zip" />

				<unzip dest="sql/legacy/${portal.version}" src="${tstamp.value}.zip">
					<mapper from="[^/]+/(.*)" to="\1" type="regexp" />
				</unzip>

				<delete file="${tstamp.value}.zip" />
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${database.type}" arg2="hsql" />
			</not>
			<then>
				<get-testcase-property property.name="databases.size" />

				<if>
					<and>
						<isset property="databases.size" />
						<equals arg1="${database.type}" arg2="mysql" />
					</and>
					<then>
						<var name="database.index" value="1" />

						<echo file="create.sql">drop database if exists lportal;
create database lportal character set utf8;</echo>

						<antelope:repeat count="${databases.size}">
							<echo append="true" file="create.sql">

drop database if exists lportal${database.index};
create database lportal${database.index} character set utf8;</echo>

							<math
								datatype="int"
								operand1="${database.index}"
								operand2="1"
								operation="+"
								result="database.index"
							/>
						</antelope:repeat>

						<var name="database.index" unset="true" />
					</then>
					<else>
						<if>
							<or>
								<not>
									<isset property="sql.dir" />
								</not>
								<not>
									<isset property="sql.file" />
								</not>
							</or>
							<then>
								<get-testcase-property property.name="database.minimal.enabled" />

								<if>
									<equals arg1="${database.minimal.enabled}" arg2="true" />
									<then>
										<var name="database.create.suffix" value="-bare" />
									</then>
								</if>

								<property name="sql.dir" value="sql\create${database.create.suffix}\" />
								<property name="sql.file" value="create${database.create.suffix}-${database.type}.sql" />
							</then>
						</if>

						<copy file="${sql.dir}${sql.file}" tofile="create.sql" />
					</else>
				</if>

				<get-database-property property.name="database.device.name" />

				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<replace file="create.sql">
							<replacetoken>create database lportal;</replacetoken>
							<replacevalue>create database lportal pagesize 8192;</replacevalue>
						</replace>
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="sybase" />
						<then>
							<replace file="create.sql">
								<replacefilter>
									<replacetoken>use master</replacetoken>
									<replacevalue expandProperties="true"><![CDATA[use master
dump transaction master with no_log
go
if exists (select * from master.dbo.sysdatabases where name = "lportal")
begin
drop database lportal
end
go
create database lportal on ${database.device.name} = "250m"
go]]></replacevalue>
								</replacefilter>
								<replacefilter>
									<replacetoken>use lportal</replacetoken>
									<replacevalue><![CDATA[use lportal
go]]></replacevalue>
								</replacefilter>
							</replace>
						</then>
					</elseif>
				</if>

				<get-database-property property.name="database.schema" />

				<if>
					<not>
						<equals arg1="${database.schema}" arg2="lportal" />
					</not>
					<then>
						<replaceregexp
							file="create.sql"
							flags="g"
							match="lportal"
							replace="${database.schema}"
						/>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="build-test-results-xml">
		<get-env-app-server />
		<get-env-browser />
		<get-env-database />
		<get-env-java-jdk />
		<get-env-liferay-portal />
		<get-env-operating-system />
		<get-testray-case-defect />
		<get-testray-components />
		<get-testray-logs />
		<get-testray-project-name />
		<get-testray-run-id />
		<get-testray-team-name />
		<get-testray-testcase-description />
		<get-testray-testcase-name />
		<get-testray-testcase-priority />
		<get-testray-testcase-product-edition />

		<if>
			<isset property="env.TEST_BUILD_FIX_PACK_NAME" />
			<then>
				<propertyregex
					input="${testray.build.name}"
					override="true"
					property="testray.build.name"
					regexp="(-\s)\d+(\s-)"
					replace="\1${env.TEST_BUILD_FIX_PACK_NAME}\2"
				/>
			</then>
		</if>

		<if>
			<available file="portal-web/test-results/functional/report.html" />
			<then>
				<property name="test.case.attachments">
					<![CDATA[
						<attachments>
							<file name="console.output" value="${testray.logs.console}" />
							<file name="report.html" value="${testray.logs.report}" />
						</attachments>
					]]>
				</property>
			</then>
			<else>
				<property name="test.case.attachments">
					<![CDATA[
						<attachments>
							<file name="console.output" value="${testray.logs.console}" />
						</attachments>
					]]>
				</property>
			</else>
		</if>

		<property name="test.case.properties">
			<![CDATA[
				<properties>
					<property name="testray.case.defect" value="${testray.case.defect}" />
					<property name="testray.component.names" value="${testray.component.names}" />
					<property name="testray.main.component.name" value="${testray.main.component.name}" />
					<property name="testray.team.name" value="${testray.team.name}" />
					<property name="testray.testcase.description" value="${testray.testcase.description}" />
					<property name="testray.testcase.name" value="${testray.testcase.name}" />
					<property name="testray.testcase.priority" value="${testray.testcase.priority}" />
					<property name="testray.testcase.product.edition" value="${testray.testcase.product.edition}" />
				</properties>
			]]>
		</property>

		<property name="test.suite.properties">
			<![CDATA[
				<environments>
					<environment type="Application Server" option="${env.option.app.server}" />
					<environment type="Browser" option="${env.option.browser}" />
					<environment type="Database" option="${env.option.database}" />
					<environment type="Java JDK" option="${env.option.java.jdk}" />
					<environment type="Operating System" option="${env.option.operating.system}" />
				</environments>
				<properties>
					<property name="app.server.type" value="${app.server.type}" />
					<property name="app.server.version" value="${app.server.version}" />
					<property name="browser.type" value="${browser.type}" />
					<property name="browser.version" value="${browser.version}" />
					<property name="database.type" value="${database.type}" />
					<property name="database.version" value="${database.version}" />
					<property name="liferay.compare.urls" value="${liferay.compare.urls}" />
					<property name="liferay.plugins.git.id" value="${liferay.plugins.git.id}" />
					<property name="liferay.portal.branch" value="${liferay.portal.branch}" />
					<property name="liferay.portal.bundle" value="${liferay.portal.bundle}" />
					<property name="liferay.portal.git.id" value="${liferay.portal.git.id}" />
					<property name="java.jdk.type" value="${java.jdk.type}" />
					<property name="java.jdk.version" value="${java.jdk.version}" />
					<property name="operating.system.type" value="${operating.system.type}" />
					<property name="operating.system.version" value="${operating.system.version}" />
					<property name="testray.build.name" value="${testray.build.name}" />
					<property name="testray.build.time" value="${testray.build.time}" />
					<property name="testray.build.type" value="${testray.build.type}" />
					<property name="testray.product.type" value="${testray.product.type}" />
					<property name="testray.product.version" value="${testray.product.version}" />
					<property name="testray.project.name" value="${testray.project.name}" />
					<property name="testray.run.id" value="${testray.run.id}" />
				</properties>
			]]>
		</property>

		<for param="file.name">
			<path>
				<fileset dir="modules" erroronmissingdir="false">
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset dir="portal-impl/test-results" erroronmissingdir="false">
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset dir="portal-service/test-results" erroronmissingdir="false">
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset dir="portal-web/test-results" erroronmissingdir="false">
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset dir="util-java/test-results" erroronmissingdir="false">
					<include name="**/TEST-*.xml" />
				</fileset>
			</path>
			<sequential>
				<var name="file.name" value="@{file.name}" />

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="\s*\&lt;/?environment[^\n^\r]*[\n\r]"
					replace=""
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="\s*\&lt;/?propert[^\n^\r]*[\n\r]"
					replace=""
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="&lt;testcase[^&lt;]*?&lt;skipped[\s\S]*?testcase&gt;"
					replace=""
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="(\s*\&lt;testcase[^/\n]*)/&gt;"
					replace="\1&gt;${line.separator}&lt;/testcase&gt;"
				/>

				<replaceregexp
					file="@{file.name}"
					match="&lt;testcase[^&gt;]*&gt;"
					replace="${test.suite.properties}\0"
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="&lt;testcase[^&gt;]*&gt;"
					replace="\0${test.case.attachments}${line.separator}${test.case.properties}"
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="(.*classname=&quot;\S+\.(\w+).*name=&quot;(\w+)[\s\S]+?)(\$\{testray\.testcase\.name\})"
					replace="\1\2#\3"
				/>

				<if>
					<isset property="group.index" />
					<then>
						<replaceregexp
							file="@{file.name}"
							flags="g"
							match="\$\{testray\.testcase\.name\}"
							replace="${testray.main.component.name}#${group.index}"
						/>
					</then>
					<else>
						<replaceregexp
							file="@{file.name}"
							flags="g"
							match="\$\{testray\.testcase\.name\}"
							replace="${testray.main.component.name}"
						/>
					</else>
				</if>

				<if>
					<contains string="@{file.name}" substring="EvaluateLog" />
					<then>
						<replaceregexp
							file="@{file.name}"
							flags="g"
							match="testray\.testcase\.name.*(?=&quot;)"
							replace="\0_EvaluateLog"
						/>
					</then>
				</if>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="\&gt;[\n\s]*\&lt;"
					replace="\&gt;${line.separator}\&lt;"
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="(&lt;/?)error"
					replace="\1failure"
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="(&lt;failure\s*)type"
					replace="\1message"
				/>
			</sequential>
		</for>
	</target>

	<target name="check-config">
		<check-config />
	</target>

	<target name="check-inet-address">
		<if>
			<and>
				<equals arg1="${app.server.type}" arg2="jboss" />
				<or>
					<equals arg1="${app.server.jboss.version}" arg2="6.0.1" />
					<equals arg1="${app.server.jboss.version}" arg2="6.1.0" />
				</or>
			</and>
			<then>
				<exec executable="/bin/bash" outputproperty="inet.address">
					<arg value="-c" />
					<arg value="ifconfig eth0:0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'" />
				</exec>

				<if>
					<equals arg1="${inet.address}" arg2="127.0.0.1" />
					<then>
						<replace file="${app.server.jboss.instance.dir}/configuration/standalone.xml">
							<replacefilter>
								<replacetoken><![CDATA[<inet-address value="${jboss.bind.address:127.0.0.1}"/>]]></replacetoken>
								<replacevalue><![CDATA[<nic name="eth0:0" />]]></replacevalue>
							</replacefilter>
							<replacefilter>
								<replacetoken><![CDATA[<inet-address value="${jboss.bind.address.management:127.0.0.1}"/>]]></replacetoken>
								<replacevalue><![CDATA[<nic name="eth0:0" />]]></replacevalue>
							</replacefilter>
						</replace>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="clean-app-server-deploy-dir">
		<delete includeemptydirs="true" failonerror="false">
			<fileset
				dir="${app.server.deploy.dir}"
				excludes=",*.dodeploy,*.rar,*.sar/**,*.xml,.autodeploystatus/**,liferay-portal/**,liferay-portal.war/**,marketplace-portlet/**,portal-compat-hook/**,security/**,root/**,ROOT/**,ROOT.war/**,tunnel-web/**,tunnel-web.war/**"
			/>
		</delete>
	</target>

	<target name="clean-up-bundles">
		<delete file="test.${user.name}.properties" />

		<antcall target="delete-liferay-home" />

		<delete includeemptydirs="true">
			<fileset dir="${app.server.parent.dir}" excludes="*.zip" />
		</delete>
	</target>

	<target name="clean-up-java-processes">
		<if>
			<os family="unix" />
			<then>
				<echo file="cleanjava.sh">
					<![CDATA[
						#!/bin/bash

						for i in `ps -o pid,args -e | grep /opt/java/jdk | grep -v ant | grep -v grep | grep -v jenkins | cut -c1-5`
						do
							echo "Killing $i"

							kill -9 $i
						done
					]]>
				</echo>

				<chmod file="cleanjava.sh" perm="a+x" />

				<exec executable="${basedir}/cleanjava.sh" />

				<delete file="cleanjava.sh" />
			</then>
		</if>
	</target>

	<target name="clean-up-logs">
		<delete failonerror="false" file="log" />

		<delete failonerror="false" file="portal-web/test-ant-scripts/log" />
	</target>

	<target name="clean-up-sikuli-temp-files">
		<delete dir="lib/development/libs" />
	</target>

	<target name="clean-up-web-xml">
		<copy file="portal-web/docroot/WEB-INF/web.xml" tofile="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml" overwrite="true" />
	</target>

	<target name="copy-log-file">
		<for param="log.file">
			<path>
				<fileset dir="${liferay.home}/logs">
					<include name="*.log" />
				</fileset>
			</path>
			<sequential>
				<copy file="@{log.file}" tofile="log" overwrite="true" />
			</sequential>
		</for>
	</target>

	<target name="copy-optional-jars">
		<get-database-property property.name="database.version" />

		<if>
			<equals arg1="${database.type}" arg2="db2" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
					<fileset
						dir="${app.server.lib.global.dir}"
						includes="${jdbc.db2.driver}"
					/>
				</delete>

				<for list="${jdbc.db2.driver}" param="jdbc.driver">
					<sequential>
						<mirrors-get
							dest="${todir}"
							src="${test.jdbc.drivers.url}/db2/8.1.18/@{jdbc.driver}"
						/>
					</sequential>
				</for>
			</then>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="mysql" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.mysql.driver}" />
					</not>
				</and>
				<then>
					<copy todir="${todir}">
						<fileset
							dir="lib/development"
							includes="${jdbc.mysql.driver}"
						/>
					</copy>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="oracle" />
					<equals arg1="${database.version}" arg2="10" />
				</and>
				<then>
					<delete includeemptydirs="true" failonerror="false">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.oracle.driver}"
						/>
					</delete>

					<mirrors-get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/oracle/10.2.0.1.0/${jdbc.oracle.driver}"
					/>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="oracle" />
					<equals arg1="${database.version}" arg2="11" />
				</and>
				<then>
					<delete includeemptydirs="true" failonerror="false">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.oracle.driver}"
						/>
					</delete>

					<mirrors-get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/oracle/11.2.0.1.0/${jdbc.oracle.driver}"
					/>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="postgresql" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.postgresql.driver}" />
					</not>
				</and>
				<then>
					<copy todir="${todir}">
						<fileset
							dir="lib/development"
							includes="${jdbc.postgresql.driver}"
						/>
					</copy>
				</then>
			</elseif>
		</if>
	</target>

	<target name="copy-sikuli-temp-files">
		<if>
			<os family="unix" />
			<then>
				<mirrors-get
					dest="lib/development/opencv-linux-x86.jar"
					src="http://repo1.maven.org/maven2/org/bytedeco/javacpp-presets/opencv/2.4.9-0.9/opencv-2.4.9-0.9-linux-x86.jar"
				/>

				<mirrors-get
					dest="lib/development/opencv-linux-x86_64.jar"
					src="http://repo1.maven.org/maven2/org/bytedeco/javacpp-presets/opencv/2.4.9-0.9/opencv-2.4.9-0.9-linux-x86_64.jar"
				/>
			</then>
			<else>
				<if>
					<os family="windows" />
					<then>
						<mirrors-get
							dest="lib/development/opencv-windows-x86.jar"
							src="http://repo1.maven.org/maven2/org/bytedeco/javacpp-presets/opencv/2.4.9-0.9/opencv-2.4.9-0.9-windows-x86.jar"
						/>

						<mirrors-get
							dest="lib/development/opencv-windows-x86_64.jar"
							src="http://repo1.maven.org/maven2/org/bytedeco/javacpp-presets/opencv/2.4.9-0.9/opencv-2.4.9-0.9-windows-x86_64.jar"
						/>
					</then>
				</if>
			</else>
		</if>
	</target>

	<target name="curl-execute">
		<fail message="Please set the property ${curl.args}." unless="curl.args" />

		<exec executable="curl">
			<arg line="${curl.args}" />
		</exec>
	</target>

	<target name="delete-liferay-home">
		<if>
			<not>
				<equals arg1="${delete.liferay.home}" arg2="false" />
			</not>
			<then>
				<if>
					<not>
						<isset property="test.app.server.liferay.home" />
					</not>
					<then>
						<set-app-server-properties />
					</then>
				</if>

				<delete dir="${test.app.server.liferay.home}/data" />
				<delete dir="${test.app.server.liferay.home}/logs" />
				<delete dir="${test.app.server.liferay.home}/osgi/state" />

				<delete file="${test.app.server.liferay.home}/portal-setup-wizard.properties" />
			</then>
		</if>
	</target>

	<target name="deploy-extra-apps">
		<var name="extra.apps.zip.file.name" value="${jenkins.shared.user.content.dir}/jobs/${top.level.job.name}/builds/${top.level.build.number}/downloads/extraapps.zip" />

		<if>
			<available file="${extra.apps.zip.file.name}" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-extra-apps">
					<property name="extra.apps.zip.file.name" value="${extra.apps.zip.file.name}" />
				</ant>
			</then>
		</if>
	</target>

	<target name="deploy-lcs-environment-token">
		<copy todir="${liferay.home}/data">
			<fileset dir="${selenium.output.dir}" includes="lcs-cluster-entry-token-*.txt" />
		</copy>
	</target>

	<target name="deploy-license-xml">
		<if>
			<matches pattern="http" string="${test.build.license.xml.zip.url}" />
			<then>
				<mkdir dir="${liferay.home}/deploy" />

				<mirrors-get
					dest="${liferay.home}/deploy/license.xml"
					src="${test.build.license.xml.zip.url}"
				/>
			</then>
		</if>
	</target>

	<target name="deploy-specified-plugins">

		<!--
		Deploy plugin files to the deploy directory.
		-->

		<get-testcase-property property.name="hook.plugins.includes" />

		<if>
			<isset property="hook.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="hooks" />
					<property name="plugins.includes" value="${hook.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="layouttpl.plugins.includes" />

		<if>
			<isset property="layouttpl.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="layouttpl" />
					<property name="plugins.includes" value="${layouttpl.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="portlet.plugins.includes" />

		<if>
			<isset property="portlet.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="portlets" />
					<property name="plugins.includes" value="${portlet.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<equals arg1="${test.pacl}" arg2="true" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="portlets" />
					<property name="plugins.includes" value="chat-portlet,flash-portlet,portal-compat-hook,sample-service-builder-portlet,test-pacl-portlet" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="theme.plugins.includes" />

		<if>
			<isset property="theme.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="themes" />
					<property name="plugins.includes" value="${theme.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="web.plugins.includes" />

		<if>
			<isset property="web.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="webs" />
					<property name="plugins.includes" value="${web.plugins.includes}" />
				</ant>
			</then>
		</if>
	</target>

	<target name="evaluate-logs">
		<if>
			<available file="portal-web/test-ant-scripts/log" />
			<then>
				<move file="portal-web/test-ant-scripts/log" todir="." />
			</then>
		</if>

		<if>
			<isset property="print.logs" />
			<then>
				<loadfile property="log.content" srcfile="log">
					<filterchain>
						<expandproperties />
					</filterchain>
				</loadfile>

				<echo>Displaying Logs:</echo>
				<echo></echo>
				<echo>${log.content}</echo>
			</then>
		</if>

		<get-test-method-name />

		<get-test-simple-class-name />

		<if>
			<isset property="test.evaluate.logs" />
			<then>
				<var name="test.class" unset="true" />

				<ant dir="portal-web" target="test-class">
					<property name="test.class" value="EvaluateLogTestSuite" />
				</ant>
			</then>
		</if>

		<if>
			<isset property="test.method.name" />
			<then>
				<property name="test.class" value="${test.simple.class.name}#${test.method.name}" />
			</then>
			<else>
				<property name="test.class" value="${test.simple.class.name}" />
			</else>
		</if>

		<if>
			<isset property="env.JENKINS_HOME" />
			<then>
				<antcall target="build-test-results-xml" />

				<if>
					<isset property="jenkins.shared.user.content.dir" />
					<then>
						<var name="jenkins.shared.results.dir" value="${jenkins.shared.user.content.dir}/jobs" />
					</then>
					<else>
						<var name="jenkins.shared.results.dir" value="." />
					</else>
				</if>

				<copy
					failonerror="false"
					file="portal-web/test-results/functional/TEST-com.liferay.portalweb.portal.evaluatelog.EvaluateLogTestSuite.xml"
					tofile="${jenkins.shared.results.dir}/${env.BUILD_FLOW_JOB_NAME}/builds/${env.BUILD_FLOW_BUILD_NUMBER}/test-results/TEST-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}_${test.class}_EvaluateLog.xml"
				/>
			</then>
		</if>

		<antcall target="clean-up-logs" />
	</target>

	<target name="generate-backup-results-xml">
		<if>
			<and>
				<isset property="env.JENKINS_HOME" />
				<isset property="jenkins.shared.user.content.dir" />
			</and>
			<then>
				<if>
					<contains string="${test.class}" substring="#" />
					<then>
						<get-test-class-name />

						<get-test-method-name />
					</then>
					<elseif>
						<isset property="test.class" />
						<then>
							<get-test-class-name />

							<property name="test.method.name" value="" />
						</then>
					</elseif>
				</if>

				<if>
					<isset property="group.index" />
					<then>
						<propertyregex
							input="${group.index}"
							override="true"
							property="group.index"
							regexp="[\w\.]+\.(\w+)"
							replace="\1"
						/>

						<property name="results.xml.file" value="portal-web/test-results/functional/TEST-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}_${testray.main.component.name}_${group.index}.xml" />
					</then>
					<elseif>
						<isset property="test.class" />
						<then>
							<property name="results.xml.file" value="portal-web/test-results/functional/TEST-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}_${test.class}.xml" />
						</then>
					</elseif>
					<else>
						<property name="results.xml.file" value="portal-web/test-results/functional/TEST-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}_${testray.main.component.name}.xml" />
					</else>
				</if>

				<if>
					<equals arg1="${build.status}" arg2="pass" />
					<then>
						<property name="testcase.element"><![CDATA[<testcase classname="${test.class.name}" name="${test.method.name}" time="0.00" />]]></property>
					</then>
					<else>
						<property name="testcase.element"><![CDATA[
							<testcase classname="${test.class.name}" name="${test.method.name}" time="0.00">
								<failure message="Jenkins failure prior to running test.">Jenkins failure prior to running test.</failure>
							</testcase>
						]]></property>
					</else>
				</if>

				<echo file="${results.xml.file}"><![CDATA[<?xml version="1.0"?>

<testsuite>
	${testcase.element}
	<system-out></system-out>
	<system-err></system-err>
</testsuite>]]></echo>

				<antcall target="build-test-results-xml" />

				<copy flatten="true" todir="${jenkins.shared.user.content.dir}/jobs/${env.BUILD_FLOW_JOB_NAME}/builds/${env.BUILD_FLOW_BUILD_NUMBER}/test-results">
					<fileset dir="modules" erroronmissingdir="false">
						<include name="**/TEST-*.xml" />
					</fileset>
					<fileset dir="portal-impl/test-results" erroronmissingdir="false">
						<include name="**/TEST-*.xml" />
					</fileset>
					<fileset dir="portal-service/test-results" erroronmissingdir="false">
						<include name="**/TEST-*.xml" />
					</fileset>
					<fileset dir="portal-web/test-results" erroronmissingdir="false">
						<include name="**/TEST-*.xml" />
					</fileset>
					<fileset dir="util-java/test-results" erroronmissingdir="false">
						<include name="**/TEST-*.xml" />
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="generate-changelog">
		<record-git-commit-plugins />
		<record-git-commit-portal />

		<tstamp>
			<format property="build.tstamp.value" pattern="EEEE, d MMMM yyyy, hh:mm aa" />
		</tstamp>

		<property
			name="changelog.dir"
			value="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
		/>

		<math
			datatype="int"
			operand1="${env.BUILD_NUMBER}"
			operand2="1"
			operation="-"
			result="previous.build.number"
		/>

		<property
			name="previous.changelog.dir"
			value="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${previous.build.number}"
		/>

		<if>
			<and>
				<available file="${previous.changelog.dir}/git-build-log.html" />
				<available file="${previous.changelog.dir}/git-commit-plugins" />
				<available file="${previous.changelog.dir}/git-commit-portal" />
			</and>
			<then>
				<loadfile
					property="previous.git.commit.plugins.rev.parse"
					srcfile="${previous.changelog.dir}/git-commit-plugins"
				/>

				<loadfile
					property="previous.git.commit.portal.rev.parse"
					srcfile="${previous.changelog.dir}/git-commit-portal"
				/>

				<copy
					file="${previous.changelog.dir}/git-build-log.html"
					tofile="${changelog.dir}/git-build-log.html"
				/>

				<if>
					<equals arg1="${git.commit.plugins.rev.parse}" arg2="${previous.git.commit.plugins.rev.parse}" />
					<then>
						<property
							name="git.log.content.plugins"
							value="No Changes"
						/>
					</then>
					<else>
						<execute dir="${lp.plugins.dir}">
							<![CDATA[git log --pretty=format:'<a href="https://github.com/liferay/liferay-plugins-ee/commit/'%H'" target="_blank">'%H'</a>''<br />'%an'<br />'%s'<br /><br />' ${previous.git.commit.plugins.rev.parse}...${git.commit.plugins.rev.parse} > ${changelog.dir}/git.log]]>
						</execute>

						<loadfile
							property="git.log.content.plugins"
							srcfile="${changelog.dir}/git.log"
						/>
					</else>
				</if>

				<if>
					<equals arg1="${git.commit.portal.rev.parse}" arg2="${previous.git.commit.portal.rev.parse}" />
					<then>
						<property
							name="git.log.content.portal"
							value="No Changes"
						/>
					</then>
					<else>
						<execute dir="${project.dir}">
							<![CDATA[git log --pretty=format:'<a href="https://github.com/liferay/liferay-portal-ee/commit/'%H'" target="_blank">'%H'</a>''<br />'%an'<br />'%s'<br /><br />' ${previous.git.commit.portal.rev.parse}...${git.commit.portal.rev.parse} > ${changelog.dir}/git.log]]>
						</execute>

						<loadfile
							property="git.log.content.portal"
							srcfile="${changelog.dir}/git.log"
						/>
					</else>
				</if>

				<replace file="${changelog.dir}/git-build-log.html">
					<replacetoken><![CDATA[<!-- NEXT -->]]></replacetoken>
					<replacevalue expandproperties="true"><![CDATA[<!-- NEXT -->

		<div id="updateWrapper">
			<div class="divider"></div>
			<div id="update">
				<h2>
					Build #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${build.tstamp.value}<br />
					Portal: ${git.commit.portal.rev.parse}<br />
					Plugins: ${git.commit.plugins.rev.parse}
				</h2>

				<div id="portal">
					<h4>
						Portal Git Log:
					</h4>
					<p>
						${git.log.content.portal}
					</p>
				</div>

				<div id="plugins">
					<h4>
						Plugins Git Log:
					</h4>
					<p>
						${git.log.content.plugins}
					</p>
				</div>
			</div>
		</div>
				]]></replacevalue>
				</replace>
			</then>
			<else>
				<echo file="${changelog.dir}/git-build-log.html"><![CDATA[<!DOCTYPE html>
<html>
	<head>
		<title>Git Build Log</title>
		<style>
			body {
				font-family: Helvetica, Arial, sans-serif;
				margin: 5%;
				padding: 0;
			}

			h2 {
				font-size: 17px;
				letter-spacing: 0.04em;
			}

			h4 {
				border-left: 1px solid #BABABA;
				color: #555;
				font-size: 20px;
				font-weight: 100;
				line-height: 30px;
				margin: 20px 20px 0;
				padding: 0 0 20px 10px;
			}

			p {
				font-size: 12px;
			}

			#updateWrapper:after {
				clear: both;
				content: "";
				display: table;
			}

			#update h2 {
				background-color: #4D9CD1;
				color: #FFF;
				padding: 15px;
			}

			.divider {
				background-color: #999;
				box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				-moz-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				-webkit-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				height: 1px;
				margin: 15px 0 25px;
				width: 100%;
			}

			#plugins {
				float: right;
			}

			#portal {
				float: left;
			}

			#plugins, #portal {
				width: 48%;
			}

			#plugins p, #portal p {
				border-radius: 8px;
				-moz-border-radius: 8px;
				-webkit-border-radius: 8px;
				box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				-moz-box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				-webkit-box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				margin-top: 0;
				padding: 10px;
				word-wrap: break-word;
			}

			#plugins a, #portal a {
				color: #3D7CA6;
				font-family: Monaco, "Liberation Mono", Courier, monospace;
				font-weight: bold;
				text-decoration: none;
			}

			#plugins a:hover, #portal a:hover {
				text-decoration: underline;
			}
		</style>
	</head>
	<body>

		<!-- NEXT -->

		<div id="updateWrapper">
			<div class="divider"></div>

			<br />

			<div id="update">
				<h2>
					Initial Commit<br />
					Build #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${build.tstamp.value}<br />
					Portal: ${git.commit.portal.rev.parse}<br />
					Plugins: ${git.commit.plugins.rev.parse}
				</h2>
			</div>
		</div>
	</body>
</html>
				]]></echo>
			</else>
		</if>

		<copy
			file="${changelog.dir}/git-build-log.html"
			todir="${basedir}"
		/>

		<copy
			file="${changelog.dir}/git-build-log.html"
			todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
		/>
	</target>

	<target name="kill-spi">
		<if>
			<os family="unix" />
			<then>
				<execute>
					kill -9 pgrep -n java
				</execute>
			</then>
			<else>
				<execute>
					taskkill.exe /F /FI "imagename eq java.exe" /FI "memusage lt 700000" /FI "memusage gt 600000"
				</execute>
			</else>
		</if>
	</target>

	<target name="merge-jenkins-test-results">
		<property name="jenkins.test.results.dir" value="${env.JENKINS_HOME}/userContent/jobs/${env.BUILD_FLOW_JOB_NAME}/builds/${env.BUILD_FLOW_BUILD_NUMBER}/test-results" />

		<property name="jenkins.results.xml.suite.file" value="${jenkins.test.results.dir}/test-suite/TESTS-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}.xml" />

		<first id="first">
			<fileset dir="${jenkins.test.results.dir}" includes="*.xml" />
		</first>

		<loadfile property="jenkins.results.xml.suite.file.header" srcfile="${toString:first}" />

		<propertyregex
			input="${jenkins.results.xml.suite.file.header}"
			override="true"
			property="jenkins.results.xml.suite.file.header"
			regexp="&lt;testcase[\s\S.]*"
			replace=""
		/>

		<propertyregex
			input="${jenkins.results.xml.suite.file.header}"
			override="true"
			property="jenkins.results.xml.suite.file.header"
			regexp="&lt;testsuite.*\n"
			replace="&lt;testsuite&gt;${line.separator}"
		/>

		<echo file="${jenkins.results.xml.suite.file}">${jenkins.results.xml.suite.file.header}</echo>

		<for param="jenkins.results.xml.file">
			<path>
				<fileset dir="${jenkins.test.results.dir}">
					<include name="*.xml" />
				</fileset>
			</path>
			<sequential>
				<echo>Merging @{jenkins.results.xml.file}.</echo>

				<var name="jenkins.results.xml.suite.file.body" unset="true" />

				<loadfile property="jenkins.results.xml.suite.file.body" srcfile="@{jenkins.results.xml.file}" />

				<propertyregex
					input="${jenkins.results.xml.suite.file.body}"
					override="true"
					property="jenkins.results.xml.suite.file.body"
					regexp="&lt;\?xml[\s\S]*?&lt;testcase"
					replace="&lt;testcase"
				/>

				<propertyregex
					input="${jenkins.results.xml.suite.file.body}"
					override="true"
					property="jenkins.results.xml.suite.file.body"
					regexp="&lt;/testcase&gt;[\s\S]*"
					replace="&lt;/testcase&gt;${line.separator}"
				/>

				<echo append="true" file="${jenkins.results.xml.suite.file}">${jenkins.results.xml.suite.file.body}</echo>
			</sequential>
		</for>

		<echo append="true" file="${jenkins.results.xml.suite.file}">&lt;/testsuite&gt;</echo>

		<if>
			<contains string="${env.JOB_NAME}" substring="frontend" />
			<then>
				<copy file="${jenkins.results.xml.suite.file}" tofile="${env.WORKSPACE}/TEST-ConsolidatedResults.xml" />
			</then>
		</if>

		<if>
			<isset property="jenkins.testray.results.dir" />
			<then>
				<copy file="${jenkins.results.xml.suite.file}" todir="${jenkins.testray.results.dir}" />
			</then>
		</if>
	</target>

	<target name="merge-test-results">
		<mkdir dir="test-results" />

		<junitreport todir="test-results">
			<fileset dir="modules" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="portal-impl/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="portal-service/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="portal-web/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="util-java/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<report format="frames" todir="test-results/html" />
		</junitreport>

		<replaceregexp
			file="test-results/TESTS-TestSuites.xml"
			flags="g"
			match="\s*\&lt;/?propert[^\n^\r]*[\n\r]"
			replace=""
		/>

		<echo message="A report with all the test results can be found at test-results/html/index.html." />
	</target>

	<target name="move-file">
		<fail message="Please set the property ${file}." unless="file" />
		<fail message="Please set the property ${tofile}." unless="tofile" />

		<if>
			<available file="${file}" />
			<then>
				<move file="${file}" tofile="${tofile}" />

				<echo message="Moved file ${file} to ${tofile}." />
			</then>
			<else>
				<echo message="File ${file} does not exist." />
			</else>
		</if>
	</target>

	<target name="prepare-extraapps-plugins">
		<fail message="Please set the property ${jenkins.shared.user.content.dir}." unless="jenkins.shared.user.content.dir" />
		<fail message="Please set the property ${test.build.extraapps.zip.url}." unless="test.build.extraapps.zip.url" />
		<fail message="Please set the property ${top.level.build.number}." unless="top.level.build.number" />
		<fail message="Please set the property ${top.level.job.name}." unless="top.level.job.name" />

		<mirrors-get dest="extraapps.zip" src="${test.build.extraapps.zip.url}" />

		<move file="extraapps.zip" todir="${jenkins.shared.user.content.dir}/jobs/${top.level.job.name}/builds/${top.level.build.number}/downloads" />
	</target>

	<target name="prepare-lcs-gateway-bundle">
		<ant antfile="build-dist.xml" inheritAll="false" target="unzip-tomcat">
			<property name="app.server.parent.dir" value="${app.server.parent.dir}/gateway" />
		</ant>

		<replaceregexp
			file="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/conf/server.xml"
			flags="g"
			match="=&quot;8(\d\d\d)&quot;"
			replace="=&quot;7\1&quot;"
		/>

		<copy
			file="${project.dir}/lib/portal/log4j.jar"
			tofile="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/lib/log4j.jar"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/gateway/plugins/webs/osb-lcs-gateway-web/docroot/WEB-INF/src/gateway-ext.properties"
			tofile="${lp.plugins.dir}/webs/osb-lcs-gateway-web/docroot/WEB-INF/src/gateway-ext.properties"
		/>

		<delete dir="${lp.plugins.dir}/dist" failonerror="false" />

		<property file="${lfrsite-lcs.dir}/jenkins/build.development.properties" />

		<ant dir="${lp.plugins.dir}" inheritAll="false" target="clean" />

		<ant dir="${lp.plugins.dir}" target="war" >
			<property name="plugins.includes" value="${plugins.includes.gateway}" />
		</ant>

		<copy todir="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/webapps">
			<fileset dir="${lp.plugins.dir}/dist" />
		</copy>
	</target>

	<target name="prepare-lcs-portal-bundle">
		<antcall target="prepare-portal-ext-properties" />

		<antcall inheritAll="false" target="rebuild-database" />

		<loadfile property="lcs.portal.bundle.properties" srcFile="${lfrsite-lcs.dir}/jenkins/development/portal/artifacts/liferay/portal-ext.properties" />

		<echo append="true" file="${app.server.classes.portal.dir}/portal-ext.properties">

${lcs.portal.bundle.properties}</echo>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/artifacts/liferay/portal-log4j-ext.xml"
			tofile="${app.server.classes.global.dir}/portal-log4j-ext.xml"
		/>

		<replace file="${app.server.bin.dir}/setenv${file.suffix.bat}">
			<replacetoken><![CDATA[-Djava.net.preferIPv4Stack=true]]></replacetoken>
			<replacevalue><![CDATA[-Djava.net.preferIPv4Stack=true -Dportal:ldap.auth.search.filter=\"(&(mail=@email_address@)(member=cn=Liferay\5C, Inc.,ou=Organizations,ou=liferay.com,o=Liferay))\" -Dportal:ldap.import.user.search.filter=\"(&(objectClass=inetOrgPerson)(member=cn=Liferay\5C, Inc.,ou=Organizations,ou=liferay.com,o=Liferay))\"]]></replacevalue>
		</replace>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
			tofile="${lp.plugins.dir}/portlets/lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
			tofile="${lp.plugins.dir}/portlets/lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/osb-lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
			tofile="${lp.plugins.dir}/portlets/osb-lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/osb-lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
			tofile="${lp.plugins.dir}/portlets/osb-lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/webs/file-repository-web/docroot/WEB-INF/web.xml"
			tofile="${lp.plugins.dir}/webs/file-repository-web/docroot/WEB-INF/web.xml"
		/>

		<property file="${lfrsite-lcs.dir}/jenkins/build.development.properties" />

		<ant dir="${lp.plugins.dir}" target="clean" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
			<property name="plugins.includes" value="${plugins.includes.portal}" />
		</ant>
	</target>

	<target name="prepare-lcs-portlet-bundle">
		<chmod perm="a+x">
			<fileset dir="${app.server.parent.dir}/patching-tool">
				<include name="*.sh" />
			</fileset>
		</chmod>

		<execute dir="${app.server.parent.dir}/patching-tool">
			patching-tool${file.suffix.bat} auto-discovery
			patching-tool${file.suffix.bat} setup
		</execute>

		<replace file="${app.server.dir}/bin/setenv${file.suffix.bat}">
			<replacetoken><![CDATA[-XX:MaxPermSize=256m]]></replacetoken>
			<replacevalue><![CDATA[-XX:MaxPermSize=256m -javaagent:../../patching-tool/lib/patching-tool-agent.jar]]></replacevalue>
		</replace>

		<echo file="${lp.plugins.dir}/portlets/lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties">#QA AWS

osb.lcs.gateway.web.host.name=${osb.lcs.gateway.web.host.name}
osb.lcs.gateway.web.host.port=${osb.lcs.gateway.web.host.port}

osb.lcs.portlet.host.name=${osb.lcs.portlet.host.name}
osb.lcs.portlet.host.port=${osb.lcs.portlet.host.port}

osb.lcs.portlet.oauth.consumer.key=${osb.lcs.portlet.oauth.consumer.key}
osb.lcs.portlet.oauth.consumer.secret=${osb.lcs.portlet.oauth.consumer.secret}</echo>

		<property name="plugins.includes" value="lcs-portlet" />

		<ant dir="${lp.plugins.dir}" target="clean" />

		<ant dir="${lp.plugins.dir}" target="compile" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins" />
	</target>

	<target name="prepare-lcs-processor-bundle">
		<ant antfile="build-dist.xml" inheritAll="false" target="unzip-tomcat">
			<property name="app.server.parent.dir" value="${app.server.parent.dir}/processor" />
		</ant>

		<replaceregexp
			file="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/conf/server.xml"
			flags="g"
			match="=&quot;8(\d\d\d)&quot;"
			replace="=&quot;9\1&quot;"
		/>

		<copy
			file="${project.dir}/lib/portal/log4j.jar"
			tofile="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/lib/log4j.jar"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/processor/plugins/webs/osb-lcs-processor-web/docroot/WEB-INF/src/processor-ext.properties"
			tofile="${lp.plugins.dir}/webs/osb-lcs-processor-web/docroot/WEB-INF/src/processor-ext.properties"
		/>

		<delete dir="${lp.plugins.dir}/dist" failonerror="false" />

		<property file="${lfrsite-lcs.dir}/jenkins/build.development.properties" />

		<ant dir="${lp.plugins.dir}" inheritAll="false" target="clean" />

		<ant dir="${lp.plugins.dir}" target="war">
			<property name="plugins.includes" value="${plugins.includes.processor}" />
		</ant>

		<copy todir="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/webapps">
			<fileset dir="${lp.plugins.dir}/dist" />
		</copy>
	</target>

	<target name="prepare-portal-ext-properties">
		<prepare-fix-pack-bundle />

		<get-database-property property.name="database.driver" />
		<get-database-property property.name="database.password" />
		<get-database-property property.name="database.url" />
		<get-database-property property.name="database.username" />

		<echo file="portal-impl/src/portal-ext.properties">liferay.home=${liferay.home}

plugin.notifications.enabled=false

jdbc.default.jndi.name=

jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}

captcha.max.challenges=-1

browser.launcher.url=

index.on.startup=true

setup.wizard.enabled=false

mail.session.jndi.name=

axis.servlet.hosts.allowed=

tunnel.servlet.hosts.allowed=</echo>

		<get-testcase-property property.name="cluster.enabled" />

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

cluster.link.enabled=true

cluster.link.channel.system.properties=\
	#
	# Common
	#
	\
	jgroups.bind_addr:${cluster.link.bind.addr["cluster-link-udp"]},\
	jgroups.bind_interface:127.0.0.1,\
	\
	#
	# Multicast
	#
	\
	jgroups.mping.mcast_addr:${multicast.group.address["cluster-link-mping"]},\
	jgroups.mping.mcast_port:${multicast.group.port["cluster-link-mping"]},\
	jgroups.mping.ip_ttl:8

web.server.display.node=true</echo>
			</then>
		</if>

		<if>
			<equals arg1="${database.type}" arg2="db2" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

hibernate.dialect=com.liferay.portal.dao.orm.hibernate.DB2Dialect
custom.sql.function.isnull=CAST(? AS VARCHAR(32672)) IS NULL
custom.sql.function.isnotnull=CAST(? AS VARCHAR(32672)) IS NOT NULL</echo>
			</then>
			<elseif>
				<equals arg1="${database.type}" arg2="sybase" />
				<then>
					<echo file="portal-impl/src/portal-ext.properties" append="true">

hibernate.dialect=org.hibernate.dialect.SybaseDialect
custom.sql.function.isnull=CONVERT(VARCHAR,?) IS NULL
custom.sql.function.isnotnull=CONVERT(VARCHAR,?) IS NOT NULL</echo>
				</then>
			</elseif>
		</if>

		<get-testcase-property property.name="custom.properties" />

		<if>
			<isset property="custom.properties" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

${custom.properties}</echo>
			</then>
		</if>

		<get-testcase-property property.name="database.jndi.enabled" />

		<if>
			<equals arg1="${database.jndi.enabled}" arg2="true" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties">
					<replacetoken>jdbc.default.jndi.name=</replacetoken>
					<replacevalue>jdbc.default.jndi.name=jdbc/LiferayPool</replacevalue>
				</replace>
			</then>
		</if>

		<if>
			<equals arg1="${java.security}" arg2="true" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

portal.security.manager.strategy=liferay</echo>
			</then>
		</if>

		<if>
			<equals arg1="${javascript.fast.load}" arg2="false" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

javascript.fast.load=false</echo>
			</then>
		</if>

		<get-testcase-property property.name="mobile.device.enabled" />

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<get-ip-address />

				<echo file="portal-impl/src/portal-ext.properties" append="true">

virtual.hosts.valid.hosts=localhost,127.0.0.1,${ip.address}</echo>
			</then>
		</if>

		<get-testcase-property property.name="portal.version" />

		<propertyregex
			input="${portal.version}"
			property="portal.major.version"
			regexp="(\d+\.\d+)\.\d+"
			select="\1"
		/>

		<if>
			<equals arg1="${portal.major.version}" arg2="5.1" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-5.1.properties
##

theme.portlet.sharing.default=true

organizations.country.required[regular]=true
organizations.assignment.auto=true
organizations.assignment.strict=false
organizations.membership.strict=true

lucene.dir=$${liferay.home}/lucene/

jcr.jackrabbit.repository.root=$${liferay.home}/jackrabbit

dl.hook.impl=com.liferay.documentlibrary.util.JCRHook

dl.hook.file.system.root.dir=$${liferay.home}/document_library</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-5.2.properties
##

users.image.max.height=0
users.image.max.width=0

locale.prepend.friendly.url.style=0

auth.token.check.enabled=false

#permissions.user.check.algorithm=5
#permissions.view.dynamic.inheritance=false

image.hook.impl=com.liferay.portal.image.DatabaseHook

cdn.host.http=$${cdn.host}
cdn.host.https=$${cdn.host}

virtual.hosts.default.community.name=

breadcrumb.show.guest.group=false
breadcrumb.show.parent.groups=false

wiki.page.titles.regexp=([^/\\\\\\[\\]%&amp;?@]+)
wiki.page.titles.remove.regexp=([/\\\\\\[\\]%&amp;?@]+)</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-6.0.properties
##

users.last.name.required=true

portal.security.manager.strategy=liferay

layout.types=portlet,panel,embedded,article,url,link_to_layout

editor.wysiwyg.portal-web.docroot.html.portlet.message_boards.edit_message.bb_code.jsp=bbcode

setup.wizard.enabled=false

discussion.subscribe.by.default=false

#dl.store.cmis.credentials.username=${dl.hook.cmis.credentials.username}
#dl.store.cmis.credentials.password=${dl.hook.cmis.credentials.password}
#dl.store.cmis.repository.url=${dl.hook.cmis.repository.url}
#dl.store.cmis.system.root.dir=${dl.hook.cmis.system.root.dir}

dl.store.file.system.root.dir=${liferay.home}/data/document_library

dl.store.jcr.fetch.delay=500
dl.store.jcr.fetch.max.failures=5
dl.store.jcr.move.version.labels=false

dl.store.s3.access.key=
dl.store.s3.secret.key=
dl.store.s3.bucket.name=

message.boards.subscribe.by.default=false</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
				<equals arg1="${portal.major.version}" arg2="6.1" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-6.1.properties
##

hibernate.cache.use_query_cache=true
hibernate.cache.use_second_level_cache=true

locale.prepend.friendly.url.style=1

passwords.encryption.algorithm.legacy=SHA

mobile.device.styling.wap.enabled=true

dl.char.blacklist=\\\\,//,:,*,?,\",&lt;,&gt;,|,[,],../,/..

dl.char.last.blacklist=

dl.name.blacklist=

journal.articles.search.with.index=false</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
				<equals arg1="${portal.major.version}" arg2="6.1" />
				<equals arg1="${portal.major.version}" arg2="6.2" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-6.2.properties
##

users.image.check.token=false</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-6.1.0.27" />
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-7.0.0.7" />
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-8.0.0.0" />
			</or>
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="liferay.home=${liferay.home}"
					value="liferay.home=C:/WINDOWS/system32/config/systemprofile/liferay"
				/>

				<echo file="portal-impl/src/portal-ext.properties" append="true">

auto.deploy.dest.dir=C:/WINDOWS/system32/config/systemprofile/liferay/websphere-deploy</echo>
			</then>
		</if>

		<get-testcase-property property.name="captcha.max.challenges" />

		<if>
			<isset property="captcha.max.challenges" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="captcha.max.challenges=-1" value="captcha.max.challenges=${captcha.max.challenges}" />
			</then>
		</if>

		<if>
			<isset property="set.permission.algorithm.5" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="#permissions.user.check.algorithm=5" value="permissions.user.check.algorithm=5" />
				<replace file="portal-impl/src/portal-ext.properties" token="#permissions.view.dynamic.inheritance=false" value="permissions.view.dynamic.inheritance=false" />
			</then>
		</if>

		<if>
			<isset property="set.permission.algorithm.6" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="permissions.user.check.algorithm=5" value="" />
				<replace file="portal-impl/src/portal-ext.properties" token="permissions.view.dynamic.inheritance=false" value="" />
			</then>
		</if>

		<get-testcase-property property.name="setup.wizard.enabled" />

		<if>
			<equals arg1="${setup.wizard.enabled}" arg2="true" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="setup.wizard.enabled=false" value="" />

				<echo append="true" file="portal-impl/src/portal-ext.properties">

include-and-override=${liferay.home}/portal-setup-wizard.properties</echo>
			</then>
		</if>

		<echo file="portal-impl/src/portal-ext.properties" append="true">

hot.deploy.dependency.management.enabled=false</echo>

		<if>
			<isset property="test.set.default.portal.properties" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties">liferay.home=${liferay.home}</echo>
			</then>
		</if>

		<if>
			<contains string="${app.server.portal.dir}" substring="liferay-portal.war" />
			<then>
				<property name="test.build.liferay.portal.zip.file.name" value="${app.server.portal.dir}" />
			</then>
			<elseif>
				<equals arg1="${app.server.type}" arg2="glassfish" />
				<then>
					<property name="test.build.liferay.portal.zip.file.name" value="${app.server.glassfish.portal.war.dir}" />
				</then>
			</elseif>
			<elseif>
				<equals arg1="${tcat.enabled}" arg2="true" />
				<then>
					<property name="test.build.liferay.portal.zip.file.name" value="${app.server.tcat.admin.dir}/tcat_init/webapps/${lp.version.dtd}/ROOT.war" />
				</then>
			</elseif>
		</if>

		<if>
			<isset property="test.build.liferay.portal.zip.file.name" />
			<then>
				<tstamp>
					<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
				</tstamp>

				<mkdir dir="${tstamp.value}" />

				<unzip
					dest="${tstamp.value}"
					src="${test.build.liferay.portal.zip.file.name}"
				/>

				<copy
					file="portal-impl/src/portal-ext.properties"
					tofile="${tstamp.value}/WEB-INF/classes/portal-ext.properties"
				/>

				<echo append="true" file="${tstamp.value}/WEB-INF/classes/portal-ext.properties">

module.framework.properties.osgi.console=11312</echo>

				<zip
					basedir="${tstamp.value}"
					destfile="${test.build.liferay.portal.zip.file.name}"
					update="yes"
				/>

				<delete dir="${tstamp.value}" />
			</then>
			<else>
				<copy
					file="portal-impl/src/portal-ext.properties"
					tofile="${app.server.classes.portal.dir}/portal-ext.properties"
				/>

				<echo append="true" file="${app.server.classes.portal.dir}/portal-ext.properties">

module.framework.properties.osgi.console=11312</echo>
			</else>
		</if>
	</target>

	<target name="prepare-portal-properties">
		<execute>
			<![CDATA[git checkout -- portal-impl/src/portal.properties]]>
		</execute>

		<replace file="portal-impl/src/portal.properties">
			<replacefilter
				token="#upgrade.processes="
				value="upgrade.processes="
			/>
			<replacefilter
				token="#com.liferay.portal.upgrade.UpgradeProcess_"
				value="com.liferay.portal.upgrade.UpgradeProcess_"
			/>
			<replacefilter
				token="verify.frequency=0"
				value="verify.frequency=1"
			/>
		</replace>
	</target>

	<target name="prepare-selenium">
		<delete file="portal-web/test/test-portal-web-ext.properties" />

		<antcall target="prepare-selenium-app-server-properties" />
		<antcall target="prepare-selenium-browser-properties" />
		<antcall target="prepare-selenium-database-properties" />
		<antcall target="prepare-selenium-email-properties" />
		<antcall target="prepare-selenium-required-properties" />
		<antcall target="prepare-selenium-testcase-properties" />

		<if>
			<isset property="legacy.theme.ids" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					theme.ids=${legacy.theme.ids}
				</echo>
			</then>
		</if>

		<if>
			<isset property="liferay.portal.branch" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					liferay.portal.branch=${liferay.portal.branch}
				</echo>
			</then>
		</if>

		<if>
			<isset property="liferay.portal.bundle" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					liferay.portal.bundle=${liferay.portal.bundle}
				</echo>
			</then>
		</if>

		<if>
			<isset property="mobile.android.home" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					mobile.android.home=${mobile.android.home}
				</echo>
			</then>
		</if>

		<if>
			<isset property="osb.lcs.portlet.host.name" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					osb.lcs.portlet.host.name=${osb.lcs.portlet.host.name}
				</echo>
			</then>
		</if>

		<if>
			<isset property="selenium.output.dir" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					output.dir=${selenium.output.dir}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${tcat.enabled}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					tcat.admin.repository=${app.server.tcat.admin.dir}/tcat_init/webapps/${lp.version.dtd}
					tcat.enabled=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${tear.down.before.test}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					tear.down.before.test=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.assert.liferay.errors}" arg2="false" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.assert.liferay.errors=false
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.basedir" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.basedir=${test.basedir}
				</echo>
			</then>
			<else>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.basedir=${basedir.unix}/portal-web
				</echo>
			</else>
		</if>

		<if>
			<contains string="${test.class}" substring="#" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					testing.class.method=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.save.screenshot}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					save.screenshot=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.selenium.implementation}" arg2="selenium" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					selenium.implementation=com.thoughtworks.selenium.Selenium
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.selenium.logger.enabled}" arg2="false" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					selenium.logger.enabled=false
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.skip.tear.down}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.skip.tear.down=true
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-app-server-properties">
		<if>
			<isset property="app.server.type" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					app.server.type=${app.server.type}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-browser-properties">
		<if>
			<equals arg1="${browser.type}" arg2="firefox" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					browser.type=*chrome
				</echo>
			</then>
			<elseif>
				<equals arg1="${browser.type}" arg2="googlechrome" />
				<then>
					<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
						browser.type=*googlechrome
					</echo>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${browser.type}" arg2="ie" />
				<then>
					<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
						browser.type=*iehta
					</echo>
				</then>
			</elseif>
		</if>
	</target>

	<target name="prepare-selenium-database-properties">
		<if>
			<isset property="database.db2.driver" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.db2.driver=${database.db2.driver}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.db2.password" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.db2.password=${database.db2.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.db2.url" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.db2.url=${database.db2.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.db2.username" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.db2.username=${database.db2.username}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.hsql.driver" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.hsql.driver=${database.hsql.driver}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.hsql.password" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.hsql.password=${database.hsql.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.hsql.url" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.hsql.url=${database.hsql.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.hsql.username" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.hsql.username=${database.hsql.username}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.mysql.driver" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.mysql.driver=${database.mysql.driver}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.mysql.password" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.mysql.password=${database.mysql.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.mysql.url" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.mysql.url=${database.mysql.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.mysql.username" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.mysql.username=${database.mysql.username}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.oracle.driver" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.oracle.driver=${database.oracle.driver}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.oracle.password" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.oracle.password=${database.oracle.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.oracle.url" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.oracle.url=${database.oracle.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.oracle.username" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.oracle.username=${database.oracle.username}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.postgresql.driver" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.postgresql.driver=${database.postgresql.driver}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.postgresql.password" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.postgresql.password=${database.postgresql.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.postgresql.url" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.postgresql.url=${database.postgresql.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.postgresql.username" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.postgresql.username=${database.postgresql.username}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.sybase.driver" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.sybase.driver=${database.sybase.driver}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.sybase.password" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.sybase.password=${database.sybase.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.sybase.url" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.sybase.url=${database.sybase.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.sybase.username" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.sybase.username=${database.sybase.username}
				</echo>
			</then>
		</if>

		<if>
			<isset property="database.type" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					database.type=${database.type}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-email-properties">
		<if>
			<isset property="email.address.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.1=${email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.2=${email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.3=${email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.4" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.4=${email.address.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.5" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.5=${email.address.5}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.1=${email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.2=${email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.3=${email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.4" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.4=${email.password.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.5" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.5=${email.password.5}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.address.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.address.1=${lcs.email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.address.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.address.2=${lcs.email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.address.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.address.3=${lcs.email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.id.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.id.1=${lcs.email.id.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.id.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.id.2=${lcs.email.id.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.id.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.id.3=${lcs.email.id.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.password.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.password.1=${lcs.email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.password.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.password.2=${lcs.email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.password.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					lcs.email.password.3=${lcs.email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.address.1=${marketplace.email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.address.2=${marketplace.email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.address.3=${marketplace.email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.4" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.address.4=${marketplace.email.address.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.5" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.address.5=${marketplace.email.address.5}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.password.1=${marketplace.email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.password.2=${marketplace.email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.password.3=${marketplace.email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.4" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.password.4=${marketplace.email.password.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.5" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					marketplace.email.password.5=${marketplace.email.password.5}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-required-properties">
		<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
			selenium.executable.dir=${basedir.unix}/tools/selenium/
		</echo>

		<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
			test.class.command.name=${test.class}
		</echo>

		<get-test-url />

		<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
			portal.url=${test.url}
		</echo>
	</target>

	<target name="prepare-selenium-testcase-properties">
		<get-testcase-property property.name="ignore.errors" />

		<if>
			<isset property="ignore.errors" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					ignore.errors=${ignore.errors}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="ignore.errors.delimiter" />

		<if>
			<isset property="ignore.errors.delimiter" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					ignore.errors.delimiter=${ignore.errors.delimiter}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="mobile.device.enabled" />

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					mobile.device.enabled=${mobile.device.enabled}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="sharepoint.enabled" />

		<if>
			<equals arg1="${sharepoint.enabled}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					sharepoint.vm.host.name=${sharepoint.vm.host.name}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="test.assert.javascript.errors" />

		<if>
			<equals arg1="${test.assert.javascript.errors}" arg2="false" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.assert.javascript.errors=false
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="timeout.explicit.wait" />

		<if>
			<isset property="timeout.explicit.wait" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					timeout.explicit.wait=${timeout.explicit.wait}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-so-plugins">
		<set-tomcat-version-number liferay.portal.bundle="${liferay.portal.bundle}" />

		<property file="${lp.plugins.dir}/portlets/so-portlet/docroot/WEB-INF/liferay-releng.properties" />

		<property name="plugins.includes" value="so-portlet,${dependent-apps}" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins" />
	</target>

	<target name="prepare-system-ext-properties">
		<echo file="${app.server.classes.portal.dir}/system-ext.properties">log.sanitizer.enabled=false</echo>
	</target>

	<target name="prepare-test-build">
		<record-git-commit-portal />

		<antcall target="compile" inheritAll="false" />

		<if>
			<matches pattern="http" string="${test.build.bundle.glassfish.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.type" value="glassfish" />
					<param name="test.app.server.bin.dir" value="${app.server.glassfish.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.glassfish.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.glassfish}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-glassfish" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.jboss.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.type" value="jboss" />
					<param name="test.app.server.bin.dir" value="${app.server.jboss.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.jboss.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jboss}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jboss" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<equals arg1="${test.build.bundle.jbosseap6.0}" arg2="true" />
			<then>
				<ant antfile="build-dist.xml" target="build-dist-jboss-eap-6.0" inheritAll="false" />
			</then>
		</if>

		<if>
			<and>
				<equals arg1="${test.build.bundle.jbosseap6.1}" arg2="true" />
				<matches pattern="http" string="${test.build.portal.war.url}" />
			</and>
			<then>
				<app-server-properties-update>
					app.server.type=jboss
					app.server.jboss.version=6.1.0
					app.server.jboss.dir=${app.server.parent.dir}/jboss-eap-6.1
					app.server.jboss.zip.name=jboss-eap-6.1.0.zip
					app.server.jboss.zip.url=http://www.jboss.org/jbossas/downloads/jboss-eap-6.1.0.zip
				</app-server-properties-update>

				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.lib.global.dir" value="${app.server.parent.dir}/jboss-eap-6.1/modules/com/liferay/portal/main" />
					<param name="app.server.portal.dir" value="${app.server.parent.dir}/jboss-eap-6.1/standalone/deployments/ROOT.war" />
					<param name="app.server.type" value="jboss" />
				</antcall>

				<app-server-properties-reset />
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jbosseap6.1}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jboss-eap-6.1" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.jetty.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.type" value="jetty" />
					<param name="test.app.server.bin.dir" value="${app.server.jetty.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.jetty.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jetty}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jetty" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.jonas.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.type" value="jonas" />
					<param name="test.app.server.bin.dir" value="${app.server.jonas.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.jonas.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jonas}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jonas" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.resin.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.type" value="resin" />
					<param name="test.app.server.bin.dir" value="${app.server.resin.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.resin.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.resin}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-resin" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<and>
				<equals arg1="${test.build.bundle.tcserver}" arg2="true" />
				<matches pattern="http" string="${test.build.portal.war.url}" />
			</and>
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.lib.global.dir" value="${app.server.tcserver.lib.global.dir}" />
					<param name="app.server.portal.dir" value="${app.server.tcserver.portal.dir}" />
					<param name="app.server.type" value="tcserver" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.tcserver}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-tcserver" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.tomcat.zip.url}" />
			<then>
				<set-tomcat-version-number liferay.portal.bundle="${liferay.portal.bundle}" />

				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.type" value="tomcat" />
					<param name="test.app.server.bin.dir" value="${app.server.tomcat.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.tomcat.zip.url}" />
				</antcall>
			</then>
			<else>
				<ant antfile="build-dist.xml" target="build-dist-tomcat" inheritAll="false" />

				<setup-testable-tomcat />

				<antcall target="prepare-portal-ext-properties" />

				<antcall target="prepare-system-ext-properties" />
			</else>
		</if>

		<replace file="${app.server.tomcat.bin.dir}/setenv${file.suffix.bat}">
			<replacetoken><![CDATA[-Xmx1024m -XX:MaxPermSize=256m]]></replacetoken>
			<replacevalue><![CDATA[-verbose:gc -Xloggc:/tmp/tomcat-gc.log -Xms512m -Xmx512m -XX:MaxNewSize=32m -XX:MaxPermSize=200m -XX:MaxTenuringThreshold=0 -XX:NewSize=32m -XX:ParallelGCThreads=2 -XX:PermSize=200m -XX:+PrintGCCause -XX:+PrintGCDetails -XX:SurvivorRatio=65536 -XX:TargetSurvivorRatio=0 -XX:+UseParNewGC]]></replacevalue>
		</replace>

		<antcall target="prepare-test-build-tomcat-dependents" inheritAll="false" />

		<if>
			<and>
				<equals arg1="${test.build.bundle.weblogic}" arg2="true" />
				<matches pattern="http" string="${test.build.portal.war.url}" />
			</and>
			<then>
				<antcall target="prepare-test-bundle" inheritAll="false">
					<param name="app.server.lib.global.dir" value="${app.server.weblogic.lib.global.dir}" />
					<param name="app.server.portal.dir" value="${app.server.weblogic.portal.dir}" />
					<param name="app.server.type" value="weblogic" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.weblogic}" arg2="true" />
				<then>
					<app-server-properties-update>
						app.server.type=weblogic
					</app-server-properties-update>

					<ant antfile="build-dist.xml" target="unzip-weblogic" inheritAll="false" />

					<antcall target="deploy" inheritAll="false" />

					<app-server-properties-reset />
				</then>
			</elseif>
		</if>

		<antcall target="deploy-license-xml" />

		<if>
			<matches pattern="http" string="${test.build.plugins.war.zip.url}" />
			<then>
				<mirrors-get
					dest="plugins.war.zip"
					src="${test.build.plugins.war.zip.url}"
				/>

				<unzip
					dest="."
					src="plugins.war.zip"
				/>

				<delete file="plugins.war.zip" />
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${test.build.unit}" arg2="true" />
			</not>
			<then>
				<if>
					<equals arg1="${test.poshi.runner.enabled}" arg2="true" />
					<then>
						<antcall target="record-test-generated-properties" />
					</then>
					<else>
						<ant dir="portal-impl" target="build-selenium-block" inheritAll="false" />
					</else>
				</if>
			</then>
		</if>

		<antcall target="compile-test" inheritAll="false" />

		<record-test-class-file-names />

		<antcall target="record-test-plugin-names" inheritAll="false" />

		<echo if:set="env.JENKINS_HOME">
ANT_OPTS=${env.ANT_OPTS}</echo>

		<antcall if:set="env.JENKINS_HOME" target="clean-up-java-processes" inheritAll="false" />
	</target>

	<target name="prepare-test-build-tomcat-dependents">
		<if>
			<equals arg1="${test.build.bundle.tcat}" arg2="true" />
			<then>
				<echo file="${lp.plugins.dir}/build.${user.name}.properties">app.server.tomcat.dir=${app.server.parent.dir}/tomcat-7.0.39

plugins.includes=marketplace-portlet</echo>

				<if>
					<matches pattern="http" string="${test.build.portal.war.url}" />
					<then>
						<mkdir dir="dist" />

						<mirrors-get
							dest="dist/liferay-portal-${lp.version}.war"
							src="${test.build.portal.war.url}"
						/>
					</then>
					<else>
						<ant antfile="build-dist.xml" target="zip-portal-war" inheritAll="false" />
					</else>
				</if>

				<ant antfile="build-dist.xml" target="build-dist-tcat" inheritAll="false" />

				<delete dir="dist" />

				<delete file="${lp.plugins.dir}/build.${user.name}.properties" />
			</then>
		</if>
	</target>

	<target name="prepare-test-bundle">
		<if>
			<matches pattern="http" string="${test.build.bundle.zip.url}" />
			<then>
				<mkdir dir="${app.server.parent.dir}" />

				<tstamp>
					<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
				</tstamp>

				<mirrors-get
					dest="${tstamp.value}.zip"
					src="${test.build.bundle.zip.url}"
				/>

				<unzip
					dest="${app.server.parent.dir}"
					src="${tstamp.value}.zip"
				>
					<patternset
						includes="liferay-portal-*/${app.server.type}-*/**"
					/>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>

				<unzip
					dest="${app.server.parent.dir}"
					src="${tstamp.value}.zip"
				>
					<patternset
						includes="liferay-portal-*/patching-tool/patches/**"
					/>
					<mapper
						from="[^/]+/(.*)"
						to="${app.server.dir}//\1"
						type="regexp"
					/>
				</unzip>

				<delete file="${tstamp.value}.zip" />

				<chmod perm="a+x">
					<fileset dir="${test.app.server.bin.dir}">
						<include name="*.sh" />
					</fileset>
				</chmod>

				<if>
					<equals arg1="${app.server.type}" arg2="jboss" />
					<then>
						<replace file="${app.server.jboss.lib.global.dir}/module.xml">
							<replacetoken><![CDATA[<resource-root path="jtds.jar" />]]></replacetoken>
							<replacevalue>
								<![CDATA[
									<resource-root path="jtds.jar" />
									<resource-root path="mysql.jar" />
								]]>
							</replacevalue>
						</replace>
					</then>
				</if>

				<prepare-fix-pack-bundle />
			</then>
			<else>
				<if>
					<and>
						<equals arg1="${app.server.jboss.version}" arg2="6.1.0" />
						<equals arg1="${app.server.type}" arg2="jboss" />
					</and>
					<then>
						<ant antfile="build-dist.xml" target="unzip-jboss" inheritAll="false" />
					</then>
					<elseif>
						<equals arg1="${app.server.type}" arg2="tcserver" />
						<then>
							<ant antfile="build-dist.xml" target="unzip-tcserver" inheritAll="false" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${app.server.type}" arg2="weblogic" />
						<then>
							<ant antfile="build-dist.xml" target="unzip-weblogic" inheritAll="false" />
						</then>
					</elseif>
				</if>

				<mkdir dir="dist" />

				<mirrors-get
					dest="dist/liferay-portal-${lp.version}.war"
					src="${test.build.portal.war.url}"
				/>

				<unzip
					dest="${app.server.portal.dir}"
					src="dist/liferay-portal-${lp.version}.war"
				/>

				<delete dir="dist" />

				<ant antfile="build.xml" target="deploy-additional-jars" inheritAll="false" />

				<ant antfile="build.xml" target="update-app-server-scripts" inheritAll="false" />

				<mirrors-get
					dest="liferay-portal-dependencies.zip"
					src="${test.build.portal.dependencies.zip.url}"
				/>

				<unzip
					dest="${app.server.lib.global.dir}"
					src="liferay-portal-dependencies.zip"
				>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>

				<delete file="liferay-portal-dependencies.zip" />
			</else>
		</if>
	</target>

	<target name="prepare-virtual-host-name-properties">
		<if>
			<isset property="virtual.host.name" />
			<then>
				<echo file="portal-web/test/test-portal-impl-ext.properties" append="true">
					portal.url=www.${virtual.host.name}.com:8080
				</echo>

				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					portal.url=www.${virtual.host.name}.com:8080
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-virtual-network-interface">
		<echo file="portal-impl/src/portal-ext.properties" append="true">

cluster.link.channel.system.properties=\
	#
	# Common
	#
	\
	jgroups.bind_addr:${cluster.link.bind.addr["cluster-link-udp"]},\
	jgroups.bind_interface:eth0:0,\
	\
	#
	# Multicast
	#
	\
	jgroups.mping.mcast_addr:${multicast.group.address["cluster-link-mping"]},\
	jgroups.mping.mcast_port:${multicast.group.port["cluster-link-mping"]},\
	jgroups.mping.ip_ttl:8

cluster.link.autodetect.address=

cluster.link.bind.addr["cluster-link-control"]=127.0.0.1

cluster.link.bind.addr["cluster-link-udp"]=127.0.0.1</echo>
	</target>

	<target name="print-scm-revision">
		<echo>Portal GIT ID:</echo>
		<echo />

		<exec dir="${project.dir}" executable="git">
			<arg line="log -n 1" />
		</exec>

		<echo />
		<echo>Plugins GIT ID:</echo>
		<echo />

		<exec dir="${lp.plugins.dir}" executable="git">
			<arg line="log -n 1" />
		</exec>

		<echo />
	</target>

	<target name="rebuild-database" depends="build-sql-file">
		<if>
			<not>
				<isset property="skip.rebuild-database" />
			</not>
			<then>
				<antcall target="delete-liferay-home" />

				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<exec executable="${db2.executable}" failonerror="true">
							<arg value="-fcreate.sql" />
							<arg value="-t" />
						</exec>
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="hsql" />
						<then>
							<delete dir="${liferay.home}/data" includeemptydirs="true" />

							<copy file="sql/${database.name}.properties" tofile="${liferay.home}/data/hsql/${database.name}.properties" />
							<copy file="sql/${database.name}.script" tofile="${liferay.home}/data/hsql/${database.name}.script" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="mysql" />
						<then>
							<var name="mysql.arg.line" unset="true" />

							<get-database-property property.name="database.password" />
							<get-database-property property.name="database.username" />

							<if>
								<and>
									<equals arg1="${database.password}" arg2="" />
									<equals arg1="${database.username}" arg2="" />
								</and>
								<then>
									<var name="mysql.arg.line" value="" />
								</then>
								<elseif>
									<equals arg1="${database.password}" arg2="" />
									<then>
										<var name="mysql.arg.line" value="-u ${database.username}" />
									</then>
								</elseif>
								<elseif>
									<equals arg1="${database.username}" arg2="" />
									<then>
										<var name="mysql.arg.line" value="-p${database.password}" />
									</then>
								</elseif>
								<else>
									<var name="mysql.arg.line" value="-p${database.password} -u ${database.username}" />
								</else>
							</if>

							<exec executable="${mysql.executable}" input="create.sql" failonerror="true">
								<arg line="${mysql.arg.line}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="oracle" />
						<then>
							<get-database-property property.name="database.password" />
							<get-database-property property.name="database.username" />

							<exec executable="${oracle.sqlplus.executable}" failonerror="true">
								<arg value="${oracle.admin.user}/${oracle.admin.password}" />
								<arg value="@create.sql" />
								<arg value="${database.username}" />
								<arg value="${database.password}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="postgresql" />
						<then>
							<get-database-property property.name="database.username" />

							<exec executable="${postgresql.executable}" failonerror="true">
								<arg value="-f" />
								<arg value="create.sql" />
								<arg value="-U" />
								<arg value="${database.username}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="sybase" />
						<then>
							<get-database-property property.name="database.password" />
							<get-database-property property.name="database.schema" />
							<get-database-property property.name="database.username" />

							<exec executable="${sybase.executable}" failonerror="true">
								<arg value="-i" />
								<arg value="create.sql" />
								<arg value="-P" />
								<arg value="${database.password}" />
								<arg value="-S" />
								<arg value="${database.schema}" />
								<arg value="-U" />
								<arg value="${database.username}" />
							</exec>
						</then>
					</elseif>
				</if>
			</then>
		</if>

		<delete file="create.sql" />
	</target>

	<target name="rebuild-legacy-database">
		<antcall target="rebuild-database">
			<param name="database.type" value="${database.type}" />
			<param name="sql.dir" value="sql/create-bare/" />
			<param name="sql.file" value="create-bare-${database.type}.sql" />
		</antcall>

		<get-testcase-property property.name="data.archive.type" />
		<get-testcase-property property.name="portal.version" />

		<unzip
			dest="${liferay.home}"
			src="${portal.legacy.dir}/${portal.version}/data-archive/${data.archive.type}-${database.type}.zip"
		/>

		<if>
			<equals arg1="${database.type}" arg2="mysql" />
			<then>
				<get-database-property property.name="database.password" />
				<get-database-property property.name="database.username" />

				<exec executable="mysql" input="${liferay.home}/${database.type}.sql">
					<arg value="--database=lportal" />
					<arg value="--password=${database.password}" />
					<arg value="--user=${database.username}" />
				</exec>
			</then>
		</if>
	</target>

	<target name="record-database-type">
		<echo file="database-type" append="true">${database.type},</echo>
	</target>

	<target name="record-git-commit-bottom-test-jsp">
		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
			<arg line="rev-parse HEAD" />
		</exec>

		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.current.date">
			<arg line="log -1 --pretty=format:%cd HEAD" />
		</exec>

		<loadfile property="copyright.content" srcFile="${project.dir}/copyright.txt" />

		<echo file="${app.server.dir}/webapps/ROOT/html/common/themes/bottom-test.jsp"><![CDATA[<%--
${copyright.content}
--%>

<%@ page import="com.liferay.portal.kernel.util.ParamUtil" %>

<%
String ppstate = ParamUtil.getString(request, "p_p_state", "normal");

if (ppstate.equals("normal")) {
%>

	<div class="alert alert-info" id="currentHead" style="margin: 2em">
		Commit <a href="https://github.com/liferay/liferay-portal/commit/${git.commit.portal.rev.parse}" target="_blank">${git.commit.portal.rev.parse} - ${git.commit.portal.current.date}</a>
	</div>

<%
}
%>]]></echo>

		<echo>Updated ${app.server.dir}/webapps/ROOT/html/common/themes/bottom-test.jsp.</echo>
	</target>

	<target name="record-git-commit-plugins">
		<record-git-commit-plugins />
	</target>

	<target name="record-git-commit-portal">
		<record-git-commit-portal />
	</target>

	<target name="record-test-case-method-names">
		<gradle-execute failonerror="false" task="writePoshiProperties">
			<arg value="--build-file=portal-web/build-test.gradle" />
			<arg value="-PcomponentNames=${component.names}" />
			<arg value="-PproductNames=${product.names}" />
			<arg value="-PtestCaseAvailablePropertyNames=${test.case.available.property.names}" />
		</gradle-execute>

		<move file="portal-web/test.case.method.names.properties" tofile="test.case.method.names.properties" />
	</target>

	<target name="record-test-class-file-names">
		<record-test-class-file-names />
	</target>

	<target name="record-test-generated-properties">
		<fail message="Please set the property ${test.class}." unless="test.class" />

		<get-poshi-test-name />

		<gradle-execute failonerror="false" task="writePoshiProperties">
			<arg value="--build-file=portal-web/build-test.gradle" />
			<arg value="-PcomponentNames=${component.names}" />
			<arg value="-PposhiTestName=${poshi.test.name}" />
			<arg value="-PproductNames=${product.names}" />
			<arg value="-PtestCaseAvailablePropertyNames=${test.case.available.property.names}" />
		</gradle-execute>

		<move file="portal-web/test.generated.properties" tofile="test.generated.properties" />

		<loadfile failonerror="false" property="test.generated.properties.content" srcfile="test.generated.properties" />

		<echo>##</echo>
		<echo>## test.generated.properties</echo>
		<echo>##</echo>
		<echo></echo>
		<echo>${test.generated.properties.content}</echo>
		<echo></echo>
	</target>

	<target name="record-test-plugin-names">
		<loadproperties srcFile="${lp.plugins.dir}/build.properties">
			<filterchain>
				<linecontains>
					<contains value="plugins.excludes" />
				</linecontains>
			</filterchain>
		</loadproperties>

		<script classpathref="project.classpath" language="beanshell">
			<![CDATA[
				import org.apache.tools.ant.DirectoryScanner;

				List getPluginGroups(List pluginNames, int groupsSize) {
					List pluginNameGroups = new ArrayList(groupsSize);

					for (int i = 0; i < groupsSize; i++) {
						pluginNameGroups.add(new ArrayList());
					}

					int i = 0;

					for (String pluginName : pluginNames) {
						List pluginNameGroup = pluginNameGroups.get(i++ % groupsSize);

						pluginNameGroup.add(pluginName);
					}

					return pluginNameGroups;
				}

				List getPluginNames() {
					DirectoryScanner directoryScanner = new DirectoryScanner();

					directoryScanner.setBasedir(project.getProperty("lp.plugins.dir"));
					directoryScanner.setIncludes(new String[] {"**/hooks/*/build.xml", "**/layoutpl/*/build.xml", "**/portlets/*/build.xml", "**/shared/*/build.xml", "**/themes/*/build.xml", "**/webs/*/build.xml"});

					directoryScanner.scan();

					String[] fileNames = directoryScanner.getIncludedFiles();

					List pluginNames = new ArrayList();

					for (String fileName : fileNames) {
						int x = fileName.indexOf("/");
						int y = fileName.lastIndexOf("/");

						if (File.separator.equals("\\")) {
							x = fileName.indexOf("\\");
							y = fileName.lastIndexOf("\\");
						}

						String pluginName = fileName.substring(x + 1, y);

						String pluginsExcludes = project.getProperty("plugins.excludes");

						if (!pluginsExcludes.contains(pluginName)) {
							pluginNames.add(pluginName);
						}
					}

					Collections.sort(pluginNames);

					return pluginNames;
				}

				StringBuilder sb = new StringBuilder();

				int allTestPluginGroupsSize = Integer.parseInt(project.getProperty("test.plugin.groups.size"));

				List pluginNames = getPluginNames();

				List testPluginGroups = getPluginGroups(pluginNames, allTestPluginGroupsSize);

				for (i = 0; i < allTestPluginGroupsSize; i++) {
					List testPluginGroup = testPluginGroups.get(i);

					sb.append("TEST_PLUGIN_GROUP_");
					sb.append(i);
					sb.append("=");

					for (String testPlugin : testPluginGroup) {
						sb.append(testPlugin);
						sb.append(",");
					}

					sb.append("\n\n");
				}

				sb.append("TEST_PLUGIN_GROUPS=");

				for (int i = 0; i < allTestPluginGroupsSize; i++) {
					sb.append(i);
					sb.append(" ");
				}

				if (allTestPluginGroupsSize > 0) {
					sb.setLength(sb.length() - 1);
				}

				project.setProperty("test.plugin.names.properties.content", sb.toString());
			]]>
		</script>

		<echo file="test.plugin.names.properties">${test.plugin.names.properties.content}</echo>
	</target>

	<target name="record-testray-logs">
		<if>
			<isset property="jenkins.testray.results.dir" />
			<then>
				<antelope:stringutil property="job.name" string="${env.JOB_NAME}">
					<antelope:replace regex="," replacement="_" />
				</antelope:stringutil>

				<property name="testray.logs.dir" value="${jenkins.testray.results.dir}/logs/${job.name}/builds/${env.TOP_LEVEL_BUILD_NUMBER}" />

				<mkdir dir="${testray.logs.dir}" />

				<copy
					failonerror="false"
					file="portal-web/test-results/functional/report.html"
					tofile="${testray.logs.dir}/report.html"
				/>

				<copy failonerror="false" todir="${testray.logs.dir}/screenshots">
					<fileset
						dir="portal-web/test-results/functional/screenshots"
					/>
				</copy>

				<propertyregex
					input="${env.BUILD_URL}"
					property="jenkins.build.url"
					regexp="https:\/\/([^\.]+)\.[^\/]+"
					replace="http://\1"
				/>

				<propertyregex
					input="${jenkins.build.url}"
					override="true"
					property="jenkins.build.url"
					regexp="http:\/\/([^\/]+)\/(\d+)"
					replace="http://\1-\2/\2"
				/>

				<get dest="${testray.logs.dir}/console.txt" ignoreerrors="true" src="${jenkins.build.url}/consoleText" />
			</then>
		</if>
	</target>

	<target name="remove-plugin">
		<get-auto-deploy-dir />

		<delete>
			<fileset dir="${auto.deploy.dir}" includes="${plugin.name}-*.war" />
		</delete>
	</target>

	<target name="replace-file">
		<fail message="Please set the property ${file}." unless="file" />
		<fail message="Please set the property ${token}." unless="token" />
		<fail message="Please set the property ${value}." unless="value" />

		<fail message="${token} not found in ${file}.">
			<condition>
				<not>
					<resourcecontains resource="${file}" substring="${token}" />
				</not>
			</condition>
		</fail>

		<echo>Replacing ${token} with ${value} in ${file}.</echo>

		<replace file="${file}">
			<replacefilter
				token="${token}"
				value="${value}"
			/>
		</replace>
	</target>

	<target name="revert-test-properties">
		<execute>
			<![CDATA[git checkout -- portal-impl/test/portal-test.properties]]>
		</execute>

		<delete file="portal-impl/test/portal-test-ext.properties" failonerror="false" />

		<execute>
			<![CDATA[git checkout -- portal-impl/test/test-portal-impl.properties]]>
		</execute>

		<execute>
			<![CDATA[git checkout -- portal-web/test/test-portal-web.properties]]>
		</execute>
	</target>

	<target name="run-poshi-runner">
		<get-poshi-test-name />

		<tstamp>
			<format property="current.date" pattern="yyyy-MM-dd" />
		</tstamp>

		<property name="test.console.log.file.name" value="${liferay.home}/logs/liferay.${current.date}.xml" />

		<gradle-execute failonerror="false" task="runPoshi">
			<arg value="--build-file=portal-web/build-test.gradle" />
			<arg value="-PposhiTestName=${poshi.test.name}" />
			<arg value="-PsaveScreenshot=${test.save.screenshot}" />
			<arg value="-PseleniumLoggerEnabled=${test.selenium.logger.enabled}" />
			<arg value="-PtestCaseAvailablePropertyNames=${test.case.available.property.names}" />
			<arg value="-PtestConsoleLogFileName=${test.console.log.file.name}" />
			<arg value="-PtestSkipTearDown=${test.skip.tear.down}" />
		</gradle-execute>
	</target>

	<target name="run-poshi-validation">
		<gradle-execute failonerror="false" task="validatePoshi">
			<arg value="--build-file=portal-web/build-test.gradle" />
			<arg value="-PtestCaseAvailablePropertyNames=${test.case.available.property.names}" />
		</gradle-execute>
	</target>

	<target name="run-selenium-smoke-test">
		<antcall target="compile" />

		<antcall target="start-selenium" />

		<ant dir="portal-impl" target="compile-test" inheritAll="false" />

		<ant dir="portal-web" target="test-class" inheritAll="false">
			<property name="test.class" value="SeleniumSmokeTestSuite" />
		</ant>

		<antcall target="stop-selenium" />
	</target>

	<target name="run-selenium-test">
		<if>
			<and>
				<equals arg1="${test.class}" arg2="PortalWebTestSuite" />
				<not>
					<equals arg1="${database.type}" arg2="hsql" />
				</not>
			</and>
			<then>
				<ant dir="portal-impl" target="test-class" inheritAll="false">
					<property name="test.class" value="ServiceHttpTestSuite" />
				</ant>

				<ant dir="portal-impl" target="test-class" inheritAll="false">
					<property name="test.class" value="ServiceSoapTestSuite" />
				</ant>
			</then>
		</if>

		<ant dir="portal-impl" target="compile-test" inheritAll="false" />

		<if>
			<equals arg1="${database.type}" arg2="hsql" />
			<then>
				<antcall target="rebuild-database" inheritAll="false">
					<param name="database.type" value="mysql" />
					<param name="delete.liferay.home" value="false" />
				</antcall>

				<echo file="portal-impl/classes/portal-ext.properties">liferay.home=${liferay.home}

jdbc.default.jndi.name=

jdbc.default.driverClassName=${database.mysql.driver}
jdbc.default.url=${database.mysql.url}
jdbc.default.username=${database.mysql.username}
jdbc.default.password=${database.mysql.password}</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.poshi.runner.enabled}" arg2="true" />
			<then>
				<antcall target="run-poshi-runner" />
			</then>
			<else>
				<if>
					<contains string="${test.class}" substring="#" />
					<then>
						<get-test-method-name />

						<get-test-simple-class-name />

						<var name="test.class" unset="true" />
						<var name="test.methods" unset="true" />

						<ant dir="portal-web" target="test-method">
							<property name="test.class" value="${test.simple.class.name}" />
							<property name="test.dir" value="functional-generated" />
							<property name="test.methods" value="${test.method.name}" />
						</ant>
					</then>
					<else>
						<get-test-simple-class-name />

						<var name="test.class" unset="true" />

						<ant dir="portal-web" target="test-class" inheritAll="false">
							<property name="test.class" value="${test.simple.class.name}" />
							<property name="test.dir" value="functional-generated" />
						</ant>
					</else>
				</if>
			</else>
		</if>

		<property name="test.class" value="${test.simple.class.name}#${test.method.name}" />

		<if>
			<isset property="jenkins.shared.user.content.dir" />
			<then>
				<var name="jenkins.shared.results.dir" value="${jenkins.shared.user.content.dir}/jobs" />
			</then>
			<else>
				<var name="jenkins.shared.results.dir" value="." />
			</else>
		</if>

		<if>
			<isset property="env.JENKINS_HOME" />
			<then>
				<antelope:stringutil property="job.name" string="${env.JOB_NAME}">
					<antelope:replace regex="," replacement="_" />
				</antelope:stringutil>

				<get-poshi-class-name />
				<get-poshi-method-name />

				<property name="poshi.runner.results.dir" value="${poshi.class.name}_${poshi.method.name}" />

				<if>
					<and>
						<or>
							<available file="portal-web/test-results/functional/report.html" />
							<available file="portal-web/test-results/${poshi.runner.results.dir}/index.html" />
						</or>
						<equals arg1="${test.selenium.logger.enabled}" arg2="true" />
					</and>
					<then>
						<if>
							<equals arg1="${test.poshi.runner.enabled}" arg2="true" />
							<then>
								<property name="result.file" value="portal-web/test-results/${poshi.runner.results.dir}/index.html" />
							</then>
							<else>
								<property name="result.file" value="portal-web/test-results/functional/report.html" />
							</else>
						</if>

						<copy
							file="${result.file}"
							tofile="${jenkins.shared.results.dir}/${job.name}/builds/${env.BUILD_NUMBER}/report.html"
						/>
					</then>
				</if>

				<if>
					<and>
						<or>
							<available file="portal-web/test-results/functional/screenshots" />
							<available file="portal-web/test-results/${poshi.runner.results.dir}/screenshots" />
						</or>
						<equals arg1="${test.save.screenshot}" arg2="true" />
					</and>
					<then>
						<if>
							<equals arg1="${test.poshi.runner.enabled}" arg2="true" />
							<then>
								<property name="screenshot.dir" value="portal-web/test-results/${poshi.runner.results.dir}/screenshots" />
							</then>
							<else>
								<property name="screenshot.dir" value="portal-web/test-results/functional/screenshots" />
							</else>
						</if>

						<copy todir="${jenkins.shared.results.dir}/${job.name}/builds/${env.BUILD_NUMBER}/screenshots">
							<fileset dir="${screenshot.dir}" erroronmissingdir="false" />
						</copy>
					</then>
				</if>

				<antcall target="build-test-results-xml" />

				<first id="first">
					<fileset dir="portal-web/test-results/" includes="**/TEST-com.liferay.portalweb.*.xml,**/TEST-com.liferay.portalweb2.*.xml,**/TEST-com.liferay.poshi.runner.*.xml" />
				</first>

				<property name="jenkins.results.xml.file" value="${toString:first}" />

				<if>
					<available file="${jenkins.results.xml.file}" />
					<then>
						<copy
							file="${jenkins.results.xml.file}"
							tofile="${jenkins.shared.results.dir}/${env.BUILD_FLOW_JOB_NAME}/builds/${env.BUILD_FLOW_BUILD_NUMBER}/test-results/TEST-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}_${test.class}.xml"
						/>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="run-simple-server" depends="prepare-portal-properties,prepare-portal-ext-properties,prepare-system-ext-properties">
		<if>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<then>
				<ant antfile="build-dist.xml" target="update-java-security-tomcat" />
			</then>
		</if>

		<antcall target="check-inet-address" />

		<get-testcase-property property.name="database.jndi.enabled" />

		<if>
			<equals arg1="${database.jndi.enabled}" arg2="true" />
			<then>
				<prepare-database-jndi />
			</then>
		</if>

		<get-testcase-property property.name="mobile.device.enabled" />

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<start-android-device />

				<start-appium />
			</then>
		</if>

		<get-testcase-property property.name="web.xml.timeout" />

		<if>
			<isset property="web.xml.timeout" />
			<then>
				<replace
					file="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml"
					token="&lt;session-timeout&gt;30&lt;/session-timeout&gt;"
					value="&lt;session-timeout&gt;${web.xml.timeout}&lt;/session-timeout&gt;"
				/>
			</then>
		</if>

		<antcall target="clean-up-java-processes" inheritAll="false" />

		<get-testcase-property property.name="portal.version" />

		<if>
			<isset property="portal.version" />
			<then>
				<antcall target="rebuild-legacy-database" />
			</then>
			<else>
				<antcall target="rebuild-database" inheritAll="false" />
			</else>
		</if>

		<antcall target="copy-optional-jars" inheritAll="false">
			<param name="todir" value="${app.server.lib.global.dir}" />
		</antcall>

		<if>
			<not>
				<equals arg1="${skip.clean-app-server-deploy-dir}" arg2="true" />
			</not>
			<then>
				<antcall target="clean-app-server-deploy-dir" />
			</then>
		</if>

		<if>
			<equals arg1="${app.server.type}" arg2="glassfish" />
			<then>
				<start-app-server />

				<stop-app-server />
			</then>
		</if>

		<get-testcase-property property.name="solr.enabled" />

		<if>
			<equals arg1="${solr.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-solr.xml" target="start-solr" />
			</then>
		</if>

		<antcall target="deploy-specified-plugins" />

		<antcall target="deploy-extra-apps" />

		<get-testcase-property property.name="app.server.bundles.size" />

		<if>
			<isset property="app.server.bundles.size" />
			<then>
				<prepare-additional-bundles />
			</then>
		</if>

		<get-testcase-property property.name="cluster.enabled" />

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<prepare-test-cluster-properties />
			</then>
		</if>

		<get-testcase-property property.name="hook.plugins.includes" />

		<if>
			<and>
				<contains string="${hook.plugins.includes}" substring="so-hook" />
				<equals arg1="${app.server.type}" arg2="jboss" />
			</and>
			<then>
				<start-app-server />

				<stop-app-server />
			</then>
		</if>

		<get-testcase-property property.name="sharepoint.enabled" />

		<if>
			<equals arg1="${sharepoint.enabled}" arg2="true" />
			<then>
				<if>
					<os family="unix" />
					<then>
						<exec executable="/bin/bash" os="${os.unix}" outputproperty="sharepoint.vm.host.name">
							<arg value="-c" />
							<arg value="curl &quot;http://it.liferay.com/osb-ici-controller-web/vm/allocation/borrow?leaseTime=30000&amp;resourceType=qa%2Esharepoint2010&quot;" />
						</exec>
					</then>
					<else>
						<exec executable="cmd" outputproperty="sharepoint.vm.host.name">
							<arg value="/c" />
							<arg value="curl &quot;http://it.liferay.com/osb-ici-controller-web/vm/allocation/borrow?leaseTime=30000&amp;resourceType=qa%2Esharepoint2010&quot;" />
						</exec>
					</else>
				</if>

				<propertyregex
					input="${sharepoint.vm.host.name}"
					override="true"
					property="sharepoint.vm.host.name"
					regexp="&quot;(cloud.*?)&quot;"
					select="\1"
				/>
			</then>
		</if>

		<antcall target="prepare-selenium" />

		<remake-dir dir="${selenium.output.dir}" />

		<if>
			<equals arg1="${browser.type}" arg2="googlechrome" />
			<then>
				<antcall target="start-chrome-driver" />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="ie" />
			<then>
				<antcall target="start-ie-driver" />
			</then>
		</if>

		<antcall target="copy-sikuli-temp-files" />

		<start-app-server />

		<get-testcase-property property.name="app.server.bundles.size" />

		<if>
			<isset property="app.server.bundles.size" />
			<then>
				<var name="app.server.bundle.index" value="1" />

				<antelope:repeat count="${app.server.bundles.size}">
					<start-app-server
						app.server.bundle.index="${app.server.bundle.index}"
					/>

					<math
						datatype="int"
						operand1="${app.server.bundle.index}"
						operand2="1"
						operation="+"
						result="app.server.bundle.index"
					/>
				</antelope:repeat>

				<var name="app.server.bundle.index" unset="true" />
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${tcat.enabled}" arg2="true" />
			</not>
			<then>
				<waitfor maxwait="150" maxwaitunit="second">
					<available file="${liferay.home}/logs" type="dir" />
				</waitfor>

				<antcall target="wait-for-plugins-deployment" />
			</then>
		</if>

		<if>
			<equals arg1="${test.ant.script.actions}" arg2="db-failover" />
			<then>
				<ant antfile="build-test-db-failover.xml" target="run-db-failover" />
			</then>
		</if>

		<antcall target="run-selenium-test" />

		<get-testcase-property property.name="sharepoint.enabled" />

		<if>
			<equals arg1="${sharepoint.enabled}" arg2="true" />
			<then>
				<property file="${project.dir}/portal-web/test/test-portal-web-ext.properties" />

				<if>
					<os family="unix" />
					<then>
						<exec executable="/bin/bash" os="${os.unix}">
							<arg value="-c" />
							<arg value="curl &quot;http://it.liferay.com/osb-ici-controller-web/vm/allocation/release?hostname=${sharepoint.vm.host.name}&amp;resourceType=qa%2Esharepoint2010&quot;" />
						</exec>
					</then>
					<else>
						<exec executable="cmd">
							<arg value="/c" />
							<arg value="curl &quot;http://it.liferay.com/osb-ici-controller-web/vm/allocation/release?hostname=${sharepoint.vm.host.name}&amp;resourceType=qa%2Esharepoint2010&quot;" />
						</exec>
					</else>
				</if>
			</then>
		</if>

		<stop-app-server />

		<get-testcase-property property.name="app.server.bundles.size" />

		<if>
			<isset property="app.server.bundles.size" />
			<then>
				<var name="app.server.bundle.index" value="1" />

				<antelope:repeat count="${app.server.bundles.size}">
					<stop-app-server
						app.server.bundle.index="${app.server.bundle.index}"
					/>

					<math
						datatype="int"
						operand1="${app.server.bundle.index}"
						operand2="1"
						operation="+"
						result="app.server.bundle.index"
					/>
				</antelope:repeat>

				<var name="app.server.bundle.index" unset="true" />
			</then>
		</if>

		<get-testcase-property property.name="mobile.device.enabled" />

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<stop-android-device />

				<stop-appium />
			</then>
		</if>

		<antcall target="clean-up-sikuli-temp-files" />

		<antcall target="clean-up-web-xml" />

		<if>
			<equals arg1="${browser.type}" arg2="googlechrome" />
			<then>
				<antcall target="stop-chrome-driver" />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="ie" />
			<then>
				<antcall target="stop-ie-driver" />
			</then>
		</if>
	</target>

	<target name="set-portal-impl-portal-ext-properties">
		<set-portal-impl-portal-ext-properties />
	</target>

	<target name="set-portal-impl-portal-test-ext-properties">
		<set-portal-impl-portal-test-ext-properties />
	</target>

	<target name="setup-testable-tomcat">
		<setup-testable-tomcat />
	</target>

	<target name="start-app-server">
		<if>
			<not>
				<isset property="app.server.bundle.index" />
			</not>
			<then>
				<var name="app.server.bundle.index" value="0" />
			</then>
		</if>

		<start-app-server
			app.server.bundle.index="${app.server.bundle.index}"
			testable.portal.started.marker.file="${testable.portal.started.marker.file}"
		/>
	</target>

	<target name="start-chrome-driver">
		<if>
			<not>
				<isset property="chrome.driver.zip" />
			</not>
			<then>
				<fail>
.

Please set "chrome.driver.zip" in test.properties to point to "chromedriver_win_22_0_1203_0b.zip"
which can be downloaded from this website: http://code.google.com/p/chromedriver/
				</fail>
			</then>
			<else>
				<exec executable="taskkill.exe">
					<arg line="/F /IM chromedriver.exe" />
				</exec>

				<unzip src="${chrome.driver.zip}" dest="tools/selenium" />
			</else>
		</if>
	</target>

	<target name="start-ie-driver">
		<if>
			<not>
				<isset property="ie.driver.zip" />
			</not>
			<then>
				<fail>
.

Please set "ie.driver.zip" in test.properties to point to "IEDriverServer_x64_2.31.0.zip" or "IEDriverServer_Win32_2.31.0.zip" which can be downloaded from this website: https://code.google.com/p/selenium/wiki/InternetExplorerDriver.
				</fail>
			</then>
			<else>
				<exec executable="taskkill.exe">
					<arg line="/F /IM IEDriverServer.exe" />
				</exec>

				<unzip src="${ie.driver.zip}" dest="tools/selenium" />
			</else>
		</if>
	</target>

	<target name="start-lcs-server">
		<start-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="1"
			app.server.leading.port.number="7"
		/>

		<start-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="2"
			app.server.leading.port.number="9"
		/>

		<start-lcs-app-server />
	</target>

	<target name="start-ldap">
		<exec dir="${app.server.parent.dir}/apacheds_1.5.7" executable="cmd">
			<arg value="/c" />
			<arg value="apacheds.bat" />
		</exec>
	</target>

	<target name="start-selenium">
		<if>
			<not>
				<resourcecontains
					resource="portal-impl/classes/system-ext.properties"
					substring="java.awt.headless=false"
				/>
			</not>
			<then>
				<echo append="true" file="portal-impl/classes/system-ext.properties">
					java.awt.headless=false
				</echo>
			</then>
		</if>

		<!--<java
			jar="lib/development/selenium-server.jar"
			fork="true"
			spawn="true"
		>-->
		<java
			classname="org.openqa.grid.selenium.GridLauncher"
			classpathref="project.classpath"
			fork="true"
			spawn="true"
		>
			<arg line="-port 14444 -singleWindow" />
		</java>
	</target>

	<target name="stop-app-server">
		<if>
			<not>
				<isset property="app.server.bundle.index" />
			</not>
			<then>
				<var name="app.server.bundle.index" value="0" />
			</then>
		</if>

		<stop-app-server
			app.server.bundle.index="${app.server.bundle.index}"
		/>
	</target>

	<target name="stop-chrome-driver">
		<exec executable="taskkill.exe">
			<arg line="/F /IM chromedriver.exe" />
		</exec>
	</target>

	<target name="stop-ie-driver">
		<exec executable="taskkill.exe">
			<arg line="/F /IM IEDriverServer.exe" />
		</exec>
	</target>

	<target name="stop-lcs-server">
		<stop-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="1"
			app.server.leading.port.number="7"
		/>

		<stop-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="2"
			app.server.leading.port.number="9"
		/>

		<stop-lcs-app-server />
	</target>

	<target name="stop-ldap">
		<exec executable="/bin/sh" os="${os.unix}">
			<arg line="-c jps -l" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}">
			<arg line="/c jps -l > java-processes" />
		</exec>

		<loadfile property="java-processes.content" srcfile="java-processes" />

		<delete file="java-processes" />

		<script classpathref="project.classpath" language="beanshell">
			String javaProcessesNewContent = project.getProperty("java-processes.content");

			if (javaProcessesNewContent.contains("File Not Found")) {
				javaProcessesNewContent = "";
			}

			String javaProcessList = javaProcessesNewContent.replaceAll("\r\n", ",");

			if (javaProcessList.endsWith(",")) {
				javaProcessList = javaProcessList.substring(0, javaProcessList.length() - 1);
			}

			project.setProperty("java.process.list", javaProcessList);
		</script>

		<for list="${java.process.list}" param="java.process">
			<sequential>
				<if>
					<contains string="@{java.process}" substring="org.apache.directory.server.UberjarMain" />
					<then>
						<antcall target="kill-java-process">
							<param name="java.process.to.kill" value="@{java.process}" />
						</antcall>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<target name="stop-selenium">
		<if>
			<available file="portal-impl/src/system-ext.properties" />
			<then>
				<if>
					<not>
						<filesmatch
							file1="portal-impl/src/system-ext.properties"
							file2="portal-impl/classes/system-ext.properties"
						/>
					</not>
					<then>
						<copy
							file="portal-impl/src/system-ext.properties"
							overwrite="true"
							tofile="portal-impl/classes/system-ext.properties"
						/>
					</then>
				</if>
			</then>
		</if>

		<antelope:post to="http://localhost:14444/selenium-server/driver/?cmd=shutDownSeleniumServer" wantresponse="true" />
	</target>

	<target name="test-integration">
		<ant dir="portal-service" target="test-integration" inheritAll="false" />

		<ant dir="portal-impl" target="test-integration" inheritAll="false" />

		<ant dir="util-java" target="test-integration" inheritAll="false" />
	</target>

	<target name="test-package">
		<ant dir="portal-service" target="test-package" inheritAll="false" />

		<ant dir="portal-impl" target="test-package" inheritAll="false" />

		<ant dir="util-java" target="test-package" inheritAll="false" />

		<ant dir="modules" target="test-package" inheritAll="false" />
	</target>

	<target name="test-unit">
		<ant dir="portal-service" target="test-unit" inheritAll="false" />

		<ant dir="portal-impl" target="test-unit" inheritAll="false" />

		<ant dir="util-java" target="test-unit" inheritAll="false" />

		<ant dir="modules" target="test-unit" inheritAll="false" />
	</target>

	<target name="wait-for-plugins-deployment">
		<fail message="Please set the property ${test.class}." unless="test.class" />

		<condition property="required.plugins.includes" value="">
			<not>
				<isset property="required.plugins.includes" />
			</not>
		</condition>

		<if>
			<not>
				<available file="${liferay.home}/logs" type="dir" />
			</not>
			<then>
				<fail message="${liferay.home}/logs is not available." />
			</then>
		</if>

		<first id="first">
			<fileset dir="${liferay.home}/logs" includes="*.log" />
		</first>

		<var name="log.file.path" value="${toString:first}" />

		<get-testcase-property property.name="hook.plugins.includes" />
		<get-testcase-property property.name="layouttpl.plugins.includes" />
		<get-testcase-property property.name="portlet.plugins.includes" />
		<get-testcase-property property.name="theme.plugins.includes" />
		<get-testcase-property property.name="web.plugins.includes" />

		<script classpathref="project.classpath" language="beanshell">
			<![CDATA[
				import com.liferay.portal.kernel.util.StringUtil;

				import org.apache.commons.io.FileUtils;

				Set requiredPluginNamesSet = new HashSet();

				String[] pluginTypes = {"hook", "layouttpl", "portlet", "required", "theme", "web"};

				for (String pluginType : pluginTypes) {
					String[] pluginNames = StringUtil.split(project.getProperty(pluginType + ".plugins.includes"), ',');

					for (String pluginName : pluginNames) {
						requiredPluginNamesSet.add(pluginName);
					}
				}

				System.out.println("Ensuring the following plugins have been deployed:");
				System.out.println(StringUtil.merge(requiredPluginNamesSet));

				String logFilePath = project.getProperty("log.file.path");

				logFilePath = logFilePath.replaceAll("\\\\", "/");

				int second = 0;

				for (String pluginName : requiredPluginNamesSet) {
					while (true) {
						try {
							File file = new File(logFilePath);

							String content = FileUtils.readFileToString(file);

							if (content.contains(pluginName + " is available for use") ||
								content.contains(pluginName + " are available for use")) {

								break;
							}
						}
						catch (Exception e) {
							e.printStackTrace();
						}

						if (second >= 120) {
							break;
						}

						second++;

						Thread.sleep(1000);
					}
				}
			]]>
		</script>
	</target>
</project>