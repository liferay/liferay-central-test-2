<?xml version="1.0"?>

<project name="portal-test" basedir="." default="test" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build.xml" />

	<property file="${project.dir}/test.generated.properties" />
	<property file="${project.dir}/test.${user.name}.properties" />
	<property file="${project.dir}/test.${env.COMPUTERNAME}.properties" />
	<property file="${project.dir}/test.${env.HOST}.properties" />
	<property file="${project.dir}/test.${env.HOSTNAME}.properties" />
	<property file="${project.dir}/test.properties" />

	<propertycopy from="app.server.${app.server.type}.start.executable" name="app.server.start.executable" />
	<propertycopy from="app.server.${app.server.type}.start.executable.arg.line" name="app.server.start.executable.arg.line" />
	<propertycopy from="app.server.${app.server.type}.stop.executable" name="app.server.stop.executable" />
	<propertycopy from="app.server.${app.server.type}.stop.executable.arg.line" name="app.server.stop.executable.arg.line" />

	<propertycopy from="browser.${browser.type}.version" name="browser.version" />

	<propertycopy from="database.${database.type}.version.build" name="database.version.build" />

	<propertycopy from="database.${database.type}${database.version.build}.host" name="database.host" />
	<propertycopy from="database.${database.type}${database.version.build}.password" name="database.password" />
	<propertycopy from="database.${database.type}${database.version.build}.schema" name="database.schema" />
	<propertycopy from="database.${database.type}${database.version.build}.username" name="database.username" />
	<propertycopy from="database.${database.type}${database.version.build}.url" name="database.url" />
	<propertycopy from="database.${database.type}${database.version.build}.version" name="database.version" />

	<propertycopy from="java.jdk.${java.jdk.type}.version" name="java.jdk.version" />

	<propertycopy from="liferay.portal.${liferay.portal.branch}.bundle" name="liferay.portal.bundle" />

	<propertycopy from="operating.system.${operating.system.type}.version" name="operating.system.version" />

	<property name="plink.executable" location="${project.dir}/tools/putty/plink.exe" />
	<property name="pscp.executable" location="${project.dir}/tools/putty/pscp.exe" />

	<propertycopy from="testray.build.${testray.build.type}.name" name="testray.build.name" />
	<propertycopy from="testray.product.${testray.product.type}.version" name="testray.product.version" />

	<if>
		<os family="unix" />
		<then>
			<exec executable="/bin/bash" os="${os.unix}" outputproperty="ip.address">
				<arg value="-c" />
				<arg value="ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'" />
			</exec>
		</then>
		<else>
			<hostinfo host="${env.COMPUTERNAME}.local" prefix="host.info" />

			<property name="ip.address" value="${host.info.ADDR4}" />
		</else>
	</if>

	<macrodef name="prepare-additional-bundles">
		<sequential>
			<if>
				<isset property="app.server.bundle.count" />
				<then>
					<var name="bundle.count" value="1" />

					<antelope:repeat count="${app.server.bundle.count}">
						<delete dir="${app.server.parent.dir}-${bundle.count}" />

						<copy todir="${app.server.parent.dir}-${bundle.count}/${app.server.type}-${app.server.version}">
							<fileset dir="${app.server.dir}" />
						</copy>

						<if>
	  					 	<available file="${liferay.home}/osgi" />
							<then>
								<copy todir="${app.server.parent.dir}-${bundle.count}/osgi">
									<fileset dir="${liferay.home}/osgi" />
								</copy>
							</then>
						</if>

						<chmod perm="a+x">
							<fileset dir="${app.server.parent.dir}-${bundle.count}/${app.server.type}-${app.server.version}/bin">
								<include name="*.sh" />
							</fileset>
						</chmod>

						<math
							datatype="int"
							operand1="${bundle.count}"
							operand2="1"
							operation="+"
							result="bundle.count"
						/>
					</antelope:repeat>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-fix-pack-bundle" >
		<sequential>
			<if>
				<and>
					<isset property="test.fix.pack.base.url" />
					<isset property="test.fix.pack.zip.name" />
				</and>
				<then>
					<property name="test.build.fix.pack.zip.url" value="${test.fix.pack.base.url}/${test.fix.pack.zip.name}" />
				</then>
			</if>

			<if>
				<and>
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<matches pattern="http" string="${test.build.fix.pack.zip.url}" />
				</and>
				<then>
					<path id="app.server.dir">
						<dirset dir="${app.server.parent.dir}">
							<include name="*${app.server.type}-*" />
						</dirset>
					</path>

					<property name="app.server.dir" refid="app.server.dir" />

					<delete dir="${app.server.dir}/patching-tool" />

					<loadresource property="patching.tool.version">
						<url url="${test.fix.pack.base.url}/patching-tool/LATEST.txt" />
					</loadresource>

					<property name="test.build.patching.tool.zip.url" value="${test.fix.pack.base.url}/patching-tool/patching-tool-${patching.tool.version}.zip" />

					<get
						dest="${basedir}"
						src="${test.build.patching.tool.zip.url}"
					/>

					<unzip dest="${app.server.dir}">
						<fileset
							dir="${basedir}"
							includes="patching-tool*"
						/>
					</unzip>

					<chmod perm="a+x">
						<fileset dir="${app.server.dir}/patching-tool">
							<include name="*.sh" />
						</fileset>
					</chmod>

					<get
						dest="${app.server.dir}/patching-tool/patches"
						src="${test.build.fix.pack.zip.url}"
					/>

					<propertyregex
						input="${test.build.fix.pack.zip.url}"
						property="test.build.fix.pack.zip.file.name"
						regexp=".+/"
						replace=""
					/>

					<check-fix-pack-requirements
						fix.pack.dir="${app.server.dir}/patching-tool/patches"
						fix.pack.file.name="${test.build.fix.pack.zip.file.name}"
					/>

					<execute dir="${app.server.dir}/patching-tool">
						patching-tool${file.suffix.bat} auto-discovery
						patching-tool${file.suffix.bat} install -force
						patching-tool${file.suffix.bat} update-plugins
					</execute>

					<antelope:stringutil property="patching.tool.zip.file.name" string="${test.build.patching.tool.zip.url}">
						<antelope:replace regex=".+/patching-tool-" replacement="patching-tool-" />
					</antelope:stringutil>

					<delete file="${basedir}/${patching.tool.zip.file.name}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-cluster-properties">
		<sequential>
			<if>
				<not>
					<equals arg1="${app.server.type}" arg2="tomcat" />
				</not>
				<then>
					<fail>The public test clustering scripts are only available for Tomcat.</fail>
				</then>
			</if>

			<replace
				file="${app.server.tomcat.dir}/conf/server.xml"
				token="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;"
				value="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;0&quot;&gt;"
			/>

			<if>
				<isset property="app.server.bundle.count" />
				<then>
					<var name="app.server.bundle.number" value="1" />

					<antelope:repeat count="${app.server.bundle.count}">
						<set-app-server-properties
							app.server.bundle.number="${app.server.bundle.number}"
						/>

						<replaceregexp
							file="${test.app.server.dir}/conf/server.xml"
							flags="g"
							match="=&quot;8(\d\d\d)&quot;"
							replace="=&quot;${test.app.server.leading.port.number}\1&quot;"
						/>

						<replace
							file="${test.app.server.dir}/conf/server.xml"
							token="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;"
							value="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;${test.app.server.leading.port.number}&quot;&gt;"
						/>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="liferay.home=${liferay.home}"
							value="liferay.home=${test.app.server.parent.dir}"
						/>

						<math
							datatype="int"
							operand1="${app.server.bundle.number}"
							operand2="1"
							operation="+"
							result="app.server.bundle.number"
						/>
					</antelope:repeat>

					<var name="app.server.bundle.number" unset="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-env-app-server">
		<sequential>
			<propertyregex
				input="${app.server.version}"
				override="true"
				property="app.server.major.version"
				regexp="(\d+\.\d+).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${app.server.major.version}"
				global="true"
				input="${app.server.major.version}"
				override="true"
				property="app.server.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.app.server.${app.server.type}${app.server.major.version.build}"
				name="env.option.app.server"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="record-env-browser">
		<sequential>
			<propertyregex
				input="${browser.version}"
				override="true"
				property="browser.major.version"
				regexp="(\d+\.\d+).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${browser.major.version}"
				global="true"
				input="${browser.major.version}"
				override="true"
				property="browser.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.browser.${browser.type}${browser.major.version.build}"
				name="env.option.browser"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="record-env-database">
		<sequential>
			<propertyregex
				input="${database.version}"
				override="true"
				property="database.major.version"
				regexp="(\d+\.?\d+?).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${database.major.version}"
				global="true"
				input="${database.major.version}"
				override="true"
				property="database.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.database.${database.type}${database.major.version.build}"
				name="env.option.database"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="record-env-java-jdk">
		<sequential>
			<propertycopy
				from="env.option.java.jdk.${java.jdk.type}.${java.jdk.version}"
				name="env.option.java.jdk"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="record-env-liferay-portal">
		<sequential>
			<loadfile
				property="liferay.plugins.git.id"
				srcfile="git-commit-plugins"
			/>

			<loadfile
				property="liferay.portal.git.id"
				srcfile="git-commit-portal"
			/>
		</sequential>
	</macrodef>

	<macrodef name="record-env-operating-system">
		<sequential>
			<propertyregex
				defaultValue="${operating.system.version}"
				global="true"
				input="${operating.system.version}"
				override="true"
				property="operating.system.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="env.option.operating.system.${operating.system.type}${operating.system.version.build}"
				name="env.option.operating.system"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="record-testray-components">
		<sequential>
			<property file="${basedir}/test.run.properties" />

			<if>
				<not>
					<isset property="testray.main.component.name" />
				</not>
				<then>
					<property name="testray.main.component.name" value="" />
				</then>
			</if>

			<if>
				<not>
					<isset property="testray.component.names" />
				</not>
				<then>
					<property name="testray.component.names" value="${testray.main.component.name}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-testray-project-name">
		<sequential>
			<propertyregex
				input="${testray.product.version}"
				override="true"
				property="testray.product.major.version"
				regexp="(\d+\.?\d+?).*"
				replace="\1"
			/>

			<propertyregex
				defaultValue="${testray.product.major.version}"
				global="true"
				input="${testray.product.major.version}"
				override="true"
				property="testray.product.major.version.build"
				regexp="\."
				replace=""
			/>

			<propertycopy
				from="testray.project.${testray.product.type}${testray.product.major.version.build}.name"
				name="testray.project.name"
				override="true"
			/>
		</sequential>
	</macrodef>

	<macrodef name="set-app-server-properties">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.number" />

		<sequential>
			<var name="test.app.server.bin.dir" unset="true" />
			<var name="test.app.server.classes.portal.dir" unset="true" />
			<var name="test.app.server.deploy.dir" unset="true" />
			<var name="test.app.server.dir" unset="true" />
			<var name="test.app.server.leading.port.number" unset="true" />
			<var name="test.app.server.parent.dir" unset="true" />

			<math
				datatype="int"
				operand1="@{app.server.bundle.number}"
				operand2="8"
				operation="+"
				result="test.app.server.leading.port.number"
			/>

			<if>
				 <equals arg1="@{app.server.bundle.number}" arg2="0" />
				 <then>
					<var name="test.app.server.bin.dir" value="@{app.server.bin.dir}" />
					<var name="test.app.server.classes.portal.dir" value="${app.server.classes.portal.dir}" />
					<var name="test.app.server.deploy.dir" value="${app.server.deploy.dir}" />
					<var name="test.app.server.dir" value="${app.server.dir}" />
					<var name="test.app.server.parent.dir" value="${app.server.parent.dir}" />
				 </then>
				 <else>
					<antelope:stringutil property="test.app.server.bin.dir" string="@{app.server.bin.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.number}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.classes.portal.dir" string="${app.server.classes.portal.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.number}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.deploy.dir" string="${app.server.deploy.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.number}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.dir" string="${app.server.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.number}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.parent.dir" string="${app.server.parent.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.number}$2" />
					</antelope:stringutil>
				 </else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-app-server">
		<attribute default="0" name="app.server.bundle.number" />

		<sequential>
			<if>
				<equals arg1="${tcat.enabled}" arg2="true" />
				<then>
					<start-app-server-cmd
						app.server.bin.dir="${app.server.tcat.admin.bin.dir}"
						app.server.bundle.number="@{app.server.bundle.number}"
					/>

					<start-app-server-cmd
						app.server.bin.dir="${app.server.tcat.agent.bin.dir}"
						app.server.bundle.number="@{app.server.bundle.number}"
					/>
				</then>
				<else>
					<start-app-server-cmd
						app.server.bundle.number="@{app.server.bundle.number}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-app-server-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.number" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.number="@{app.server.bundle.number}"
			/>

			<if>
				<equals arg1="${app.server.type}" arg2="jboss" />
				<then>
					<echo file="${test.app.server.deploy.dir}/ROOT.war.dodeploy"></echo>
				</then>
			</if>

			<if>
				<equals arg1="${test.ant.launched.by.selenium}" arg2="true" />
				<then>
					<exec dir="${test.app.server.bin.dir}" executable="${app.server.start.executable}" resolveexecutable="true">
						<arg line="${app.server.start.executable.arg.line}" />
					</exec>
				</then>
				<else>
					<parallel>
						<daemons>
							<exec dir="${test.app.server.bin.dir}" executable="${app.server.start.executable}" resolveexecutable="true">
								<arg line="${app.server.start.executable.arg.line}" />
							</exec>
						</daemons>
					</parallel>
				</else>
			</if>

			<if>
				<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
				<then>
					<waitfor maxwait="5" maxwaitunit="minute">
						<http url="http://localhost:${test.app.server.leading.port.number}180/console" />
					</waitfor>
				</then>
				<elseif>
					<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.agent.bin.dir}" />
					<then>
						<waitfor maxwait="1" maxwaitunit="minute">
							<http url="http://localhost:${test.app.server.leading.port.number}080" />
						</waitfor>
					</then>
				</elseif>
				<else>
					<waitfor maxwait="5" maxwaitunit="minute">
						<and>
							<available file="${test.app.server.parent.dir}/logs" />
							<http url="http://localhost:${test.app.server.leading.port.number}080/web/guest" />
						</and>
					</waitfor>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server">
		<attribute default="0" name="app.server.bundle.number" />

		<sequential>
			<if>
				<equals arg1="${tcat.enabled}" arg2="true" />
				<then>
					<stop-app-server-cmd
						app.server.bin.dir="${app.server.tcat.admin.bin.dir}"
						app.server.bundle.number="@{app.server.bundle.number}"
					/>

					<stop-app-server-cmd
						app.server.bin.dir="${app.server.tcat.agent.bin.dir}"
						app.server.bundle.number="@{app.server.bundle.number}"
					/>
				</then>
				<else>
					<stop-app-server-cmd
						app.server.bundle.number="@{app.server.bundle.number}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.number" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.number="@{app.server.bundle.number}"
			/>

			<antcall target="clean-up-logs" />

			<record action="start" name="log" />

			<exec dir="${test.app.server.bin.dir}" executable="${app.server.stop.executable}" resolveexecutable="true">
				<arg line="${app.server.stop.executable.arg.line}" />
			</exec>

			<if>
				<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.admin.bin.dir}" />
				<then>
					<waitfor maxwait="1" maxwaitunit="minute">
						<not>
							<http url="http://localhost:${test.app.server.leading.port.number}180/console" />
						</not>
					</waitfor>
				</then>
				<elseif>
					<equals arg1="@{app.server.bin.dir}" arg2="${app.server.tcat.agent.bin.dir}" />
					<then>
						<waitfor maxwait="1" maxwaitunit="minute">
							<not>
								<http url="http://localhost:${test.app.server.leading.port.number}080" />
							</not>
						</waitfor>
					</then>
				</elseif>
				<else>
					<waitfor maxwait="1" maxwaitunit="minute">
						<not>
							<http url="http://localhost:${test.app.server.leading.port.number}080/web/guest" />
						</not>
					</waitfor>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="build-sql-file">
		<if>
			<isset property="sql.legacy.url" />
			<then>
				<delete dir="sql/legacy" failonerror="false" />

				<tstamp>
					<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
				</tstamp>

				<get
					dest="${tstamp.value}.zip"
					src="${sql.legacy.url}"
				/>

				<unzip
					dest="sql"
					src="${tstamp.value}.zip"
				/>

				<delete file="${tstamp.value}.zip" />
			</then>
			<else>
				<if>
					<not>
						<isset property="sql.legacy.zip" />
					</not>
					<then>
						<fail>Please set "sql.legacy.zip" in test.properties to point to the legacy SQL ZIP file.</fail>
					</then>
				</if>

				<if>
					<not>
						<and>
							<available file="sql/legacy" />
							<uptodate
								srcfile="${sql.legacy.zip}"
								targetfile="sql/legacy"
							/>
						</and>
					</not>
					<then>
						<delete dir="sql/legacy" failonerror="false" />

						<unzip src="${sql.legacy.zip}" dest="sql" />

						<touch>
							<fileset dir="sql/legacy" />
						</touch>
					</then>
				</if>
			</else>
		</if>

		<if>
			<not>
				<equals arg1="${database.type}" arg2="hsql" />
			</not>
			<then>
				<if>
					<and>
						<equals arg1="${database.type}" arg2="mysql" />
						<equals arg1="${database.sharding}" arg2="true" />
					</and>
					<then>
						<echo file="create.sql">
drop database if exists lportal;
drop database if exists lportal1;
drop database if exists lportal2;
create database lportal character set utf8;
create database lportal1 character set utf8;
create database lportal2 character set utf8;</echo>
					</then>
					<else>
						<if>
							<or>
								<not>
									<isset property="sql.dir" />
								</not>
								<not>
									<isset property="sql.file" />
								</not>
							</or>
							<then>
								<property name="sql.dir" value="sql\create${database.create.suffix}\" />
								<property name="sql.file" value="create${database.create.suffix}-${database.type}.sql" />
							</then>
						</if>

						<copy file="${sql.dir}${sql.file}" tofile="create.sql" />
					</else>
				</if>

				<if>
					<not>
						<equals arg1="${database.sql-replacement.drop-schema.token}" arg2="" />
					</not>
					<then>
						<replace file="create.sql">
							<replacefilter token="${database.sql-replacement.drop-schema.token}" value="${database.sql-replacement.drop-schema.value}" />
						</replace>
					</then>
				</if>

				<if>
					<not>
						<equals arg1="${database.sql-replacement.create-schema.token}" arg2="" />
					</not>
					<then>
						<replace file="create.sql">
							<replacefilter token="${database.sql-replacement.create-schema.token}" value="${database.sql-replacement.create-schema.value}" />
						</replace>
					</then>
				</if>

				<if>
					<not>
						<equals arg1="${database.sql-replacement.use-schema.token}" arg2="" />
					</not>
					<then>
						<replace file="create.sql">
							<replacefilter token="${database.sql-replacement.use-schema.token}" value="${database.sql-replacement.use-schema.value}" />
						</replace>
					</then>
				</if>

				<if>
					<not>
						<equals arg1="${database.sql-replacement.create-schema-secondary.token}" arg2="" />
					</not>
					<then>
						<replace file="create.sql">
							<replacefilter token="${database.sql-replacement.create-schema-secondary.token}" value="${database.sql-replacement.create-schema-secondary.value}" />
						</replace>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="build-test-results-xml">
		<record-env-app-server />
		<record-env-browser />
		<record-env-database />
		<record-env-java-jdk />
		<record-env-liferay-portal />
		<record-env-operating-system />
		<record-testray-components />
		<record-testray-project-name />

		<property name="test.case.properties">
			<![CDATA[
				<properties>
					<property name="testray.component.names" value="${testray.component.names}" />
					<property name="testray.main.component.name" value="${testray.main.component.name}" />
					<property name="testray.testcase.description" value="${testray.testcase.description}" />
					<property name="testray.testcase.name" value="${testray.testcase.name}" />
					<property name="testray.testcase.priority" value="${testray.testcase.priority}" />
					<property name="testray.testcase.product.edition" value="${testray.testcase.product.edition}" />
				</properties>
			]]>
		</property>

		<property name="test.suite.properties">
			<![CDATA[
				<environments>
					<environment type="Application Server" option="${env.option.app.server}" />
					<environment type="Browser" option="${env.option.browser}" />
					<environment type="Database" option="${env.option.database}" />
					<environment type="Java JDK" option="${env.option.java.jdk}" />
					<environment type="Operating System" option="${env.option.operating.system}" />
				</environments>
				<properties>
					<property name="app.server.type" value="${app.server.type}" />
					<property name="app.server.version" value="${app.server.version}" />
					<property name="browser.type" value="${browser.type}" />
					<property name="browser.version" value="${browser.version}" />
					<property name="database.type" value="${database.type}" />
					<property name="database.version" value="${database.version}" />
					<property name="liferay.plugins.git.id" value="${liferay.plugins.git.id}" />
					<property name="liferay.portal.branch" value="${liferay.portal.branch}" />
					<property name="liferay.portal.bundle" value="${liferay.portal.bundle}" />
					<property name="liferay.portal.git.id" value="${liferay.portal.git.id}" />
					<property name="java.jdk.type" value="${java.jdk.type}" />
					<property name="java.jdk.version" value="${java.jdk.version}" />
					<property name="operating.system.type" value="${operating.system.type}" />
					<property name="operating.system.version" value="${operating.system.version}" />
					<property name="testray.build.name" value="${testray.build.name}" />
					<property name="testray.build.type" value="${testray.build.type}" />
					<property name="testray.product.type" value="${testray.product.type}" />
					<property name="testray.product.version" value="${testray.product.version}" />
					<property name="testray.project.name" value="${testray.project.name}" />
				</properties>
			]]>
		</property>

		<for param="file.name">
			<path>
				<fileset
					dir="portal-web/test-results/functional"
					includes="TEST-*.xml"
				/>
			</path>
			<sequential>
				<var name="file.name" value="@{file.name}" />

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="\s*\&lt;/?environment[^\n^\r]*[\n\r]"
					replace=""
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="\s*\&lt;/?propert[^\n^\r]*[\n\r]"
					replace=""
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="(\s*\&lt;testcase[^/]*)/&gt;"
					replace="\1&gt;${line.separator}&lt;/testcase&gt;"
				/>

				<replaceregexp
					file="@{file.name}"
					match="&lt;testcase[^&gt;]*&gt;"
					replace="${test.suite.properties}\0${test.case.properties}"
				/>

				<replaceregexp
					file="@{file.name}"
					flags="g"
					match="\&gt;[\n\s]*\&lt;"
					replace="\&gt;${line.separator}\&lt;"
				/>
			</sequential>
		</for>
	</target>

	<target name="check-config">
		<if>
			<not>
				<isset property="app.server.type" />
			</not>
			<then>
				<property name="app.server.type" value="tomcat" />
			</then>
		</if>

		<if>
			<not>
				<or>
					<equals arg1="${app.server.type}" arg2="geronimo" />
					<equals arg1="${app.server.type}" arg2="glassfish" />
					<equals arg1="${app.server.type}" arg2="jboss" />
					<equals arg1="${app.server.type}" arg2="jetty" />
					<equals arg1="${app.server.type}" arg2="jonas" />
					<equals arg1="${app.server.type}" arg2="resin" />
					<equals arg1="${app.server.type}" arg2="tcserver" />
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<equals arg1="${app.server.type}" arg2="weblogic" />
					<equals arg1="${app.server.type}" arg2="websphere" />
				</or>
			</not>
			<then>
				<fail>Please set "app.server.type" to one of the following:${line.separator}geronimo, glassfish, jboss, jetty, jonas, resin, tcserver, tomcat, weblogic, or websphere.</fail>
			</then>
		</if>

		<if>
			<not>
				<isset property="browser.type" />
			</not>
			<then>
				<property name="browser.type" value="firefox" />
			</then>
		</if>

		<if>
			<not>
				<or>
					<equals arg1="${browser.type}" arg2="firefox" />
					<equals arg1="${browser.type}" arg2="googlechrome" />
					<equals arg1="${browser.type}" arg2="ie" />
				</or>
			</not>
			<then>
				<fail>Please set "browser.type" to one of the following:${line.separator}firefox, googlechrome, ie</fail>
			</then>
		</if>

		<if>
			<not>
				<isset property="database.type" />
			</not>
			<then>
				<property name="database.type" value="mysql" />
			</then>
		</if>

		<if>
			<not>
				<or>
					<equals arg1="${database.type}" arg2="db2" />
					<equals arg1="${database.type}" arg2="hsql" />
					<equals arg1="${database.type}" arg2="mysql" />
					<equals arg1="${database.type}" arg2="oracle" />
					<equals arg1="${database.type}" arg2="postgresql" />
					<equals arg1="${database.type}" arg2="sql.server" />
					<equals arg1="${database.type}" arg2="sybase" />
				</or>
			</not>
			<then>
				<fail>Please set "database.type" to one of the following:${line.separator}db2, hsql, mysql, oracle, postgresql, sql.server, sybase</fail>
			</then>
		</if>
	</target>

	<target name="clean-app-server-deploy-dir">
		<delete includeemptydirs="true" failonerror="false">
			<fileset
				dir="${app.server.deploy.dir}"
				excludes=",*.dodeploy,*.rar,*.sar/**,*.xml,.autodeploystatus/**,liferay-portal/**,liferay-portal.war/**,marketplace-portlet/**,portal-compat-hook/**,security/**,root/**,ROOT/**,ROOT.war/**,tunnel-web/**,tunnel-web.war/**"
			/>
		</delete>
	</target>

	<target name="clean-up-android-device">
		<exec executable="/bin/bash" os="${os.unix}">
			<arg value="-c" />
			<arg value="android delete avd -n deviceName" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}">
			<arg value="/c" />
			<arg value="android delete avd -n deviceName" />
		</exec>
	</target>

	<target name="clean-up-bundles">
		<delete file="test.${user.name}.properties" />

		<if>
			<not>
				<isset property="skip.delete-liferay-home" />
			</not>
			<then>
				<delete dir="${liferay.home}/data" />
				<delete dir="${liferay.home}/logs" />
			</then>
		</if>

		<delete includeemptydirs="true">
			<fileset dir="${app.server.parent.dir}" excludes="*.zip" />
		</delete>
	</target>

	<target name="clean-up-java-processes">
		<if>
			<os family="unix" />
			<then>
				<echo file="cleanjava.sh">
					<![CDATA[
						#!/bin/bash

						for i in `ps -o pid,args -e | grep /opt/java/jdk | grep -v ant | grep -v grep | grep -v jenkins | cut -c1-5`
						do
							echo "Killing $i"

							kill -9 $i
						done
					]]>
				</echo>

				<chmod file="cleanjava.sh" perm="a+x" />

				<exec executable="${basedir}/cleanjava.sh" />

				<delete file="cleanjava.sh" />
			</then>
		</if>
	</target>

	<target name="clean-up-logs">
		<delete failonerror="false" file="log" />

		<delete failonerror="false" file="portal-web/test-ant-scripts/log" />
	</target>

	<target name="clean-up-sikuli-temp-files">
		<delete dir="lib/development/libs" />
	</target>

	<target name="clean-up-web-xml">
		<copy file="portal-web/docroot/WEB-INF/web.xml" tofile="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml" overwrite="true" />
	</target>

	<target name="copy-log-file">
		<for param="log.file">
			<path>
				<fileset dir="${liferay.home}/logs">
					<include name="*.log" />
				</fileset>
			</path>
			<sequential>
				<copy file="@{log.file}" tofile="log" overwrite="true" />
			</sequential>
		</for>
	</target>

	<target name="copy-optional-jars">
		<if>
			<equals arg1="${database.type}" arg2="db2" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
					<fileset
						dir="${app.server.lib.global.dir}"
						includes="${jdbc.db2.driver}"
					/>
				</delete>

				<for list="${jdbc.db2.driver}" param="jdbc.driver">
					<sequential>
						<get
							dest="${todir}"
							src="${test.jdbc.drivers.url}/db2/8.1.18/@{jdbc.driver}"
						/>
					</sequential>
				</for>
			</then>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="mysql" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.mysql.driver}" />
					</not>
				</and>
				<then>
					<copy todir="${todir}">
						<fileset
							dir="lib/development"
							includes="${jdbc.mysql.driver}"
						/>
					</copy>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="oracle" />
					<equals arg1="${database.version}" arg2="10" />
				</and>
				<then>
					<delete includeemptydirs="true" failonerror="false">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.oracle.driver}"
						/>
					</delete>

					<get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/oracle/10.2.0.1.0/${jdbc.oracle.driver}"
					/>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="oracle" />
					<equals arg1="${database.version}" arg2="11" />
				</and>
				<then>
					<delete includeemptydirs="true" failonerror="false">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.oracle.driver}"
						/>
					</delete>

					<get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/oracle/11.2.0.1.0/${jdbc.oracle.driver}"
					/>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="postgresql" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.postgresql.driver}" />
					</not>
				</and>
				<then>
					<copy todir="${todir}">
						<fileset
							dir="lib/development"
							includes="${jdbc.postgresql.driver}"
						/>
					</copy>
				</then>
			</elseif>
		</if>
	</target>

	<target name="copy-sikuli-temp-files">
		<if>
			<os family="unix" />
			<then>
				<mkdir dir="lib/development/libs" />

				<copy todir="lib/development/libs">
					<fileset dir="tools/selenium/sikuli/linux" />
				</copy>
			</then>
		</if>
	</target>

	<target name="evaluate-logs">
		<if>
			<available file="portal-web/test-ant-scripts/log" />
			<then>
				<move file="portal-web/test-ant-scripts/log" todir="." />
			</then>
		</if>

		<if>
			<isset property="print.logs" />
			<then>
				<loadfile property="log.content" srcfile="log">
					<filterchain>
						<expandproperties />
					</filterchain>
				</loadfile>

				<echo>Displaying Logs:</echo>
				<echo></echo>
				<echo>${log.content}</echo>
			</then>
		</if>

		<if>
			<isset property="test.evaluate.logs" />
			<then>
				<var name="test.class" unset="true" />

				<ant dir="portal-web" target="test-class">
					<property name="test.class" value="EvaluateLogTestSuite" />
				</ant>
			</then>
		</if>

		<antcall target="clean-up-logs" />
	</target>

	<target name="generate-changelog" depends="record-git-commit-plugins,record-git-commit-portal">
		<tstamp>
			<format property="build.tstamp.value" pattern="EEEE, d MMMM yyyy, hh:mm aa" />
		</tstamp>

		<property
			name="changelog.dir"
			value="${env.JENKINS_HOME}/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
		/>

		<math
			datatype="int"
			operand1="${env.BUILD_NUMBER}"
			operand2="1"
			operation="-"
			result="previous.build.number"
		/>

		<property
			name="previous.changelog.dir"
			value="${env.JENKINS_HOME}/jobs/${env.JOB_NAME}/builds/${previous.build.number}"
		/>

		<copy
			file="git-commit-plugins"
			todir="${changelog.dir}"
		/>

		<copy
			file="git-commit-portal"
			todir="${changelog.dir}"
		/>

		<if>
			<and>
				<available file="${previous.changelog.dir}/git-build-log.html" />
				<available file="${previous.changelog.dir}/git-commit-plugins" />
				<available file="${previous.changelog.dir}/git-commit-portal" />
			</and>
			<then>
				<loadfile
					property="previous.git.commit.plugins.rev.parse"
					srcfile="${previous.changelog.dir}/git-commit-plugins"
				/>

				<loadfile
					property="previous.git.commit.portal.rev.parse"
					srcfile="${previous.changelog.dir}/git-commit-portal"
				/>

				<copy
					file="${previous.changelog.dir}/git-build-log.html"
					tofile="${changelog.dir}/git-build-log.html"
				/>

				<if>
					<equals arg1="${git.commit.plugins.rev.parse}" arg2="${previous.git.commit.plugins.rev.parse}" />
					<then>
						<property
							name="git.log.content.plugins"
							value="No Changes"
						/>
					</then>
					<else>
						<execute dir="${lp.plugins.dir}">
							<![CDATA[git log --pretty=format:'<a href="https://github.com/liferay/liferay-plugins-ee/commit/'%H'" target="_blank">'%H'</a>''<br />'%an'<br />'%s'<br /><br />' ${previous.git.commit.plugins.rev.parse}...${git.commit.plugins.rev.parse} > ${changelog.dir}/git.log]]>
						</execute>

						<loadfile
							property="git.log.content.plugins"
							srcfile="${changelog.dir}/git.log"
						/>
					</else>
				</if>

				<if>
					<equals arg1="${git.commit.portal.rev.parse}" arg2="${previous.git.commit.portal.rev.parse}" />
					<then>
						<property
							name="git.log.content.portal"
							value="No Changes"
						/>
					</then>
					<else>
						<execute dir="${project.dir}">
							<![CDATA[git log --pretty=format:'<a href="https://github.com/liferay/liferay-portal-ee/commit/'%H'" target="_blank">'%H'</a>''<br />'%an'<br />'%s'<br /><br />' ${previous.git.commit.portal.rev.parse}...${git.commit.portal.rev.parse} > ${changelog.dir}/git.log]]>
						</execute>

						<loadfile
							property="git.log.content.portal"
							srcfile="${changelog.dir}/git.log"
						/>
					</else>
				</if>

				<replace file="${changelog.dir}/git-build-log.html">
					<replacetoken><![CDATA[<!-- NEXT -->]]></replacetoken>
					<replacevalue expandproperties="true"><![CDATA[<!-- NEXT -->

		<div id="updateWrapper">
			<div class="divider"></div>
			<div id="update">
				<h2>
					Build #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${build.tstamp.value}<br />
					Portal: ${git.commit.portal.rev.parse}<br />
					Plugins: ${git.commit.plugins.rev.parse}
				</h2>

				<div id="portal">
					<h4>
						Portal Git Log:
					</h4>
					<p>
						${git.log.content.portal}
					</p>
				</div>

				<div id="plugins">
					<h4>
						Plugins Git Log:
					</h4>
					<p>
						${git.log.content.plugins}
					</p>
				</div>
			</div>
		</div>
				]]></replacevalue>
				</replace>
			</then>
			<else>
				<echo file="${changelog.dir}/git-build-log.html"><![CDATA[<!DOCTYPE html>
<html>
	<head>
		<title>Git Build Log</title>
		<style>
			body {
				font-family: Helvetica, Arial, sans-serif;
				margin: 5%;
				padding: 0;
			}

			h2 {
				font-size: 17px;
				letter-spacing: 0.04em;
			}

			h4 {
				border-left: 1px solid #BABABA;
				color: #555;
				font-size: 20px;
				font-weight: 100;
				line-height: 30px;
				margin: 20px 20px 0;
				padding: 0 0 20px 10px;
			}

			p {
				font-size: 12px;
			}

			#updateWrapper:after {
				clear: both;
				content: "";
				display: table;
			}

			#update h2 {
				background-color: #4D9CD1;
				color: #FFF;
				padding: 15px;
			}

			.divider {
				background-color: #999;
				box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				-moz-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				-webkit-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				height: 1px;
				margin: 15px 0 25px;
				width: 100%;
			}

			#plugins {
				float: right;
			}

			#portal {
				float: left;
			}

			#plugins, #portal {
				width: 48%;
			}

			#plugins p, #portal p {
				border-radius: 8px;
				-moz-border-radius: 8px;
				-webkit-border-radius: 8px;
				box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				-moz-box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				-webkit-box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				margin-top: 0;
				padding: 10px;
				word-wrap: break-word;
			}

			#plugins a, #portal a {
				color: #3D7CA6;
				font-family: Monaco, "Liberation Mono", Courier, monospace;
				font-weight: bold;
				text-decoration: none;
			}

			#plugins a:hover, #portal a:hover {
				text-decoration: underline;
			}
		</style>
	</head>
	<body>

		<!-- NEXT -->

		<div id="updateWrapper">
			<div class="divider"></div>

			<br />

			<div id="update">
				<h2>
					Initial Commit<br />
					Build #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${build.tstamp.value}<br />
					Portal: ${git.commit.portal.rev.parse}<br />
					Plugins: ${git.commit.plugins.rev.parse}
				</h2>
			</div>
		</div>
	</body>
</html>
				]]></echo>
			</else>
		</if>

		<copy
			file="${changelog.dir}/git-build-log.html"
			todir="${basedir}"
		/>

		<copy
			file="${changelog.dir}/git-build-log.html"
			todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
		/>
	</target>

	<target name="generate-test-properties" depends="check-config">
		<property file="${project.dir}/test.generated.properties" />

		<var name="mobile.device.type" unset="true" />

		<if>
			<contains string="${test.class}" substring="#" />
			<then>
				<antcallback return="test.method.name,test.simple.class.name" target="parse-test-class" />
			</then>
			<elseif>
				<isset property="test.class" />
				<then>
					<antcallback return="test.simple.class.name" target="parse-test-class" />

					<property name="test.method.name" value="[A-Za-z]*" />
				</then>
			</elseif>
		</if>

		<xmlproperty
			file="portal-web/test-config/database.xml"
			keeproot="true"
		/>

		<echoproperties destfile="${basedir}/test.run.properties">
			<propertyset>
				<propertyref prefix="database.${database.type}" />
				<propertyref prefix="${test.simple.class.name}." />
			</propertyset>
		</echoproperties>

		<replaceregexp
			file="${basedir}/test.run.properties"
			flags="g"
			match="database\.${database.type}"
			replace="database"
		/>

		<if>
			<isset property="test.class" />
			<then>
				<replaceregexp
					file="${basedir}/test.run.properties"
					flags="g"
					match="${test.simple.class.name}\.(${test.method.name}|all)\."
					replace=""
				/>

				<replaceregexp
					file="${basedir}/test.run.properties"
					flags="g"
					match="${test.simple.class.name}.*"
					replace=""
				/>
			</then>
		</if>

		<property file="${basedir}/test.run.properties" />

		<loadfile property="test.properties.expanded" srcfile="${basedir}/test.run.properties">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>

		<echo file="${basedir}/test.run.properties">${test.properties.expanded}</echo>

		<property file="${project.dir}/test.${user.name}.properties" />
		<property file="${project.dir}/test.${env.COMPUTERNAME}.properties" />
		<property file="${project.dir}/test.${env.HOST}.properties" />
		<property file="${project.dir}/test.${env.HOSTNAME}.properties" />
		<property file="${project.dir}/test.properties" />

		<propertycopy from="mobile.device.resolution[${mobile.device.type}]" name="mobile.device.resolution" />
		<propertycopy from="mobile.device.user.agent[${mobile.device.type}]" name="mobile.device.user.agent" />
	</target>

	<target name="kill-spi">
		<if>
			<os family="unix" />
			<then>
				<execute>
					kill -9 pgrep -n java
				</execute>
			</then>
			<else>
				<execute>
					taskkill.exe /F /FI "imagename eq java.exe" /FI "memusage lt 700000" /FI "memusage gt 600000"
				</execute>
			</else>
		</if>
	</target>

	<target name="merge-jenkins-test-results">
		<if>
			<isset property="jenkins.shared.results.dir" />
			<then>
				<copy todir="${env.JENKINS_HOME}/userContent/jobs">
					<fileset dir="${jenkins.shared.results.dir}/${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_NUMBER}" />
				</copy>
			</then>
		</if>

		<property name="jenkins.test.results.dir" value="${env.JENKINS_HOME}/userContent/jobs/${env.BUILD_FLOW_JOB_NAME}/builds/${env.BUILD_FLOW_BUILD_NUMBER}/test-results" />

		<property name="jenkins.results.xml.suite.file" value="${jenkins.test.results.dir}/test-suite/TESTS-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}.xml" />

		<first id="first">
			<fileset dir="${jenkins.test.results.dir}" includes="*.xml" />
		</first>

		<loadfile property="jenkins.results.xml.suite.file.header" srcfile="${toString:first}" />

		<propertyregex
			input="${jenkins.results.xml.suite.file.header}"
			override="true"
			property="jenkins.results.xml.suite.file.header"
			regexp="&lt;testcase[\s\S.]*"
			replace=""
		/>

		<propertyregex
			input="${jenkins.results.xml.suite.file.header}"
			override="true"
			property="jenkins.results.xml.suite.file.header"
			regexp="&lt;testsuite.*\n"
			replace="&lt;testsuite&gt;${line.separator}"
		/>

		<echo file="${jenkins.results.xml.suite.file}">${jenkins.results.xml.suite.file.header}</echo>

		<for param="jenkins.results.xml.file">
			<path>
				<fileset dir="${jenkins.test.results.dir}">
					<include name="*.xml" />
				</fileset>
			</path>
			<sequential>
				<echo>Merging @{jenkins.results.xml.file}.</echo>

				<var name="jenkins.results.xml.suite.file.body" unset="true" />

				<loadfile property="jenkins.results.xml.suite.file.body" srcfile="@{jenkins.results.xml.file}" />

				<propertyregex
					input="${jenkins.results.xml.suite.file.body}"
					override="true"
					property="jenkins.results.xml.suite.file.body"
					regexp="&lt;\?xml[\s\S.]*&lt;testcase"
					replace="&lt;testcase"
				/>

				<propertyregex
					input="${jenkins.results.xml.suite.file.body}"
					override="true"
					property="jenkins.results.xml.suite.file.body"
					regexp="&lt;/testcase&gt;[\s\S.]*"
					replace="&lt;/testcase&gt;${line.separator}"
				/>

				<echo append="true" file="${jenkins.results.xml.suite.file}">${jenkins.results.xml.suite.file.body}</echo>
			</sequential>
		</for>

		<echo append="true" file="${jenkins.results.xml.suite.file}">&lt;/testsuite&gt;</echo>

		<copy file="${jenkins.results.xml.suite.file}" tofile="${env.WORKSPACE}/TEST-ConsolidatedResults.xml" />

		<if>
			<isset property="jenkins.testray.results.dir" />
			<then>
				<copy file="${jenkins.results.xml.suite.file}" todir="${jenkins.testray.results.dir}" />
			</then>
		</if>
	</target>

	<target name="merge-test-results">
		<mkdir dir="test-results" />

		<junitreport todir="test-results">
			<fileset dir="portal-impl/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="portal-service/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="portal-web/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<fileset dir="util-java/test-results" erroronmissingdir="false">
				<include name="**/TEST-*.xml" />
			</fileset>
			<report format="frames" todir="test-results/html" />
		</junitreport>

		<echo message="A report with all the test results can be found at test-results/html/index.html." />
	</target>

	<target name="parse-test-class">
		<script classpathref="project.classpath" language="beanshell">
			String testClass = project.getProperty("test.class");

			String testSimpleClassName = testClass;

			if (testClass.contains("#")) {
				int x = testClass.indexOf("#");

				String testMethodName = testClass.substring(x + 1);

				if (!testMethodName.startsWith("test")) {
					testMethodName = "test" + testMethodName;
				}

				project.setProperty("test.method.name", testMethodName);

				testSimpleClassName =  testClass.substring(0, x);
			}

			if (!testSimpleClassName.endsWith("TestCase")) {
				testSimpleClassName = testSimpleClassName + "TestCase";
			}

			project.setProperty("test.simple.class.name", testSimpleClassName);
		</script>

		<if>
			<not>
				<isset property="test.basedir" />
			</not>
			<then>
				<property name="test.basedir" value="${basedir.unix}/portal-web" />
			</then>
		</if>
	</target>

	<target name="prepare-android-device">
		<exec executable="/bin/bash" os="${os.unix}">
			<arg value="-c" />
			<arg value="echo no | android create avd -n deviceName -t android-19" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}">
			<arg value="/c" />
			<arg value="echo no | android create avd -n deviceName -t android-19" />
		</exec>

		<echo file="${user.home}/.android/avd/deviceName.avd/config.ini" append="true">
hw.keyboard=yes
		</echo>
	</target>

	<target name="prepare-portal-ext-properties" depends="generate-test-properties">
		<prepare-fix-pack-bundle />

		<echo file="portal-impl/src/portal-ext.properties">liferay.home=${liferay.home}

plugin.notifications.enabled=false

jdbc.default.jndi.name=

jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}

captcha.max.challenges=-1

browser.launcher.url=

index.on.startup=true

setup.wizard.enabled=false

mail.session.jndi.name=

axis.servlet.hosts.allowed=

tunnel.servlet.hosts.allowed=</echo>

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

cluster.link.enabled=true

cluster.link.channel.system.properties=\
	#
	# Common
	#
	\
	jgroups.bind_addr:${cluster.link.bind.addr["cluster-link-udp"]},\
	jgroups.bind_interface:127.0.0.1,\
	\
	#
	# Multicast
	#
	\
	jgroups.mping.mcast_addr:${multicast.group.address["cluster-link-mping"]},\
	jgroups.mping.mcast_port:${multicast.group.port["cluster-link-mping"]},\
	jgroups.mping.ip_ttl:8

web.server.display.node=true</echo>
			</then>
		</if>

		<if>
			<equals arg1="${database.type}" arg2="db2" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

hibernate.dialect=com.liferay.portal.dao.orm.hibernate.DB2Dialect
custom.sql.function.isnull=CAST(? AS VARCHAR(32672)) IS NULL
custom.sql.function.isnotnull=CAST(? AS VARCHAR(32672)) IS NOT NULL</echo>
			</then>
			<elseif>
				<equals arg1="${database.type}" arg2="oracle" />
				<then>
					<echo file="portal-impl/src/portal-ext.properties" append="true">

jdbc.default.acquireIncrement=1
jdbc.default.maxPoolSize=5
jdbc.default.minPoolSize=1
jdbc.default.numHelperThreads=1</echo>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${database.type}" arg2="sybase" />
				<then>
					<echo file="portal-impl/src/portal-ext.properties" append="true">

hibernate.dialect=org.hibernate.dialect.SybaseDialect
custom.sql.function.isnull=CONVERT(VARCHAR,?) IS NULL
custom.sql.function.isnotnull=CONVERT(VARCHAR,?) IS NOT NULL</echo>
				</then>
			</elseif>
		</if>

		<if>
			<isset property="custom.properties" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

${custom.properties}</echo>
			</then>
		</if>

		<if>
			<and>
				<equals arg1="${database.type}" arg2="mysql" />
				<equals arg1="${database.sharding}" arg2="true" />
			</and>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">
					<![CDATA[
						jdbc.one.driverClassName=com.mysql.jdbc.Driver
						jdbc.one.url=jdbc:mysql://${database.host}/lportal1?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false
						jdbc.one.username=${database.username}
						jdbc.one.password=${database.password}

						jdbc.two.driverClassName=com.mysql.jdbc.Driver
						jdbc.two.url=jdbc:mysql://${database.host}/lportal2?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false
						jdbc.two.username=${database.username}
						jdbc.two.password=${database.password}

						shard.default.name=default
						shard.selector=com.liferay.portal.dao.shard.ManualShardSelector

						spring.configs=\
							META-INF/base-spring.xml,\
							\
							META-INF/hibernate-spring.xml,\
							META-INF/infrastructure-spring.xml,\
							META-INF/management-spring.xml,\
							\
							META-INF/util-spring.xml,\
							\
							META-INF/executor-spring.xml,\
							\
							META-INF/audit-spring.xml,\
							META-INF/cluster-spring.xml,\
							META-INF/comment-spring.xml,\
							META-INF/editor-spring.xml,\
							META-INF/jcr-spring.xml,\
							META-INF/ldap-spring.xml,\
							META-INF/messaging-core-spring.xml,\
							META-INF/messaging-misc-spring.xml,\
							META-INF/mobile-device-spring.xml,\
							META-INF/notifications-spring.xml,\
							META-INF/poller-spring.xml,\
							META-INF/rules-spring.xml,\
							META-INF/scheduler-spring.xml,\
							META-INF/search-spring.xml,\
							META-INF/workflow-spring.xml,\
							\
							META-INF/counter-spring.xml,\
							META-INF/mail-spring.xml,\
							META-INF/portal-spring.xml,\
							META-INF/portlet-container-spring.xml,\
							META-INF/staging-spring.xml,\
							META-INF/virtual-layouts-spring.xml,\
							\
							META-INF/monitoring-spring.xml,\
							\
							#META-INF/dynamic-data-source-spring.xml,\
							META-INF/shard-data-source-spring.xml,\
							\
							classpath*:META-INF/ext-spring.xml
					]]>
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${java.security}" arg2="true" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

portal.security.manager.strategy=liferay</echo>
			</then>
		</if>

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

virtual.hosts.valid.hosts=localhost,127.0.0.1,${ip.address}</echo>
			</then>
		</if>

		<propertyregex
			input="${portal.version}"
			property="portal.major.version"
			regexp="(\d+\.\d+)\.\d+"
			select="\1"
		/>

		<if>
			<equals arg1="${portal.major.version}" arg2="5.1" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-5.1.properties
##

theme.portlet.sharing.default=true

organizations.country.required[regular]=true
organizations.assignment.auto=true
organizations.assignment.strict=false
organizations.membership.strict=true

lucene.dir=$${liferay.home}/lucene/

jcr.jackrabbit.repository.root=$${liferay.home}/jackrabbit

discussion.thread.view=combination

dl.hook.impl=com.liferay.documentlibrary.util.JCRHook

dl.hook.file.system.root.dir=$${liferay.home}/document_library</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-5.2.properties
##

users.image.max.height=0
users.image.max.width=0

locale.prepend.friendly.url.style=0

auth.token.check.enabled=false

#permissions.user.check.algorithm=5
#permissions.view.dynamic.inheritance=false

image.hook.impl=com.liferay.portal.image.DatabaseHook

cdn.host.http=$${cdn.host}
cdn.host.https=$${cdn.host}

virtual.hosts.default.community.name=

breadcrumb.show.guest.group=false
breadcrumb.show.parent.groups=false

wiki.page.titles.regexp=([^/\\\\\\[\\]%&amp;?@]+)
wiki.page.titles.remove.regexp=([/\\\\\\[\\]%&amp;?@]+)</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-6.0.properties
##

users.last.name.required=true

portal.security.manager.strategy=liferay

layout.types=portlet,panel,embedded,article,url,link_to_layout

editor.wysiwyg.portal-web.docroot.html.portlet.message_boards.edit_message.bb_code.jsp=bbcode

setup.wizard.enabled=false

discussion.subscribe.by.default=false

#dl.store.cmis.credentials.username=${dl.hook.cmis.credentials.username}
#dl.store.cmis.credentials.password=${dl.hook.cmis.credentials.password}
#dl.store.cmis.repository.url=${dl.hook.cmis.repository.url}
#dl.store.cmis.system.root.dir=${dl.hook.cmis.system.root.dir}

dl.store.file.system.root.dir=${liferay.home}/data/document_library

dl.store.jcr.fetch.delay=500
dl.store.jcr.fetch.max.failures=5
dl.store.jcr.move.version.labels=false

dl.store.s3.access.key=
dl.store.s3.secret.key=
dl.store.s3.bucket.name=

message.boards.subscribe.by.default=false</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
				<equals arg1="${portal.major.version}" arg2="6.1" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-6.1.properties
##

hibernate.cache.use_query_cache=true
hibernate.cache.use_second_level_cache=true

locale.prepend.friendly.url.style=1

passwords.encryption.algorithm.legacy=SHA

mobile.device.styling.wap.enabled=true

dl.char.blacklist=\\\\,//,:,*,?,\",&lt;,&gt;,|,[,],../,/..

dl.char.last.blacklist=

dl.name.blacklist=

journal.articles.search.with.index=false</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
				<equals arg1="${portal.major.version}" arg2="6.1" />
				<equals arg1="${portal.major.version}" arg2="6.2" />
			</or>
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

##
## From portal-legacy-6.2.properties
##

users.image.check.token=false</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-6.1.0.27" />
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-7.0.0.7" />
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-8.0.0.0" />
			</or>
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="liferay.home=${liferay.home}"
					value="liferay.home=C:/WINDOWS/system32/config/systemprofile/liferay"
				/>

				<echo file="portal-impl/src/portal-ext.properties" append="true">

auto.deploy.dest.dir=C:/WINDOWS/system32/config/systemprofile/liferay/websphere-deploy</echo>
			</then>
		</if>

		<if>
			<isset property="set.permission.algorithm.5" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="#permissions.user.check.algorithm=5" value="permissions.user.check.algorithm=5" />
				<replace file="portal-impl/src/portal-ext.properties" token="#permissions.view.dynamic.inheritance=false" value="permissions.view.dynamic.inheritance=false" />
			</then>
		</if>

		<if>
			<isset property="set.permission.algorithm.6" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="permissions.user.check.algorithm=5" value="" />
				<replace file="portal-impl/src/portal-ext.properties" token="permissions.view.dynamic.inheritance=false" value="" />
			</then>
		</if>

		<if>
			<equals arg1="${setup.wizard.enabled}" arg2="true" />
			<then>
				<replace file="portal-impl/src/portal-ext.properties" token="setup.wizard.enabled=false" value="" />
			</then>
		</if>

		<if>
			<equals arg1="${tck.url}" arg2="true" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties" append="true">

tck.url=true</echo>
			</then>
		</if>

		<if>
			<contains string="${app.server.portal.dir}" substring="liferay-portal.war" />
			<then>
				<property name="test.build.liferay.portal.zip.file.name" value="${app.server.portal.dir}" />
			</then>
			<elseif>
				<equals arg1="${tcat.enabled}" arg2="true" />
				<then>
					<property name="test.build.liferay.portal.zip.file.name" value="${app.server.tcat.admin.dir}/tcat_init/webapps/${lp.version.dtd}/ROOT.war" />
				</then>
			</elseif>
		</if>

		<if>
			<isset property="test.build.liferay.portal.zip.file.name" />
			<then>
				<tstamp>
					<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
				</tstamp>

				<mkdir dir="${tstamp.value}" />

				<unzip
					dest="${tstamp.value}"
					src="${test.build.liferay.portal.zip.file.name}"
				/>

				<copy
					file="portal-impl/src/portal-ext.properties"
					tofile="${tstamp.value}/WEB-INF/classes/portal-ext.properties"
				/>

				<zip
					basedir="${tstamp.value}"
					destfile="${test.build.liferay.portal.zip.file.name}"
					update="yes"
				/>

				<delete dir="${tstamp.value}" />
			</then>
			<else>
				<copy
					file="portal-impl/src/portal-ext.properties"
					tofile="${app.server.classes.portal.dir}/portal-ext.properties"
				/>
			</else>
		</if>
	</target>

	<target name="prepare-portal-properties">
		<execute>
			<![CDATA[git checkout -- portal-impl/src/portal.properties]]>
		</execute>

		<replace file="portal-impl/src/portal.properties">
			<replacefilter
				token="#upgrade.processes="
				value="upgrade.processes="
			/>
			<replacefilter
				token="#com.liferay.portal.upgrade.UpgradeProcess_"
				value="com.liferay.portal.upgrade.UpgradeProcess_"
			/>
			<replacefilter
				token="verify.frequency=0"
				value="verify.frequency=1"
			/>
		</replace>
	</target>

	<target name="prepare-selenium" depends="generate-test-properties">
		<delete file="portal-web/test/test-portal-web-ext.properties" />

		<if>
			<isset property="selenium.output.dir" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					output.dir=${selenium.output.dir}
				</echo>
			</then>
			<else>
				<property name="selenium.output.dir" value="H:\\selenium-output\\" />
			</else>
		</if>

		<if>
			<isset property="email.address.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.1=${email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.2=${email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.3=${email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.4" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.address.4=${email.address.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.1" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.1=${email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.2" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.2=${email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.3" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.3=${email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.4" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					email.password.4=${email.password.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="ignore.errors" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					ignore.errors=${ignore.errors}
				</echo>
			</then>
		</if>

		<if>
			<isset property="ignore.errors.delimiter" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					ignore.errors.delimiter=${ignore.errors.delimiter}
				</echo>
			</then>
		</if>

		<if>
			<isset property="liferay.portal.branch" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					liferay.portal.branch=${liferay.portal.branch}
				</echo>
			</then>
		</if>

		<if>
			<isset property="liferay.portal.bundle" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					liferay.portal.bundle=${liferay.portal.bundle}
				</echo>
			</then>
		</if>

		<if>
			<isset property="legacy.theme.ids" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					theme.ids=${legacy.theme.ids}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					mobile.device.enabled=${mobile.device.enabled}
					mobile.device.resolution=${mobile.device.resolution}
					mobile.device.user.agent=${mobile.device.user.agent}
				</echo>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.delete-selenium-output" />
			</not>
			<then>
				<remake-dir dir="${selenium.output.dir}" />
			</then>
		</if>

		<if>
			<equals arg1="${tcat.enabled}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					tcat.admin.repository=${app.server.tcat.admin.dir}/tcat_init/webapps/${lp.version.dtd}
					tcat.enabled=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${tear.down.before.test}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					tear.down.before.test=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.assert.javascript.errors}" arg2="false" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.assert.javascript.errors=false
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.assert.liferay.errors}" arg2="false" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.assert.liferay.errors=false
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.basedir" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.basedir=${test.basedir}
				</echo>
			</then>
			<else>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.basedir=${basedir.unix}/portal-web
				</echo>
			</else>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="firefox" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					browser.type=*chrome
				</echo>
			</then>
			<elseif>
				<equals arg1="${browser.type}" arg2="googlechrome" />
				<then>
					<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
						browser.type=*googlechrome
					</echo>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${browser.type}" arg2="ie" />
				<then>
					<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
						browser.type=*iehta
					</echo>
				</then>
			</elseif>
		</if>

		<if>
			<contains string="${test.class}" substring="#" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					testing.class.method=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.selenium.unit.enabled}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					portal.url=file:///${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/selenium/dependencies/Site.html
				</echo>
			</then>
			<elseif>
				<equals arg1="${mobile.device.enabled}" arg2="true" />
				<then>
					<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
						portal.url=http://${ip.address}:8080
					</echo>
				</then>
			</elseif>
			<elseif>
				<isset property="portal.url" />
				<then>
					<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
						portal.url=${portal.url}
					</echo>
				</then>
			</elseif>
		</if>

		<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
			selenium.executable.dir=${basedir.unix}/tools/selenium/
		</echo>

		<if>
			<equals arg1="${test.selenium.implementation}" arg2="selenium" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					selenium.implementation=com.thoughtworks.selenium.Selenium
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.selenium.logger.enabled}" arg2="false" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					selenium.logger.enabled=false
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.save.screenshot}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					save.screenshot=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.skip.tear.down}" arg2="true" />
			<then>
				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					test.skip.tear.down=true
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-so-plugins">
		<if>
			<equals arg1="${liferay.portal.bundle}" arg2="6.1.20" />
			<then>
				<echo file="${lp.plugins.dir}/build.${user.name}.properties" append="true">

app.server.tomcat.dir=${app.server.parent.dir}/tomcat-7.0.27</echo>
			</then>
		</if>

		<property file="${lp.plugins.dir}/portlets/so-portlet/docroot/WEB-INF/liferay-releng.properties" />

		<property name="plugins.includes" value="so-portlet,${dependent-apps}" />

		<ant dir="${lp.plugins.dir}" target="clean" />

		<ant dir="${lp.plugins.dir}" target="compile" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins" />
	</target>

	<target name="prepare-test-build">
		<antcall target="record-git-commit-portal" inheritAll="false" />

		<antcall target="start" inheritAll="false" />

		<if>
			<matches pattern="http" string="${test.build.bundle.geronimo.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="geronimo" />
					<param name="test.app.server.bin.dir" value="${app.server.geronimo.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.geronimo.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.geronimo}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-geronimo" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.glassfish.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="glassfish" />
					<param name="test.app.server.bin.dir" value="${app.server.glassfish.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.glassfish.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.glassfish}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-glassfish" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.jboss.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="jboss" />
					<param name="test.app.server.bin.dir" value="${app.server.jboss.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.jboss.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jboss}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jboss" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<equals arg1="${test.build.bundle.jbosseap6.0}" arg2="true" />
			<then>
				<ant antfile="build-dist.xml" target="build-dist-jboss-eap-6.0" inheritAll="false" />
			</then>
		</if>

		<if>
			<equals arg1="${test.build.bundle.jbosseap6.1}" arg2="true" />
			<then>
				<ant antfile="build-dist.xml" target="build-dist-jboss-eap-6.1" inheritAll="false" />
			</then>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.jetty.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="jetty" />
					<param name="test.app.server.bin.dir" value="${app.server.jetty.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.jetty.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jetty}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jetty" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.jonas.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="jonas" />
					<param name="test.app.server.bin.dir" value="${app.server.jonas.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.jonas.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.jonas}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-jonas" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.resin.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="resin" />
					<param name="test.app.server.bin.dir" value="${app.server.resin.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.resin.zip.url}" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.resin}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-resin" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<and>
				<equals arg1="${test.build.bundle.tcserver}" arg2="true" />
				<isset property="test.build.portal.war.url" />
			</and>
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="tcserver" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.tcserver}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" target="build-dist-tcserver" inheritAll="false" />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.bundle.tomcat.zip.url}" />
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="tomcat" />
					<param name="test.app.server.bin.dir" value="${app.server.tomcat.bin.dir}" />
					<param name="test.build.bundle.zip.url" value="${test.build.bundle.tomcat.zip.url}" />
				</antcall>
			</then>
			<else>
				<ant antfile="build-dist.xml" target="build-dist-tomcat" inheritAll="false" />
			</else>
		</if>

		<antcall target="prepare-test-build-tomcat-dependents" inheritAll="false" />

		<if>
			<and>
				<equals arg1="${test.build.bundle.weblogic}" arg2="true" />
				<isset property="test.build.portal.war.url" />
			</and>
			<then>
				<antcall target="prepare-test-bundle">
					<param name="app.server.type" value="weblogic" />
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.build.bundle.weblogic}" arg2="true" />
				<then>
					<app-server-properties-update>
						app.server.type=weblogic
					</app-server-properties-update>

					<ant antfile="build-dist.xml" target="unzip-weblogic" inheritAll="false" />

					<antcall target="deploy" inheritAll="false" />

					<app-server-properties-reset />
				</then>
			</elseif>
		</if>

		<if>
			<matches pattern="http" string="${test.build.license.xml.zip.url}" />
			<then>
				<mkdir dir="${liferay.home}/deploy" />

				<get
					dest="${liferay.home}/deploy/license.xml"
					src="${test.build.license.xml.zip.url}"
				/>
			</then>
		</if>

		<if>
			<matches pattern="http" string="${test.build.plugins.war.zip.url}" />
			<then>
				<get
					dest="plugins.war.zip"
					src="${test.build.plugins.war.zip.url}"
				/>

				<unzip
					dest="."
					src="plugins.war.zip"
				/>

				<delete file="plugins.war.zip" />
			</then>
		</if>

		<ant dir="portal-impl" target="build-selenium-new-block" inheritAll="false" />

		<antcall target="compile-test" inheritAll="false" />

		<antcall target="record-test-package-names" inheritAll="false" />
	</target>

	<target name="prepare-test-build-tomcat-dependents">
		<if>
			<equals arg1="${test.build.bundle.tcat}" arg2="true" />
			<then>
				<echo file="${lp.plugins.dir}/build.${user.name}.properties">app.server.tomcat.dir=${app.server.parent.dir}/tomcat-7.0.39

plugins.includes=marketplace-portlet</echo>

				<if>
					<isset property="test.build.portal.war.url" />
					<then>
						<mkdir dir="dist" />

						<get
							dest="dist/liferay-portal-${lp.version}.war"
							src="${test.build.portal.war.url}"
						/>
					</then>
					<else>
						<ant antfile="build-dist.xml" target="zip-portal-war" inheritAll="false" />
					</else>
				</if>

				<ant antfile="build-dist.xml" target="build-dist-tcat" inheritAll="false" />

				<delete dir="dist" />

				<delete file="${lp.plugins.dir}/build.${user.name}.properties" />
			</then>
		</if>
	</target>

	<target name="prepare-test-bundle">
		<if>
			<equals arg1="${app.server.type}" arg2="tcserver" />
			<then>
				<ant antfile="build-dist.xml" target="unzip-tcserver" inheritAll="false" />

				<mkdir dir="dist" />

				<get
					dest="dist/liferay-portal-${lp.version}.war"
					src="${test.build.portal.war.url}"
				/>

				<unzip
					dest="${app.server.tcserver.portal.dir}"
					src="dist/liferay-portal-${lp.version}.war"
				/>

				<delete dir="dist" />

				<get
					dest="liferay-portal-dependencies.zip"
					src="${test.build.portal.dependencies.zip.url}"
				/>

				<unzip
					dest="${app.server.tcserver.lib.global.dir}"
					src="liferay-portal-dependencies.zip"
				>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>

				<delete file="liferay-portal-dependencies.zip" />

				<copy todir="${app.server.tcserver.lib.global.dir}">
					<fileset
						dir="lib/development"
						includes="activation.jar,jms.jar,jta.jar,jutf7.jar,mail.jar,mysql.jar,persistence.jar,script-10.jar"
					/>
				</copy>

				<copy todir="${app.server.tcserver.lib.global.dir}">
					<fileset
						dir="lib/portal"
						includes="ccpp.jar"
					/>
				</copy>
			</then>
			<elseif>
				<equals arg1="${app.server.type}" arg2="weblogic" />
				<then>
					<ant antfile="build-dist.xml" target="unzip-weblogic" inheritAll="false" />

					<mkdir dir="dist" />

					<get
						dest="dist/liferay-portal-${lp.version}.war"
						src="${test.build.portal.war.url}"
					/>

					<unzip
						dest="${app.server.weblogic.portal.dir}"
						src="dist/liferay-portal-${lp.version}.war"
					/>

					<delete dir="dist" />

					<get
						dest="liferay-portal-dependencies.zip"
						src="${test.build.portal.dependencies.zip.url}"
					/>

					<unzip
						dest="${app.server.weblogic.lib.global.dir}"
						src="liferay-portal-dependencies.zip"
					>
						<mapper
							from="[^/]+/(.*)"
							to="\1"
							type="regexp"
						/>
					</unzip>

					<delete file="liferay-portal-dependencies.zip" />
				</then>
			</elseif>
			<else>
				<mkdir dir="${app.server.parent.dir}" />

				<tstamp>
					<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
				</tstamp>

				<get
					dest="${tstamp.value}.zip"
					src="${test.build.bundle.zip.url}"
				/>

				<unzip
					dest="${app.server.parent.dir}"
					src="${tstamp.value}.zip"
				>
					<patternset
						includes="liferay-portal-*/${app.server.type}-*/**"
					/>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>

				<delete file="${tstamp.value}.zip" />

				<if>
					<and>
						<equals arg1="${app.server.type}" arg2="tomcat" />
						<equals arg1="${liferay.portal.bundle}" arg2="6.1.20" />
					</and>
					<then>
						<echo file="app.server.${user.name}.properties" append="true">
							app.server.tomcat.version=7.0.27
						</echo>

						<var name="test.app.server.bin.dir" unset="true" />

						<var name="test.app.server.bin.dir" value="${app.server.parent.dir}/tomcat-7.0.27/bin" />
					</then>
				</if>

				<chmod perm="a+x">
					<fileset dir="${test.app.server.bin.dir}">
						<include name="*.sh" />
					</fileset>
				</chmod>

				<if>
					<equals arg1="${app.server.type}" arg2="jboss" />
					<then>
						<replace file="${app.server.jboss.lib.global.dir}/module.xml">
							<replacetoken><![CDATA[<resource-root path="jtds.jar" />]]></replacetoken>
							<replacevalue>
								<![CDATA[
									<resource-root path="jtds.jar" />
									<resource-root path="mysql.jar" />
								]]>
							</replacevalue>
						</replace>
					</then>
				</if>

				<prepare-fix-pack-bundle />
			</else>
		</if>
	</target>

	<target name="prepare-test-properties" depends="generate-test-properties">
		<echo file="portal-impl/test/portal-test-ext.properties">
jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}
		</echo>

		<if>
			<equals arg1="${database.type}" arg2="db2" />
			<then>
				<echo file="portal-impl/test/portal-test-ext.properties" append="true">

hibernate.dialect=com.liferay.portal.dao.orm.hibernate.DB2Dialect
custom.sql.function.isnull=CAST(? AS VARCHAR(32672)) IS NULL
custom.sql.function.isnotnull=CAST(? AS VARCHAR(32672)) IS NOT NULL</echo>
			</then>
			<elseif>
				<equals arg1="${database.type}" arg2="oracle" />
				<then>
					<echo file="portal-impl/test/portal-test-ext.properties" append="true">

jdbc.default.acquireIncrement=1
jdbc.default.maxPoolSize=5
jdbc.default.minPoolSize=1
jdbc.default.numHelperThreads=1</echo>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${database.type}" arg2="sybase" />
				<then>
					<echo file="portal-impl/test/portal-test-ext.properties" append="true">

hibernate.dialect=org.hibernate.dialect.SybaseDialect
custom.sql.function.isnull=CONVERT(VARCHAR,?) IS NULL
custom.sql.function.isnotnull=CONVERT(VARCHAR,?) IS NOT NULL</echo>
				</then>
			</elseif>
		</if>
	</target>

	<target name="prepare-virtual-host-name-properties">
		<if>
			<isset property="virtual.host.name" />
			<then>
				<echo file="portal-web/test/test-portal-impl-ext.properties" append="true">
					portal.url=www.${virtual.host.name}.com:8080
				</echo>

				<echo file="portal-web/test/test-portal-web-ext.properties" append="true">
					portal.url=www.${virtual.host.name}.com:8080
				</echo>
			</then>
		</if>
	</target>

	<target name="print-scm-revision">
		<echo>Portal GIT ID:</echo>
		<echo />

		<exec dir="${project.dir}" executable="git">
			<arg line="log -n 1" />
		</exec>

		<echo />
		<echo>Plugins GIT ID:</echo>
		<echo />

		<exec dir="${lp.plugins.dir}" executable="git">
			<arg line="log -n 1" />
		</exec>

		<echo />
	</target>

	<target name="rebuild-database" depends="generate-test-properties,build-sql-file">
		<if>
			<not>
				<isset property="skip.rebuild-database" />
			</not>
			<then>
				<if>
					<not>
						<isset property="skip.delete-liferay-home" />
					</not>
					<then>
						<delete dir="${liferay.home}/data" />
						<delete dir="${liferay.home}/logs" />
					</then>
				</if>

				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<exec executable="${db2.executable}">
							<arg value="-fcreate.sql" />
							<arg value="-t" />
						</exec>
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="hsql" />
						<then>
							<delete dir="${liferay.home}/data" includeemptydirs="true" />

							<copy file="sql/${database.name}.properties" tofile="${liferay.home}/data/hsql/${database.name}.properties" />
							<copy file="sql/${database.name}.script" tofile="${liferay.home}/data/hsql/${database.name}.script" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="mysql" />
						<then>
							<var name="mysql.arg.line" unset="true" />

							<if>
								<and>
									<equals arg1="${database.password}" arg2="" />
									<equals arg1="${database.username}" arg2="" />
								</and>
								<then>
									<var name="mysql.arg.line" value="" />
								</then>
								<elseif>
									<equals arg1="${database.password}" arg2="" />
									<then>
										<var name="mysql.arg.line" value="-u ${database.username}" />
									</then>
								</elseif>
								<elseif>
									<equals arg1="${database.username}" arg2="" />
									<then>
										<var name="mysql.arg.line" value="-p${database.password}" />
									</then>
								</elseif>
								<else>
									<var name="mysql.arg.line" value="-p${database.password} -u ${database.username}" />
								</else>
							</if>

							<exec executable="${mysql.executable}" input="create.sql">
								<arg line="${mysql.arg.line}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="oracle" />
						<then>
							<exec executable="${oracle.sqlplus.executable}">
								<arg value="${oracle.admin.user}/${oracle.admin.password}" />
								<arg value="@create.sql" />
								<arg value="${database.username}" />
								<arg value="${database.password}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="postgresql" />
						<then>
							<exec executable="${postgresql.executable}">
								<arg value="-f" />
								<arg value="create.sql" />
								<arg value="-U" />
								<arg value="${database.username}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="sybase" />
						<then>
							<exec executable="${sybase.executable}">
								<arg value="-i" />
								<arg value="create.sql" />
								<arg value="-P" />
								<arg value="${database.password}" />
								<arg value="-S" />
								<arg value="${database.schema}" />
								<arg value="-U" />
								<arg value="${database.username}" />
							</exec>
						</then>
					</elseif>
					<else>
						<exec executable="${plink.executable}">
							<arg line="-pw ${vm.password} ${vm.username}@${database.host} cmd.exe /c mkdir C:\temporary" />
						</exec>

						<exec executable="${pscp.executable}">
							<arg line="-pw ${vm.password} create.sql ${vm.username}@${database.host}:\temporary" />
						</exec>

						<exec executable="${plink.executable}">
							<arg line="-pw ${vm.password} ${vm.username}@${database.host} ${database.remote-schema-command}" />
						</exec>

						<exec executable="${plink.executable}">
							<arg line="-pw ${vm.password} ${vm.username}@${database.host} cmd.exe /c rmdir /q /s C:\temporary" />
						</exec>
					</else>
				</if>
			</then>
		</if>

		<delete file="create.sql" />
	</target>

	<target name="rebuild-legacy-database">
		<antcall target="rebuild-database">
			<param name="database.type" value="${database.type}" />
			<param name="sql.dir" value="sql/create-bare/" />
			<param name="sql.file" value="create-bare-${database.type}.sql" />
		</antcall>

		<unzip
			dest="${liferay.home}"
			src="${portal.legacy.dir}/${portal.version}/data-archive/data-archive-${database.type}.zip"
		/>

		<if>
			<equals arg1="${database.type}" arg2="mysql" />
			<then>
				<exec executable="mysql" input="${liferay.home}/${database.type}.sql">
					<arg value="--database=lportal" />
					<arg value="--password=${database.password}" />
					<arg value="--user=${database.username}" />
				</exec>
			</then>
		</if>
	</target>

	<target name="record-git-commit-bottom-test-jsp">
		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
			<arg line="rev-parse HEAD" />
		</exec>

		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.current.date">
			<arg line="log -1 --pretty=format:%cd HEAD" />
		</exec>

		<loadfile property="copyright.content" srcFile="${project.dir}/portal-impl/src/com/liferay/portal/tools/servicebuilder/dependencies/copyright.txt" />

		<echo file="${app.server.dir}/webapps/ROOT/html/common/themes/bottom-test.jsp"><![CDATA[<%--
${copyright.content}
--%>

<%@ page import="com.liferay.portal.kernel.util.ParamUtil" %>

<%
String ppstate = ParamUtil.getString(request, "p_p_state", "normal");

if (ppstate.equals("normal")) {
%>

	<div class="alert alert-info" id="currentHead" style="margin: 2em">
		Commit <a href="https://github.com/liferay/liferay-portal/commit/${git.commit.portal.rev.parse}" target="_blank">${git.commit.portal.rev.parse} - ${git.commit.portal.current.date}</a>
	</div>

<%
}
%>]]></echo>

		<echo>Updated ${app.server.dir}/webapps/ROOT/html/common/themes/bottom-test.jsp.</echo>
	</target>

	<target name="record-test-package-names">
		<script classpathref="project.classpath" language="beanshell">
			import com.liferay.portal.kernel.util.OSDetector;
			import com.liferay.portal.kernel.util.StringUtil;

			import org.apache.tools.ant.DirectoryScanner;

			DirectoryScanner directoryScanner = new DirectoryScanner();

			directoryScanner.setBasedir(project.getBaseDir());
			directoryScanner.setIncludes(new String[] {"**/test/integration/**/*Test.java", "**/test/unit/**/*Test.java"});

			directoryScanner.scan();

			String[] fileNames = directoryScanner.getIncludedFiles();

			Arrays.sort(fileNames);

			Set packageNames = new TreeSet();

			for (String fileName : fileNames) {
				int x = fileName.indexOf("com/");
				int y = fileName.lastIndexOf("/");

				if (OSDetector.isWindows()) {
					x = fileName.indexOf("com\\");
					y = fileName.lastIndexOf("\\");
				}

				if (fileName.endsWith("ServiceHttpTest.java") || fileName.endsWith("ServiceJsonTest.java") || fileName.endsWith("ServiceSoapTest.java")) {
					continue;
				}

				String packageName = fileName.substring(x, y);

				packageName = StringUtil.replace(packageName, "/", ".");
				packageName = StringUtil.replace(packageName, "\\", ".");

				packageNames.add(packageName);
			}

			project.setProperty("test.package.names", StringUtil.merge(packageNames, " "));
		</script>

		<echo file="test.package.names.properties">TEST_PACKAGE_NAMES=${test.package.names}</echo>
	</target>

	<target name="revert-test-properties">
		<execute>
			<![CDATA[git checkout -- portal-impl/test/portal-test.properties]]>
		</execute>

		<delete file="portal-impl/test/portal-test-ext.properties" failonerror="false" />

		<execute>
			<![CDATA[git checkout -- portal-impl/test/test-portal-impl.properties]]>
		</execute>

		<execute>
			<![CDATA[git checkout -- portal-web/test/test-portal-web.properties]]>
		</execute>
	</target>

	<target name="run-selenium-smoke-test">
		<antcall target="compile" />

		<antcall target="start-selenium" />

		<ant dir="portal-impl" target="compile-test" inheritAll="false" />

		<ant dir="portal-web" target="test-class" inheritAll="false">
			<property name="test.class" value="SeleniumSmokeTestSuite" />
		</ant>

		<antcall target="stop-selenium" />
	</target>

	<target name="run-selenium-test">
		<if>
			<and>
				<equals arg1="${test.class}" arg2="PortalWebTestSuite" />
				<not>
					<equals arg1="${database.type}" arg2="hsql" />
				</not>
			</and>
			<then>
				<ant dir="portal-impl" target="test-class" inheritAll="false">
					<property name="test.class" value="ServiceHttpTestSuite" />
				</ant>

				<ant dir="portal-impl" target="test-class" inheritAll="false">
					<property name="test.class" value="ServiceSoapTestSuite" />
				</ant>
			</then>
		</if>

		<ant dir="portal-impl" target="compile-test" inheritAll="false" />

		<if>
			<contains string="${test.class}" substring="#" />
			<then>
				<antcallback return="test.method.name,test.simple.class.name" target="parse-test-class" />

				<var name="test.class" unset="true" />
				<var name="test.methods" unset="true" />

				<ant dir="portal-web" target="test-method">
					<property name="test.class" value="${test.simple.class.name}" />
					<property name="test.methods" value="${test.method.name}" />
				</ant>
			</then>
			<else>
				<antcallback return="test.simple.class.name" target="parse-test-class" />

				<ant dir="portal-web" target="test-class" inheritAll="false">
					<property name="test.class" value="${test.simple.class.name}" />
				</ant>
			</else>
		</if>

		<if>
			<isset property="jenkins.shared.results.dir" />
			<then>
				<var name="jenkins.shared.results.base.dir" value="${jenkins.shared.results.dir}/${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_NUMBER}" />
			</then>
			<else>
				<var name="jenkins.shared.results.base.dir" value="." />
			</else>
		</if>

		<if>
			<isset property="env.JENKINS_HOME" />
			<then>
				<antelope:stringutil property="job.name" string="${env.JOB_NAME}">
					<antelope:replace regex="," replacement="_" />
				</antelope:stringutil>

				<if>
					<and>
						<available file="portal-web/test-results/functional/screenshots" />
						<equals arg1="${test.save.screenshot}" arg2="true" />
					</and>
					<then>
						<copy todir="${jenkins.shared.results.base.dir}/${job.name}/builds/${env.BUILD_NUMBER}/screenshots">
							<fileset
								dir="portal-web/test-results/functional/screenshots"
							/>
						</copy>
					</then>
				</if>

				<if>
					<and>
						<available file="portal-web/test-results/functional/report.html" />
						<equals arg1="${test.selenium.logger.enabled}" arg2="true" />
					</and>
					<then>
						<copy
							file="portal-web/test-results/functional/report.html"
							tofile="${jenkins.shared.results.base.dir}/${job.name}/builds/${env.BUILD_NUMBER}/report.html"
						/>
					</then>
				</if>

				<antcall target="build-test-results-xml" />

				<first id="first">
					<fileset dir="portal-web/test-results/functional/" includes="TEST-com.liferay.portalweb2.*.xml" />
				</first>

				<property name="jenkins.results.xml.file" value="${toString:first}" />

				<if>
					<available file="${jenkins.results.xml.file}" />
					<then>
						<if>
							<not>
								<isset property="test.class" />
							</not>
							<then>
								<property name="test.class" value="${test.simple.class.name}#${test.method.name}" />
							</then>
						</if>

						<copy
							file="${jenkins.results.xml.file}"
							tofile="${jenkins.shared.results.base.dir}/${env.BUILD_FLOW_JOB_NAME}/builds/${env.BUILD_FLOW_BUILD_NUMBER}/test-results/TEST-${env.BUILD_FLOW_JOB_NAME}_${env.BUILD_FLOW_BUILD_NUMBER}_${test.class}.xml"
						/>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="run-simple-server" depends="prepare-portal-properties,prepare-portal-ext-properties">
		<if>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<then>
				<ant antfile="build-dist.xml" target="update-java-security-tomcat" />
			</then>
		</if>

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<prepare-additional-bundles />

				<prepare-test-cluster-properties />
			</then>
		</if>

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<antcall target="prepare-android-device" />

				<antcall target="start-android-device" />

				<antcall target="start-appium" />
			</then>
		</if>

		<antcall target="clean-up-java-processes" inheritAll="false" />

		<if>
			<isset property="portal.version" />
			<then>
				<antcall target="rebuild-legacy-database" />
			</then>
			<else>
				<antcall target="rebuild-database" inheritAll="false" />
			</else>
		</if>

		<antcall target="copy-optional-jars" inheritAll="false">
			<param name="todir" value="${app.server.lib.global.dir}" />
		</antcall>

		<if>
			<not>
				<equals arg1="${skip.clean-app-server-deploy-dir}" arg2="true" />
			</not>
			<then>
				<antcall target="clean-app-server-deploy-dir" />
			</then>
		</if>

		<if>
			<equals arg1="${app.server.type}" arg2="glassfish" />
			<then>
				<start-app-server />

				<stop-app-server />
			</then>
		</if>

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
			<property name="plugin.types" value="portlets" />
			<property name="plugins.includes" value="marketplace-portlet" />
		</ant>

		<if>
			<isset property="hook.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="hooks" />
					<property name="plugins.includes" value="${hook.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<isset property="layouttpl.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="layouttpl" />
					<property name="plugins.includes" value="${layouttpl.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<isset property="portlet.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="portlets" />
					<property name="plugins.includes" value="${portlet.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<equals arg1="${test.pacl}" arg2="true" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="portlets" />
					<property name="plugins.includes" value="chat-portlet,flash-portlet,portal-compat-hook,sample-service-builder-portlet,test-pacl-portlet" />
				</ant>
			</then>
		</if>

		<if>
			<isset property="theme.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="themes" />
					<property name="plugins.includes" value="${theme.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<isset property="web.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="webs" />
					<property name="plugins.includes" value="${web.plugins.includes}" />
				</ant>
			</then>
		</if>

		<if>
			<isset property="web.xml.timeout" />
			<then>
				<replace
					file="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml"
					token="&lt;session-timeout&gt;30&lt;/session-timeout&gt;"
					value="&lt;session-timeout&gt;${web.xml.timeout}&lt;/session-timeout&gt;"
				/>
			</then>
		</if>

		<antcall target="prepare-selenium" />

		<if>
			<equals arg1="${browser.type}" arg2="googlechrome" />
			<then>
				<antcall target="start-chrome-driver" />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="ie" />
			<then>
				<antcall target="start-ie-driver" />
			</then>
		</if>

		<antcall target="copy-sikuli-temp-files" />

		<start-app-server />

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<var name="app.server.bundle.number" value="1" />

				<antelope:repeat count="${app.server.bundle.count}">
					<start-app-server
						app.server.bundle.number="${app.server.bundle.number}"
					/>

					<math
						datatype="int"
						operand1="${app.server.bundle.number}"
						operand2="1"
						operation="+"
						result="app.server.bundle.number"
					/>
				</antelope:repeat>

				<var name="app.server.bundle.number" unset="true" />
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${tcat.enabled}" arg2="true" />
			</not>
			<then>
				<for param="log.file">
					<path>
						<fileset dir="${liferay.home}/logs">
							<include name="*.log" />
						</fileset>
					</path>
					<sequential>
						<var name="log.file" value="@{log.file}" />
					</sequential>
				</for>

				<script classpathref="project.classpath" language="beanshell">
					<![CDATA[
						import com.liferay.portal.kernel.util.StringUtil;

						import org.apache.commons.io.FileUtils;

						Set requiredPluginNamesSet = new HashSet();

						requiredPluginNamesSet.add("marketplace-portlet");

						String[] pluginTypes = {"hook", "layouttpl", "portlet", "theme", "web"};

						for (String pluginType : pluginTypes) {
							String[] pluginNames = StringUtil.split(project.getProperty(pluginType + ".plugins.includes"), ',');

							for (String pluginName : pluginNames) {
								requiredPluginNamesSet.add(pluginName);
							}
						}

						System.out.println("Ensuring the following plugins have been deployed:");
						System.out.println(StringUtil.merge(requiredPluginNamesSet));

						int i = 0;

						for (String pluginName : requiredPluginNamesSet) {
							String content = "";

							while (i < 120 && !content.contains(pluginName + " is available for use")) {
								try {
									Thread.sleep(1000);

									File file = new File(StringUtil.replace(project.getProperty("log.file"), "\\", "/"));

									content = FileUtils.readFileToString(file);

									i++;
								}
								catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
					]]>
				</script>
			</then>
		</if>

		<if>
			<contains string="${hook.plugins.includes}" substring="so-hook" />
			<then>
				<echo file="${app.server.portal.dir}/html/portlet/dockbar/license_warning.jsp" />
			</then>
		</if>

		<if>
			<equals arg1="${test.ant.script.actions}" arg2="db-failover" />
			<then>
				<ant antfile="build-test-db-failover.xml" target="run-db-failover" />
			</then>
		</if>

		<antcall target="run-selenium-test" />

		<stop-app-server />

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<var name="app.server.bundle.number" value="1" />

				<antelope:repeat count="${app.server.bundle.count}">
					<stop-app-server
						app.server.bundle.number="${app.server.bundle.number}"
					/>

					<math
						datatype="int"
						operand1="${app.server.bundle.number}"
						operand2="1"
						operation="+"
						result="app.server.bundle.number"
					/>
				</antelope:repeat>

				<var name="app.server.bundle.number" unset="true" />
			</then>
		</if>

		<if>
			<equals arg1="${mobile.device.enabled}" arg2="true" />
			<then>
				<antcall target="stop-android-device" />

				<antcall target="clean-up-android-device" />

				<antcall target="stop-appium" />
			</then>
		</if>

		<antcall target="clean-up-sikuli-temp-files" />

		<antcall target="clean-up-web-xml" />

		<if>
			<equals arg1="${browser.type}" arg2="googlechrome" />
			<then>
				<antcall target="stop-chrome-driver" />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="ie" />
			<then>
				<antcall target="stop-ie-driver" />
			</then>
		</if>
	</target>

	<target name="start-android-device">
		<exec executable="/bin/bash" os="${os.unix}" spawn="true">
			<arg value="-c" />
			<arg value="emulator -avd deviceName -no-boot-anim" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}">
			<arg value="/c" />
			<arg value="emulator -avd deviceName -no-boot-anim" />
		</exec>

		<sleep seconds="120" />
	</target>

	<target name="start-appium">
		<parallel>
			<daemons>
				<exec executable="/bin/bash" os="${os.unix}">
					<arg value="-c" />
					<arg value="${appium.unix.cmd}" />
				</exec>

				<exec dir="${appium.win32.dir}" executable="cmd.exe" os="${os.windows}">
					<arg value="/c" />
					<arg value="${appium.win32.cmd}" />
				</exec>
			</daemons>
		</parallel>
	</target>

	<target name="start-app-server">
		<if>
			<not>
				<isset property="app.server.bundle.number" />
			</not>
			<then>
				<var name="app.server.bundle.number" value="0" />
			</then>
		</if>

		<start-app-server  app.server.bundle.number="${app.server.bundle.number}" />
	</target>

	<target name="start-chrome-driver">
		<if>
			<not>
				<isset property="chrome.driver.zip" />
			</not>
			<then>
				<fail>
.

Please set "chrome.driver.zip" in test.properties to point to "chromedriver_win_22_0_1203_0b.zip"
which can be downloaded from this website: http://code.google.com/p/chromedriver/
				</fail>
			</then>
			<else>
				<exec executable="taskkill.exe">
					<arg line="/F /IM chromedriver.exe" />
				</exec>

				<unzip src="${chrome.driver.zip}" dest="tools/selenium" />
			</else>
		</if>
	</target>

	<target name="start-ie-driver">
		<if>
			<not>
				<isset property="ie.driver.zip" />
			</not>
			<then>
				<fail>
.

Please set "ie.driver.zip" in test.properties to point to "IEDriverServer_x64_2.31.0.zip" or "IEDriverServer_Win32_2.31.0.zip" which can be downloaded from this website: https://code.google.com/p/selenium/wiki/InternetExplorerDriver
				</fail>
			</then>
			<else>
				<exec executable="taskkill.exe">
					<arg line="/F /IM IEDriverServer.exe" />
				</exec>

				<unzip src="${ie.driver.zip}" dest="tools/selenium" />
			</else>
		</if>
	</target>

	<target name="start-ldap">
		<exec dir="${app.server.parent.dir}/apacheds_1.5.7" executable="cmd">
			<arg value="/c" />
			<arg value="apacheds.bat" />
		</exec>
	</target>

	<target name="start-selenium">
		<if>
			<not>
				<resourcecontains
					resource="portal-impl/classes/system-ext.properties"
					substring="java.awt.headless=false"
				/>
			</not>
			<then>
				<echo append="true" file="portal-impl/classes/system-ext.properties">
					java.awt.headless=false
				</echo>
			</then>
		</if>

		<!--<java
			jar="lib/development/selenium-server.jar"
			fork="true"
			spawn="true"
		>-->
		<java
			classname="org.openqa.grid.selenium.GridLauncher"
			classpathref="project.classpath"
			fork="true"
			spawn="true"
		>
			<arg line="-port 14444 -singleWindow" />
		</java>
	</target>

	<target name="stop-android-device">
		<exec executable="/bin/bash" os="${os.unix}">
			<arg value="-c" />
			<arg value="adb emu kill" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}">
			<arg value="/c" />
			<arg value="adb emu kill" />
		</exec>
	</target>

	<target name="stop-appium">
		<exec executable="/bin/bash" os="${os.unix}" >
			<arg value="-c" />
			<arg value="killall node" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}" >
			<arg value="/c" />
			<arg value="tskill node" />
		</exec>
	</target>

	<target name="stop-app-server">
		<if>
			<not>
				<isset property="app.server.bundle.number" />
			</not>
			<then>
				<var name="app.server.bundle.number" value="0" />
			</then>
		</if>

		<stop-app-server app.server.bundle.number="${app.server.bundle.number}" />
	</target>

	<target name="stop-chrome-driver">
		<exec executable="taskkill.exe">
			<arg line="/F /IM chromedriver.exe" />
		</exec>
	</target>

	<target name="stop-ie-driver">
		<exec executable="taskkill.exe">
			<arg line="/F /IM IEDriverServer.exe" />
		</exec>
	</target>

	<target name="stop-ldap">
		<exec executable="/bin/sh" os="${os.unix}">
			<arg line="-c jps -l" />
		</exec>

		<exec executable="cmd.exe" os="${os.windows}">
			<arg line="/c jps -l > java-processes" />
		</exec>

		<loadfile property="java-processes.content" srcfile="java-processes" />

		<delete file="java-processes" />

		<script classpathref="project.classpath" language="beanshell">
			String javaProcessesNewContent = project.getProperty("java-processes.content");

			if (javaProcessesNewContent.contains("File Not Found")) {
				javaProcessesNewContent = "";
			}

			String javaProcessList = javaProcessesNewContent.replaceAll("\r\n", ",");

			if (javaProcessList.endsWith(",")) {
				javaProcessList = javaProcessList.substring(0, javaProcessList.length() - 1);
			}

			project.setProperty("java.process.list", javaProcessList);
		</script>

		<for list="${java.process.list}" param="java.process">
			<sequential>
				<if>
					<contains string="@{java.process}" substring="org.apache.directory.server.UberjarMain" />
					<then>
						<antcall target="kill-java-process">
							<param name="java.process.to.kill" value="@{java.process}" />
						</antcall>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<target name="stop-selenium">
		<if>
			<available file="portal-impl/src/system-ext.properties" />
			<then>
				<if>
					<not>
						<filesmatch
							file1="portal-impl/src/system-ext.properties"
							file2="portal-impl/classes/system-ext.properties"
						/>
					</not>
					<then>
						<copy
							file="portal-impl/src/system-ext.properties"
							overwrite="true"
							tofile="portal-impl/classes/system-ext.properties"
						/>
					</then>
				</if>
			</then>
		</if>

		<antelope:post to="http://localhost:14444/selenium-server/driver/?cmd=shutDownSeleniumServer" wantresponse="true" />
	</target>

	<target name="test-integration">
		<ant dir="portal-service" target="test-integration" inheritAll="false" />
		<ant dir="portal-impl" target="test-integration" inheritAll="false" />
		<ant dir="util-java" target="test-integration" inheritAll="false" />
	</target>

	<target name="test-package">
		<ant dir="portal-service" target="test-package" inheritAll="false" />
		<ant dir="portal-impl" target="test-package" inheritAll="false" />
		<ant dir="util-java" target="test-package" inheritAll="false" />
	</target>

	<target name="test-unit">
		<ant dir="portal-service" target="test-unit" inheritAll="false" />
		<ant dir="portal-impl" target="test-unit" inheritAll="false" />
		<ant dir="util-java" target="test-unit" inheritAll="false" />
	</target>
</project>