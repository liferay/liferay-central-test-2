<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String scriptContent = ParamUtil.getString(request, "scriptContent");

if (Validator.isNotNull(scriptContent)) {
	script = scriptContent;
}

long templateHandlerClassNameId = ddmDisplay.getTemplateHandlerClassNameId(template, classNameId);

Map<String, TemplateVariableGroup> templateVariableGroups = TemplateContextHelper.getTemplateVariableGroups(templateHandlerClassNameId, classPK, language, locale);
%>

<aui:input name="scriptContent" type="hidden" value="<%= script %>" />

<liferay-ui:panel-container extended="<%= false %>" id="templateScriptContainer" persistState="<%= true %>">
	<liferay-ui:panel collapsible="<%= true %>" extended="<%= false %>" id="templateScriptSectionPanel" persistState="<%= true %>" title="script">
		<div class="control-group lfr-template-editor-container">
			<c:if test="<%= !templateVariableGroups.isEmpty() %>">
				<div class="lfr-template-palette-container pull-left<%= (language.equalsIgnoreCase("ftl") || language.equalsIgnoreCase("vm")) ? "" : " hide" %>" id="<portlet:namespace />templatePaletteContainer">
					<div class="lfr-template-palette" id="<portlet:namespace />paletteDataContainer">
						<div id="<portlet:namespace />paletteData">

							<%
							for (TemplateVariableGroup templateVariableGroup : templateVariableGroups.values()) {
							%>

								<div class="palette-section">
									<div class="palette-item-header toggler-header-expanded">
										<span class="palette-item-header-icon"></span>

										<span><liferay-ui:message key="<%= templateVariableGroup.getLabel() %>" /></span>
									</div>

									<ul class="palette-item-content">

										<%
										for (TemplateVariableDefinition templateVariableDefinition : templateVariableGroup.getTemplateVariableDefinitions()) {
											String[] dataContentArray = _getDataContentArray(templateVariableDefinition, language);
										%>

											<li class="palette-item-container">
												<span class="palette-item" data-content1="<%= HtmlUtil.escapeAttribute(dataContentArray[0]) %>" <c:if test="<%= Validator.isNotNull(dataContentArray[1]) %>">data-content2="<%= HtmlUtil.escapeAttribute(dataContentArray[1]) %>"</c:if> <c:if test="<%= Validator.isNotNull(dataContentArray[2]) %>">data-content3="<%= HtmlUtil.escapeAttribute(dataContentArray[2]) %>"</c:if> data-title="<%= HtmlUtil.escapeAttribute(_getPaletteItemTitle(pageContext, templateVariableDefinition)) %>">
													<liferay-ui:message key="<%= templateVariableDefinition.getLabel() %>" /><c:if test="<%= templateVariableDefinition.isCollection() || templateVariableDefinition.isRepeatable() %>">*</c:if>
												</span>
											</li>

										<%
										}
										%>

									</ul>
								</div>

							<%
							}
							%>

						</div>
					</div>
				</div>
			</c:if>

			<%
			String editorContainerClass = "lfr-editor-container";

			if (!language.equalsIgnoreCase("ftl") && !language.equalsIgnoreCase("vm")) {
				editorContainerClass += " lfr-editor-container-full";
			}
			%>

			<div class="<%= editorContainerClass %>" id="<portlet:namespace />editorContainer">
				<div class="lfr-rich-editor" id="<portlet:namespace />richEditor"></div>
			</div>
		</div>

		<aui:input inlineLabel="left" label="script-file" name="script" type="file" />
	</liferay-ui:panel>
</liferay-ui:panel-container>

<aui:script use="aui-ace-autocomplete-freemarker,aui-ace-autocomplete-plugin,aui-ace-autocomplete-velocity,aui-toggler,aui-popover,event-mouseenter,event-outside,resize,transition">
	var ACPlugin = A.Plugin.AceAutoComplete;
	var AObject = A.Object;
	var Util = Liferay.Util;

	var STR_EMPTY = '';

	var STR_HEIGHT = 'height';

	var selectLanguageNode = A.one('#<portlet:namespace />language');

	var panelScriptContainer = A.one('#templateScriptContainer');

	var editorContainer = panelScriptContainer.one('#<portlet:namespace />editorContainer');

	var prevEditorContent;
	var richEditor;

	<c:if test="<%= !templateVariableGroups.isEmpty() %>">
		var paletteContainer = panelScriptContainer.one('#<portlet:namespace />templatePaletteContainer');
		var paletteDataContainer = panelScriptContainer.one('#<portlet:namespace />paletteDataContainer');

		function onPaletteItemChosen(event) {
			var editor = richEditor.getEditor();

			var item = event.currentTarget;

			var contentAttrs = Util.getAttributes(item, 'data-content');

			var cursorPos;
			var processed;

			var aceAutocomplete = richEditor['ace-autocomplete-plugin'];

			aceAutocomplete._lockEditor = true;

			AObject.each(
				contentAttrs,
				function(item, index) {
					if (processed) {
						editor.insert('\n');

						cursorPos = editor.getCursorPosition();

						editor.insert('\n');
					}

					processed = true;

					editor.insert(item);
				}
			);

			if (cursorPos) {
				editor.moveCursorToPosition(cursorPos);
			}

			editor.focus();

			aceAutocomplete._lockEditor = false;
		}
	</c:if>

	function getEditorContent() {
		var content = richEditor.getSession().getValue();

		return content;
	}

	function getSelectedLanguage() {
		return selectLanguageNode.val();
	}

	function resizeEditor(event) {
		var info = event.info;

		richEditor.set(STR_HEIGHT, info.offsetHeight);
		richEditor.set('width', info.offsetWidth);

		paletteDataContainer.setStyle(STR_HEIGHT, info.offsetHeight);
	}

	function setEditorContent(content) {
		richEditor.getSession().setValue(content);

		prevEditorContent = content;
	}

	function setEditorPlugins(event) {
		var selectedOptionValue = getSelectedLanguage();

		var AutoComplete;

		<c:choose>
			<c:when test="<%= language.equals(TemplateConstants.LANG_TYPE_FTL) %>">
				AutoComplete = A.AceEditor.AutoCompleteFreemarker;
			</c:when>
			<c:when test="<%= language.equals(TemplateConstants.LANG_TYPE_VM) %>">
				AutoComplete = A.AceEditor.AutoCompleteVelocity;
			</c:when>
		</c:choose>

		if (AutoComplete) {
			var processor = new AutoComplete(
				{
					variables: <%= DDMTemplateHelperUtil.getAutocompleteJSON(request, language) %>
				}
			);

			if (processor) {
				richEditor.unplug(ACPlugin);

				richEditor.plug(
					ACPlugin,
					{
						processor: processor,
						render: true,
						visible: false,
						zIndex: 10000
					}
				);
			}
			else {
				richEditor.unplug(ACPlugin);
			}
		}
	}

	<%
	String langType = ParamUtil.getString(request, "langType");
	%>

	var editorContentElement = A.one('#<portlet:namespace />scriptContent');

	var editorNode = A.one('#<portlet:namespace />richEditor');

	A.on(
		'domready',
		function(event) {
			richEditor = new A.AceEditor(
				{
					boundingBox: editorNode,
					height: 400,
					mode: '<%= EditorUtil.getEditorMode(langType) %>',
					width: '100%'
				}
			).render();

			var resize = new A.Resize(
				{
					handles: ['br'],
					node: editorNode,
					on: {
						resize: resizeEditor
					}
				}
			);

			if (editorContentElement) {
				setEditorContent(editorContentElement.val());
			}

			Liferay.on(
				'<portlet:namespace />saveTemplate',
				function(event) {
					editorContentElement.val(getEditorContent());
				}
			);

			selectLanguageNode.on(
				'change',
				function(event) {
					Liferay.fire('<portlet:namespace />refreshEditor');
				}
			);

			setEditorPlugins();

			<c:if test="<%= !templateVariableGroups.isEmpty() %>">
				paletteContainer.delegate('click', onPaletteItemChosen, '.palette-item');

				var togglerDelegate = new A.TogglerDelegate(
					{
						animated: true,
						container: paletteDataContainer,
						content: '.palette-item-content',
						header: '.palette-item-header'
					}
				);

				var tooltip = new A.Popover(
					{
						align: {
							points: [A.WidgetPositionAlign.LC, A.WidgetPositionAlign.RC]
						},
						constrain: true,
						position: 'right',
						visible: false,
						zIndex: 6
					}
				).render(paletteContainer);

				tooltip.get('boundingBox').on('clickoutside', tooltip.hide, tooltip);

				paletteContainer.delegate(
					'mouseenter',
					function(event) {
						tooltip.hide();

						var node = event.currentTarget;

						tooltip.set('align.node', node);

						tooltip.setStdModContent(A.WidgetStdMod.BODY, node.attr('data-title'));

						tooltip.show();
					},
					'.palette-item'
				);
			</c:if>
		},
		'#<portlet:namespace />richEditor'
	);

	Liferay.on(
		'<portlet:namespace />refreshEditor',
		function(event) {
			var form = A.one('#<portlet:namespace />fm');

			form.one('#<portlet:namespace />cmd').val(STR_EMPTY);

			if (richEditor.getEditor().getSession().getUndoManager().hasUndo()) {
				Liferay.fire('<portlet:namespace />saveTemplate');
			}
			<c:if test="<%= template == null %>">
				else {
					editorContentElement.val(STR_EMPTY);
				}
			</c:if>

			submitForm(form);
		}
	);
</aui:script>

<%!
private String[] _getDataContentArray(TemplateVariableDefinition templateVariableDefinition, String language) {
	String[] dataContentArray = new String[] {StringPool.BLANK, StringPool.BLANK, StringPool.BLANK};

	String dataType = templateVariableDefinition.getDataType();

	if (dataType.equals("service-locator")) {
		Class<?> templateVariableDefinitionClass = templateVariableDefinition.getClazz();

		String variableName = templateVariableDefinitionClass.getSimpleName();

		dataContentArray[0] = _getVariableAssignmentCode(variableName, "serviceLocator.findService(\"" + templateVariableDefinition.getName() + "\"", language);
		dataContentArray[1] = _getVariableReferenceCode(variableName, language);
	}
	else if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		String[] listCodeArray = _getListCodeArray(templateVariableDefinition.getName(), itemTemplateVariableDefinition.getName(), language);

		dataContentArray[0] = listCodeArray[0];
		dataContentArray[1] = listCodeArray[1];
	}
	else if (Validator.isNull(dataType)) {
		dataContentArray[0] = _getVariableReferenceCode(templateVariableDefinition.getName(), language);
	}
	else {
		try {
			dataContentArray = templateVariableDefinition.generateCode(language);
		}
		catch (Exception e) {
			_log.error(e, e);
		}
	}

	return dataContentArray;
}

private String[] _getListCodeArray(String variableName, String itemName, String language) {
	String[] listCodeArray = new String[2];

	if (language.equalsIgnoreCase("ftl")) {
		listCodeArray[0] = "<#if " + variableName + "?has_content>\n\t<#list " + variableName + " as " + itemName + ">";
		listCodeArray[1] = "</#list>\n</#if>";
	}
	else if (language.equalsIgnoreCase("vm")) {
		listCodeArray[0] = "#if (!$"+ variableName + ".isEmpty())\n\t#foreach ($" + itemName + " in $" + variableName + ")";
		listCodeArray[1] = "#end\n#end";
	}

	return listCodeArray;
}

private String _getPaletteItemTitle(PageContext pageContext, String label, Class<?> clazz) {
	StringBundler sb = new StringBundler();

	if (clazz == null) {
		return StringPool.BLANK;
	}

	String className = clazz.getName();

	sb.append("<br />");
	sb.append(LanguageUtil.get(pageContext, label));
	sb.append(StringPool.COLON);
	sb.append("&nbsp;");

	String javadocURL = null;

	if (className.startsWith("com.liferay")) {
		javadocURL = "http://docs.liferay.com/portal/6.1/javadocs/";
	}

	if (Validator.isNotNull(javadocURL)) {
		sb.append("<a href=\"");
		sb.append(javadocURL);
		sb.append(StringUtil.replace(className, StringPool.PERIOD, StringPool.SLASH));
		sb.append(".html\" target=\"_blank\">");
	}

	sb.append(clazz.getSimpleName());

	if (Validator.isNull(javadocURL)) {
		sb.append("</a>");
	}

	return sb.toString();
}

private String _getPaletteItemTitle(PageContext pageContext, TemplateVariableDefinition templateVariableDefinition) {
	StringBundler sb = new StringBundler();

	String help = templateVariableDefinition.getHelp();

	if (Validator.isNotNull(help)) {
		sb.append("<p>");
		sb.append(LanguageUtil.get(pageContext, help));
		sb.append("</p>");
	}

	if (templateVariableDefinition.isCollection()) {
		sb.append("<p><i>*");
		sb.append(LanguageUtil.get(pageContext, "this-is-a-collection-of-fields"));
		sb.append("</i></p>");
	}
	else if (templateVariableDefinition.isRepeatable()) {
		sb.append("<p><i>*");
		sb.append(LanguageUtil.get(pageContext, "this-is-a-repeatable-field"));
		sb.append("</i></p>");
	}

	if (!Validator.equals(templateVariableDefinition.getDataType(), "service-locator")) {
		sb.append(LanguageUtil.get(pageContext, "variable"));
		sb.append(StringPool.COLON);
		sb.append("&nbsp;");
		sb.append(templateVariableDefinition.getName());
	}

	sb.append(_getPaletteItemTitle(pageContext, "class", templateVariableDefinition.getClazz()));

	if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		sb.append(_getPaletteItemTitle(pageContext, "items-class", itemTemplateVariableDefinition.getClazz()));
	}

	return sb.toString();
}

private String _getVariableAssignmentCode(String variableName, String variableValue, String language) {
	if (language.equalsIgnoreCase("ftl")) {
		return "<#assign " + variableName + " = " + variableValue + ")>";
	}
	else if (language.equalsIgnoreCase("vm")) {
		return "#set ($" + variableName + " = " + variableValue + ")";
	}

	return variableName;
}

private String _getVariableReferenceCode(String variableName, String language) {
	if (language.equalsIgnoreCase("ftl")) {
		return "${" + variableName + "}";
	}
	else if (language.equalsIgnoreCase("vm")) {
		return "$" + variableName;
	}

	return variableName;
}
%>

<%!
private static Log _log = LogFactoryUtil.getLog("portal-web.docroot.html.portlet.dynamic_data_mapping.edit_template_display_jspf");
%>