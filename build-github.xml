<?xml version="1.0"?>

<project name="portal-github" basedir="." default="test" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-common.xml" />

	<fail message="Please set the property ${github.access.token}." unless="github.access.token" />
	<fail message="Please set the property ${github.repository}." unless="github.repository" />
	<fail message="Please set the property ${github.username}." unless="github.username" />

	<macrodef name="github-post">
		<attribute name="github.post.data" />
		<attribute name="github.post.url" />

		<sequential>
			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					StringBuilder sb = new StringBuilder();

					sb.append("curl ");

					sb.append("--data '");
					sb.append(project.getProperty("github.post.data"));
					sb.append("' ");

					sb.append("--header \"Authorization: token ");
					sb.append(project.getProperty("github.access.token"));
					sb.append("\" ");

					sb.append("--request POST ");

					sb.append(project.getProperty("github.post.url"));

					project.setProperty("github.curl.command", sb.toString());
				]]>
			</script>

			<execute>
				${github.curl.command}
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="github-post-comment">
		<attribute name="github.post.comment.body" />

		<sequential>
			<fail message="Please set the property ${github.pull.request.number}." unless="github.pull.request.number" />

			<propertyregex
				input="@{github.post.comment.body}"
				override="true"
				property="github.post.comment.body"
				regexp="&quot;"
				replace="\\&quot;"
			/>

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					StringBuilder sb = new StringBuilder();

					sb.append("{\"body\":\"");
					sb.append(project.getProperty("github.post.comment.body"));
					sb.append("\"}");

					project.setProperty("github.post.data", sb.toString());

					StringBuilder sb = new StringBuilder();

					sb.append("https://api.github.com/repos/");
					sb.append(project.getProperty("github.username"));
					sb.append("/");
					sb.append(project.getProperty("github.repository"));
					sb.append("/issues/");
					sb.append(project.getProperty("github.pull.request.number"));
					sb.append("/comments");

					project.setProperty("github.post.url", sb.toString());
				]]>
			</script>

			<github-post
				github.post.data="${github.post.data}"
				github.post.url="${github.post.url}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="github-post-status">
		<attribute name="github.post.status.description" />
		<attribute name="github.post.status.state" />
		<attribute name="github.post.status.url" />

		<sequential>
			<fail message="Please set the property ${github.pull.request.git.id}." unless="github.pull.request.git.id" />

			<script classpathref="project.classpath" language="beanshell">
				<![CDATA[
					StringBuilder sb = new StringBuilder();

					sb.append("{\"description\":\"@{github.post.status.description}\",");
					sb.append("\"state\":\"@{github.post.status.state}\",");
					sb.append("\"target_url\":\"@{github.post.status.url}\"}");

					project.setProperty("github.post.data", sb.toString());

					sb = new StringBuilder();

					sb.append("https://api.github.com/repos/");
					sb.append(project.getProperty("github.username"));
					sb.append("/");
					sb.append(project.getProperty("github.repository"));
					sb.append("/statuses/");
					sb.append(project.getProperty("github.pull.request.git.id"));

					project.setProperty("github.post.url", sb.toString());
				]]>
			</script>

			<github-post
				github.post.data="${github.post.data}"
				github.post.url="${github.post.url}"
			/>
		</sequential>
	</macrodef>

	<target name="github-post-comment-failure">
		<fail message="Please set the property ${github.jenkins.failure.url.paths}" unless="github.jenkins.failure.url.paths" />
		<fail message="Please set the property ${github.jenkins.url}" unless="github.jenkins.url" />

		<script classpathref="project.classpath" language="beanshell">
			<![CDATA[
				import java.io.File;

				import java.util.concurrent.TimeUnit;
				import java.util.regex.Matcher;
				import java.util.regex.Pattern;

				import org.apache.commons.io.FileUtils;

				import org.json.JSONObject;

				public String fixJSON(String json) {
					json = json.replaceAll("\t", "&#09;");
					json = json.replaceAll("\\\"", "&#34;");
					json = json.replaceAll("'", "&#39;");
					json = json.replaceAll("<", "&#60;");
					json = json.replaceAll(">", "&#62;");
					json = json.replaceAll("\\[", "&#91;");
					json = json.replaceAll("\\\\", "&#92;");
					json = json.replaceAll("\\]", "&#93;");
					json = json.replaceAll("\\{", "&#123;");
					json = json.replaceAll("\\}", "&#125;");
					json = json.replaceAll("\n", "<br />");

					return json;
				}

				public String fixURL(String url) {
					if (url.contains("(")) {
						url = url.replace("(", "%28");
					}

					if (url.contains(")")) {
						url = url.replace(")", "%29");
					}

					if (url.contains("[")) {
						url = url.replace("[", "%5B");
					}

					if (url.contains("]")) {
						url = url.replace("]", "%5D");
					}

					return url;
				}

				public String getConsoleErrorMessage(String githubJenkinsFailureURL) {
					String consoleOutput = toString(githubJenkinsFailureURL + "/logText/progressiveText");

					Pattern pattern = Pattern.compile("\\n[a-z\\-\\.]+\\:\\n");

					Matcher matcher = pattern.matcher(consoleOutput);

					int x = 0;

					while (matcher.find()) {
						x = matcher.start() + 1;
					}

					String errorMessage = consoleOutput.substring(x);

					return fixJSON(errorMessage);
				}

				public String getDeprecatedMethodErrorMessage(File file) {
					String errorMessage = FileUtils.readFileToString(file);

					return fixJSON(errorMessage);
				}

				public String getRebaseErrorMessage(String githubJenkinsFailureURL) {
					String consoleOutput = toString(githubJenkinsFailureURL + "/logText/progressiveText");

					int x = consoleOutput.indexOf("[EnvInject] - Variables injected successfully.");
					int y = consoleOutput.indexOf("--abort");

					String errorMessage = consoleOutput.substring(x, y + 9);

					return fixJSON(errorMessage);
				}

				public String getRemoteGithubJenkinsURL() {
					JSONObject jsonObject = toJSONObject(project.getProperty("github.jenkins.url") + "/api/json");

					JSONObject primaryViewJSONObject = jsonObject.get("primaryView");

					return primaryViewJSONObject.get("url");
				}

				public String getTestErrorMessage(JSONObject jsonObject) {
					StringBuilder sb = new StringBuilder();

					if (!jsonObject.isNull("errorDetails")) {
						sb.append(fixJSON(jsonObject.get("errorDetails")));
						sb.append("<br /><br />");
					}

					sb.append(fixJSON(jsonObject.get("errorStackTrace")));

					String errorMessage = sb.toString();

					sb = new StringBuilder();

					sb.append("<pre>");

					if (errorMessage.length() > 20000) {
						int x = errorMessage.indexOf("<br />", 2000);
						int y = errorMessage.indexOf("<br />", errorMessage.length() - 2000);

						sb.append(errorMessage.substring(0, x));
						sb.append("<br />...</pre>");
						sb.append("<pre>...<br />");
						sb.append(errorMessage.substring(y));
					}
					else {
						sb.append(errorMessage);
					}

					sb.append("</pre>");

					return sb.toString();
				}

				public String toFormattedBuildTime(String githubJenkinsBuildTime) {
					int milliseconds = Integer.parseInt(githubJenkinsBuildTime);

					int seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds) % 60;
					int minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds) % 60;
					int hours = TimeUnit.MILLISECONDS.toHours(milliseconds);

					StringBuilder sb = new StringBuilder();

					if (hours > 0) {
						sb.append(hours);
						sb.append(" hour");

						if (hours > 1) {
							sb.append("s");
						}

						sb.append(" ");
					}

					if (minutes > 0) {
						sb.append(minutes);
						sb.append(" minute");

						if (minutes > 1) {
							sb.append("s");
						}

						sb.append(" ");
					}

					sb.append(seconds);
					sb.append(" second");

					if (seconds > 1) {
						sb.append("s");
					}

					return sb.toString();
				}

				public JSONObject toJSONObject(String url) {
					return new JSONObject(toString(url));
				}

				public String toString(String url) {
					StringBuilder sb = new StringBuilder();

					URL urlObject = new URL(fixURL(url));

					InputStreamReader inputStreamReader = new InputStreamReader(urlObject.openStream());

					BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

					String line = null;

					while ((line = bufferedReader.readLine()) != null) {
						sb.append(line);
						sb.append("\n");
					}

					bufferedReader.close();

					return sb.toString();
				}

				StringBuilder sb = new StringBuilder();

				sb.append("<h1>Some tests FAILED!</h1>");

				String githubJenkinsBuildTime = project.getProperty("github.jenkins.build.time");

				if (githubJenkinsBuildTime != null) {
					sb.append("<p>Build Time: ");
					sb.append(toFormattedBuildTime(githubJenkinsBuildTime));
					sb.append("</p>");
				}

				sb.append("<h1>See the following links for more information.</h1>");
				sb.append("<ul>");

				String githubJenkinsJobInvocationURLPathsString = project.getProperty("github.jenkins.job.invocation.url.paths");

				String[] githubJenkinsJobInvocationURLPaths = githubJenkinsJobInvocationURLPathsString.split(" ");

				for (String githubJenkinsJobInvocationURLPath : githubJenkinsJobInvocationURLPaths) {
					String remoteGithubJenkinsJobInvocationURL = getRemoteGithubJenkinsURL() + githubJenkinsJobInvocationURLPath;

					sb.append("<li><a href=\\\"");
					sb.append(remoteGithubJenkinsJobInvocationURL);
					sb.append("\\\">");
					sb.append(remoteGithubJenkinsJobInvocationURL);
					sb.append("</a></li>");
				}

				sb.append("</ul>");

				String githubJenkinsFailureCount = project.getProperty("github.jenkins.failure.count");

				if (githubJenkinsFailureCount == null) {
					githubJenkinsFailureCount = "0";
				}

				sb.append("<h1>");
				sb.append(githubJenkinsFailureCount);
				sb.append(" Failure");

				if (!githubJenkinsFailureCount.equals("1")) {
					sb.append("s");
				}

				sb.append(".</h1>");

				String githubJenkinsFailureURLPathsString = project.getProperty("github.jenkins.failure.url.paths");

				String[] githubJenkinsFailureURLPaths = githubJenkinsFailureURLPathsString.split(" ");

				sb.append("<ul>");

				for (String githubJenkinsFailureURLPath : githubJenkinsFailureURLPaths) {
					String localGithubJenkinsFailureURL = project.getProperty("github.jenkins.url") + githubJenkinsFailureURLPath;
					String remoteGithubJenkinsFailureURL = getRemoteGithubJenkinsURL() + githubJenkinsFailureURLPath;

					JSONObject jsonObject = toJSONObject(localGithubJenkinsFailureURL + "/api/json");

					if (jsonObject.has("result")) {
						sb.append("<li>");
						sb.append("<a href=\\\"");
						sb.append(remoteGithubJenkinsFailureURL);
						sb.append("\\\">");
						sb.append(jsonObject.get("fullDisplayName"));
						sb.append("</a>");
						sb.append("<pre>RESULT: ");

						File file = new File(project.getProperty("github.jenkins.shared.dir") + "/javac.output.txt");

						if (file.exists()) {
							sb.append(getDeprecatedMethodErrorMessage(file));
						}
						else if (localGithubJenkinsFailureURL.contains("source")) {
							sb.append(getRebaseErrorMessage(localGithubJenkinsFailureURL));
						}
						else {
							sb.append(getConsoleErrorMessage(localGithubJenkinsFailureURL));
						}

						sb.append("</pre>");
						sb.append("</li>");
					}
					else {
						sb.append("<li>");
						sb.append("<a href=\\\"");
						sb.append(remoteGithubJenkinsFailureURL);
						sb.append("\\\">");
						sb.append(jsonObject.get("className"));
						sb.append(".");
						sb.append(jsonObject.get("name"));
						sb.append("</a>");
						sb.append(getTestErrorMessage(jsonObject));
						sb.append("</li>");
					}
				}

				sb.append("</ul>");

				project.setProperty("github.post.comment.body", sb.toString());
			]]>
		</script>

		<github-post-comment
			github.post.comment.body="${github.post.comment.body}"
		/>
	</target>

	<target name="github-post-comment-success">
		<script classpathref="project.classpath" language="beanshell">
			<![CDATA[
				import java.util.concurrent.TimeUnit;

				import org.json.JSONObject;

				public String fixURL(String url) {
					if (url.contains("(")) {
						url = url.replace("(", "%28");
					}

					if (url.contains(")")) {
						url = url.replace(")", "%29");
					}

					if (url.contains("[")) {
						url = url.replace("[", "%5B");
					}

					if (url.contains("]")) {
						url = url.replace("]", "%5D");
					}

					return url;
				}

				public String getRemoteGithubJenkinsURL() {
					JSONObject jsonObject = toJSONObject(project.getProperty("github.jenkins.url") + "/api/json");

					JSONObject primaryViewJSONObject = jsonObject.get("primaryView");

					return primaryViewJSONObject.get("url");
				}

				public String toFormattedBuildTime(String githubJenkinsBuildTime) {
					int milliseconds = Integer.parseInt(githubJenkinsBuildTime);

					int seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds) % 60;
					int minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds) % 60;
					int hours = TimeUnit.MILLISECONDS.toHours(milliseconds);

					StringBuilder sb = new StringBuilder();

					if (hours > 0) {
						sb.append(hours);
						sb.append(" hour");

						if (hours > 1) {
							sb.append("s");
						}

						sb.append(" ");
					}

					if (minutes > 0) {
						sb.append(minutes);
						sb.append(" minute");

						if (minutes > 1) {
							sb.append("s");
						}

						sb.append(" ");
					}

					sb.append(seconds);
					sb.append(" second");

					if (seconds > 1) {
						sb.append("s");
					}

					return sb.toString();
				}

				public JSONObject toJSONObject(String url) {
					return new JSONObject(toString(url));
				}

				public String toString(String url) {
					StringBuilder sb = new StringBuilder();

					URL urlObject = new URL(fixURL(url));

					InputStreamReader inputStreamReader = new InputStreamReader(urlObject.openStream());

					BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

					String line = null;

					while ((line = bufferedReader.readLine()) != null) {
						sb.append(line);
						sb.append("\n");
					}

					bufferedReader.close();

					return sb.toString();
				}

				StringBuilder sb = new StringBuilder();

				sb.append("<h1>All tests PASSED!</h1>");

				String githubJenkinsBuildTime = project.getProperty("github.jenkins.build.time");

				if (githubJenkinsBuildTime != null) {
					sb.append("<p>Build Time: ");
					sb.append(toFormattedBuildTime(githubJenkinsBuildTime));
					sb.append("</p>");
				}

				sb.append("<h1>See the following links for more information.</h1>");
				sb.append("<ul>");

				String githubJenkinsJobInvocationURLPathsString = project.getProperty("github.jenkins.job.invocation.url.paths");

				String[] githubJenkinsJobInvocationURLPaths = githubJenkinsJobInvocationURLPathsString.split(" ");

				for (String githubJenkinsJobInvocationURLPath : githubJenkinsJobInvocationURLPaths) {
					String remoteGithubJenkinsJobInvocationURL = getRemoteGithubJenkinsURL() + githubJenkinsJobInvocationURLPath;

					sb.append("<li><a href=\\\"");
					sb.append(remoteGithubJenkinsJobInvocationURL);
					sb.append("\\\">");
					sb.append(remoteGithubJenkinsJobInvocationURL);
					sb.append("</a></li>");
				}

				sb.append("</ul>");

				project.setProperty("github.post.comment.body", sb.toString());
			]]>
		</script>

		<github-post-comment
			github.post.comment.body="${github.post.comment.body}"
		/>
	</target>

	<target name="github-post-status-failure">
		<github-post-status
			github.post.status.description="Some tests FAILED!"
			github.post.status.state="failure"
			github.post.status.url="${github.jenkins.results.url}"
		/>
	</target>

	<target name="github-post-status-pending">
		<github-post-status
			github.post.status.description="Tests are running on Jenkins."
			github.post.status.state="pending"
			github.post.status.url="${github.jenkins.results.url}"
		/>
	</target>

	<target name="github-post-status-success">
		<github-post-status
			github.post.status.description="All tests PASSED!"
			github.post.status.state="success"
			github.post.status.url="${github.jenkins.results.url}"
		/>
	</target>
</project>