{"version":3,"sources":["/source/SurfaceCollector.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAOM;;;AACL,WADK,gBACL,GAAc;yBADT,kBACS;;gDACb,wBADa;;;;;;;AAQb,SAAK,SAAL,GAAiB,EAAjB,CARa;;GAAd;;;;;;;;;AADK,6BAiBL,iCAAW,kBAAkB,UAAU;AACtC,OAAI,KAAK,SAAL,CAAe,gBAAf,CAAJ,EAAsC;AACrC,SAAK,aAAL,CAAmB,gBAAnB,EAAqC,QAArC,EADqC;IAAtC,MAEO;AACN,SAAK,SAAL,CAAe,gBAAf,IAAmC,YAAY,EAAZ,CAD7B;AAEN,SAAK,SAAL,CAAe,gBAAf,EAAiC,gBAAjC,GAAoD,gBAApD,CAFM;IAFP;;;AAlBI,6BA6BL,6CAAkB;AACjB,QAAK,SAAL,GAAiB,IAAjB,CADiB;;;AA7Bb,6BAsCL,iCAAW,kBAAkB;AAC5B,UAAO,KAAK,SAAL,CAAe,gBAAf,IAAmC,KAAK,SAAL,CAAe,gBAAf,CAAnC,GAAsE,IAAtE,CADqB;;;AAtCxB,6BA6CL,iDAAoB;AACnB,QAAK,SAAL,GAAiB,EAAjB,CADmB;;;AA7Cf,6BAqDL,uCAAc,kBAAkB;AAC/B,QAAK,SAAL,CAAe,gBAAf,IAAmC,IAAnC,CAD+B;;;AArD3B,6BA8DL,uCAAc,kBAAkB,UAAU;AACzC,iBAAO,KAAP,CAAa,KAAK,SAAL,CAAe,gBAAf,CAAb,EAA+C,QAA/C,EADyC;;;SA9DrC;;;;mBAmES","sourcesContent":["'use strict';\n\nimport { object, Disposable } from 'metal';\n\n/**\n * Stores surface data to be used later by Components.\n */\nclass SurfaceCollector extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds all registered surfaces, mapped by their element ids.\n\t\t * @type {!Array<!Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces_ = {};\n\t}\n\n\t/**\n\t * Adds a surface to this collector.\n\t * @param {string} surfaceElementId\n\t * @param {Object=} opt_data Surface data to be stored.\n\t */\n\taddSurface(surfaceElementId, opt_data) {\n\t\tif (this.surfaces_[surfaceElementId]) {\n\t\t\tthis.updateSurface(surfaceElementId, opt_data);\n\t\t} else {\n\t\t\tthis.surfaces_[surfaceElementId] = opt_data || {};\n\t\t\tthis.surfaces_[surfaceElementId].surfaceElementId = surfaceElementId;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.surfaces_ = null;\n\t}\n\n\t/**\n\t * Gets the data for the given surface id.\n\t * @param {string} surfaceElementId\n\t * @return {!Object}\n\t */\n\tgetSurface(surfaceElementId) {\n\t\treturn this.surfaces_[surfaceElementId] ? this.surfaces_[surfaceElementId] : null;\n\t}\n\n\t/**\n\t * Removes all surfaces from this collector.\n\t */\n\tremoveAllSurfaces() {\n\t\tthis.surfaces_ = [];\n\t}\n\n\t/**\n\t * Removes the surface with the given surface id.\n\t * @param {string} surfaceElementId\n\t */\n\tremoveSurface(surfaceElementId) {\n\t\tthis.surfaces_[surfaceElementId] = null;\n\t}\n\n\t/**\n\t * Updates a surface from this collector.\n\t * @param {string} surfaceElementId\n\t * @param {Object=} opt_data Surface data to update the existing data.\n\t */\n\tupdateSurface(surfaceElementId, opt_data) {\n\t\tobject.mixin(this.surfaces_[surfaceElementId], opt_data);\n\t}\n}\n\nexport default SurfaceCollector;\n"]}