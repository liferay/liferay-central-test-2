{"version":3,"sources":["/source/AutocompleteBase.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWM;;;;;;;AAIL,WAJK,gBAIL,CAAY,UAAZ,EAAwB;yBAJnB,kBAImB;;gDACvB,sBAAM,UAAN,GADuB;;AAGvB,SAAK,aAAL,GAAqB,0BAArB,CAHuB;AAIvB,SAAK,EAAL,CAAQ,QAAR,EAAkB,MAAK,MAAL,CAAlB,CAJuB;;GAAxB;;;;;;;AAJK,6BAcL,+BAAW;AACV,OAAI,KAAK,YAAL,EAAmB;AACtB,SAAK,aAAL,CAAmB,GAAnB,CAAuB,cAAI,EAAJ,CAAO,KAAK,YAAL,EAAmB,OAA1B,EAAmC,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAnC,CAAvB,EADsB;IAAvB;;;AAfI,6BAuBL,+BAAW;AACV,QAAK,aAAL,CAAmB,kBAAnB,GADU;;;AAvBN,6BAgCL,+CAAmB;AAClB,QAAK,OAAL,CAAa,KAAK,YAAL,CAAkB,KAAlB,CAAb,CADkB;;;AAhCd,6BAyCL,2BAAQ,OAAO;AACd,OAAI,OAAO,IAAP,CADU;;AAGd,OAAI,KAAK,cAAL,EAAqB;AACxB,SAAK,cAAL,CAAoB,MAApB,CAA2B,8BAA3B,EADwB;IAAzB;;AAIA,OAAI,eAAe,KAAK,IAAL,CAAU,KAAV,CAAf,CAPU;AAQd,OAAI,CAAC,gBAAK,SAAL,CAAe,YAAf,CAAD,EAA+B;AAClC,mBAAe,kBAAmB,OAAnB,CAA2B,YAA3B,CAAf,CADkC;IAAnC;;AAIA,QAAK,cAAL,GAAsB,aAAa,IAAb,CAAkB,UAAS,IAAT,EAAe;AACtD,QAAI,MAAM,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACxB,YAAO,KAAK,GAAL,CAAS,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAT,EAAiC,MAAjC,CAAwC;aAAO,gBAAK,eAAL,CAAqB,GAArB;MAAP,CAA/C,CADwB;KAAzB;IADuC,CAAxC,CAZc;;AAkBd,UAAO,KAAK,cAAL,CAlBO;;;AAzCV,6BAqEL,6BAAS,KAAK;AACb,OAAI,CAAC,gBAAK,UAAL,CAAgB,GAAhB,CAAD,EAAuB;AAC1B,WAAO,YAAW;AACjB,YAAO,GAAP,CADiB;KAAX,CADmB;IAA3B;AAKA,UAAO,GAAP,CANa;;;SArET;;;;;;;;;;;AAoFN,kBAAiB,KAAjB,GAAyB;;;;;;;AAOxB,QAAM;AACL,WAAQ,UAAR;GADD;;;;;;;AASA,UAAQ;AACP,UAAO,gBAAK,gBAAL;AACP,cAAW,gBAAK,UAAL;GAFZ;;;;;;AASA,gBAAc;AACb,WAAQ,cAAI,SAAJ;GADT;;;;;;;;;;;;AAcA,UAAQ;AACP,UAAO,eAAS,aAAT,EAAwB;AAC9B,SAAK,YAAL,CAAkB,KAAlB,GAA0B,cAAc,WAAd,CADI;AAE9B,SAAK,YAAL,CAAkB,KAAlB,GAF8B;IAAxB;AAIP,cAAW,gBAAK,UAAL;GALZ;;;;;;AAYA,WAAS;AACR,cAAW,gBAAK,SAAL;AACX,UAAO,KAAP;GAFD;EAnDD;;mBAyDe;AACoD,yBAAc,QAAd,CAAuB,kBAAvB,EAA2C,gBAA3C","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport Component from 'metal-component';\nimport { EventHandler } from 'metal-events';\n\n/*\n * AutocompleteBase component.\n */\nclass AutocompleteBase extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.eventHandler_ = new EventHandler();\n\t\tthis.on('select', this.select);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tif (this.inputElement) {\n\t\t\tthis.eventHandler_.add(dom.on(this.inputElement, 'input', this.handleUserInput_.bind(this)));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis.eventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Handles the user input.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleUserInput_() {\n\t\tthis.request(this.inputElement.value);\n\t}\n\n\t/**\n\t * Cancels pending request and starts a request for the user input.\n\t * @param {string} query\n\t * @return {!CancellablePromise} Deferred request.\n\t */\n\trequest(query) {\n\t\tvar self = this;\n\n\t\tif (this.pendingRequest) {\n\t\t\tthis.pendingRequest.cancel('Cancelled by another request');\n\t\t}\n\n\t\tvar deferredData = self.data(query);\n\t\tif (!core.isPromise(deferredData)) {\n\t\t\tdeferredData = CancellablePromise.resolve(deferredData);\n\t\t}\n\n\t\tthis.pendingRequest = deferredData.then(function(data) {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\treturn data.map(self.format.bind(self)).filter(val => core.isDefAndNotNull(val));\n\t\t\t}\n\t\t});\n\n\t\treturn this.pendingRequest;\n\t}\n\n\t/**\n\t * Normalizes the provided data value. If the value is not a function, the\n\t * value will be wrapped in a function which returns the provided value.\n\t * @param {Array.<object>|Promise|function} val The provided value which\n\t *     have to be normalized.\n\t * @protected\n\t */\n\tsetData_(val) {\n\t\tif (!core.isFunction(val)) {\n\t\t\treturn function() {\n\t\t\t\treturn val;\n\t\t\t};\n\t\t}\n\t\treturn val;\n\t}\n}\n\n/**\n * AutocompleteBase attributes definition.\n * @type {!Object}\n * @static\n */\nAutocompleteBase.ATTRS = {\n\t/**\n\t * Function or array, which have to return the results from the query.\n\t * If function, it should return an `array` or a `Promise`. In case of\n\t * Promise, it should be resolved with an array containing the results.\n\t * @type {Array.<object>|function}\n\t */\n\tdata: {\n\t\tsetter: 'setData_'\n\t},\n\n\t/**\n\t * Function that formats each item of the data.\n\t * @type {function}\n\t * @default Identity function.\n\t */\n\tformat: {\n\t\tvalue: core.identityFunction,\n\t\tvalidator: core.isFunction\n\t},\n\n\t/**\n\t * The element which will be used source for the data queries.\n\t * @type {DOMElement|string}\n\t */\n\tinputElement: {\n\t\tsetter: dom.toElement\n\t},\n\n\t/**\n\t * Handles item selection. It will receive two parameters - the selected\n\t * value from the user and the current value from the input element.\n\t * @type {function}\n\t * @default\n\t *   function(selectedValue) {\n\t *\t   this.inputElement.value = selectedValue;\n\t *\t   this.inputElement.focus();\n\t *   }\n\t */\n\tselect: {\n\t\tvalue: function(selectedValue) {\n\t\t\tthis.inputElement.value = selectedValue.textPrimary;\n\t\t\tthis.inputElement.focus();\n\t\t},\n\t\tvalidator: core.isFunction\n\t},\n\n\t/**\n\t * Indicates if the component is visible or not.\n\t * @type {boolean}\n\t */\n\tvisible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: false\n\t}\n};\n\nexport default AutocompleteBase;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('autocompleteBase', AutocompleteBase);"]}