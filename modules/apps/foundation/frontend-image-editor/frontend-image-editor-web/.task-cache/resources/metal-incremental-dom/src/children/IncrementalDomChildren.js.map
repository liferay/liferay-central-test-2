{"version":3,"sources":["IncrementalDomChildren.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KASM;;;;;yBAME,2BAAQ,UAAU;AACxB,eAAY,QAAZ,CADwB;AAExB,WAAQ;AACP,cAAU,EAAV;IADD,CAFwB;AAKxB,oBAAiB,KAAjB,CALwB;AAMxB,+BAAkB,iBAAlB,CAAoC;AACnC,kBAAc,2BAAd;AACA,iBAAa,0BAAb;AACA,UAAM,0BAAN;IAHD,EANwB;;;AANpB,yBA0BE,yBAAO,MAAM,cAAc;AACjC,OAAI,gBAAgB,aAAa,IAAb,CAAhB,EAAoC;AACvC,WADuC;IAAxC;;AAIA,OAAI,KAAK,MAAL,EAAa;AAChB,mBAAe,IAAf,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,KAAK,IAAL,CAAhC,CADgB;IAAjB,MAEO;AACN,QAAI,KAAK,IAAL,EAAW;AACd,oBAAe,WAAf,CAA2B,KAA3B,CAAiC,IAAjC,EAAuC,KAAK,IAAL,CAAvC,CADc;KAAf;AAGA,QAAI,KAAK,QAAL,EAAe;AAClB,UAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,QAAL,CAAc,MAAd,EAAsB,GAA1C,EAA+C;AAC9C,6BAAuB,MAAvB,CAA8B,KAAK,QAAL,CAAc,CAAd,CAA9B,EAAgD,YAAhD,EAD8C;MAA/C;KADD;AAKA,QAAI,KAAK,IAAL,EAAW;AACd,oBAAe,YAAf,CAA4B,KAAK,IAAL,CAAU,CAAV,CAA5B,EADc;KAAf;IAXD;;;SA/BI;;;AAiDN,KAAI,SAAJ;AACA,KAAI,cAAJ;AACA,KAAI,KAAJ;;;;;;;;;AASA,UAAS,eAAT,CAAyB,IAAzB,EAA+B,UAA/B,EAA2C;AAC1C,MAAI,QAAQ;AACX,SAAM,IAAN;AACA,aAAU,EAAV;AACA,WAAQ,UAAR;AACA,WAAQ,cAAR;GAJG,CADsC;AAO1C,iBAAe,QAAf,CAAwB,IAAxB,CAA6B,KAA7B,EAP0C;AAQ1C,SAAO,KAAP,CAR0C;EAA3C;;;;;;;AAgBA,UAAS,2BAAT,GAAuC;AACtC,MAAI,mBAAmB,KAAnB,EAA0B;AAC7B,+BAAkB,gBAAlB,GAD6B;AAE7B,aAAU,KAAV,EAF6B;AAG7B,WAAQ,IAAR,CAH6B;AAI7B,eAAY,IAAZ,CAJ6B;AAK7B,oBAAiB,IAAjB,CAL6B;GAA9B,MAMO;AACN,oBAAiB,eAAe,MAAf,CADX;GANP;EADD;;;;;;;;AAkBA,UAAS,0BAAT,CAAoC,UAApC,EAAyD;oCAAN;;GAAM;;AACxD,mBAAiB,gBAAgB,IAAhB,CAAjB,CADwD;EAAzD;;;;;;;AASA,UAAS,0BAAT,CAAoC,UAApC,EAAyD;qCAAN;;GAAM;;AACxD,kBAAgB,IAAhB,EAAsB,IAAtB,EADwD;EAAzD;;mBAIe","file":"../../../node_modules/metal-incremental-dom/src/children/IncrementalDomChildren.js","sourcesContent":["'use strict';\n\nimport IncrementalDomAop from '../IncrementalDomAop';\n\n/**\n * Provides helpers for capturing children elements from incremental dom calls,\n * as well as actually rendering those captured children via incremental dom\n * later.\n */\nclass IncrementalDomChildren {\n\t/**\n\t * Captures all child elements from incremental dom calls.\n\t * @param {!function} callback Function to be called when children have all\n\t *     been captured.\n \t */\n\tstatic capture(callback) {\n\t\tcallback_ = callback;\n\t\ttree_ = {\n\t\t\tchildren: []\n\t\t};\n\t\tcurrentParent_ = tree_;\n\t\tIncrementalDomAop.startInterception({\n\t\t\telementClose: handleInterceptedCloseCall_,\n\t\t\telementOpen: handleInterceptedOpenCall_,\n\t\t\ttext: handleInterceptedTextCall_\n\t\t});\n\t}\n\n\t/**\n\t * Renders a children tree through incremental dom.\n\t * @param {!{args: Array, !children: Array, isText: ?boolean}}\n\t * @param {function()=} opt_skipNode Optional function that is called for\n\t *     each node to be rendered. If it returns true, the node will be skipped.\n\t * @protected\n\t */\n\tstatic render(tree, opt_skipNode) {\n\t\tif (opt_skipNode && opt_skipNode(tree)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (tree.isText) {\n\t\t\tIncrementalDOM.text.apply(null, tree.args);\n\t\t} else {\n\t\t\tif (tree.args) {\n\t\t\t\tIncrementalDOM.elementOpen.apply(null, tree.args);\n\t\t\t}\n\t\t\tif (tree.children) {\n\t\t\t\tfor (var i = 0; i < tree.children.length; i++) {\n\t\t\t\t\tIncrementalDomChildren.render(tree.children[i], opt_skipNode);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tree.args) {\n\t\t\t\tIncrementalDOM.elementClose(tree.args[0]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvar callback_;\nvar currentParent_;\nvar tree_;\n\n/**\n * Adds a child element to the tree.\n * @param {!Array} args The arguments passed to the incremental dom call.\n * @param {boolean=} opt_isText Optional flag indicating if the child is a\n *     text element.\n * @protected\n */\nfunction addChildToTree_(args, opt_isText) {\n\tvar child = {\n\t\targs: args,\n\t\tchildren: [],\n\t\tisText: opt_isText,\n\t\tparent: currentParent_\n\t};\n\tcurrentParent_.children.push(child);\n\treturn child;\n}\n\n/**\n * Handles an intercepted call to the `elementClose` function from incremental\n * dom.\n * @protected\n */\nfunction handleInterceptedCloseCall_() {\n\tif (currentParent_ === tree_) {\n\t\tIncrementalDomAop.stopInterception();\n\t\tcallback_(tree_);\n\t\ttree_ = null;\n\t\tcallback_ = null;\n\t\tcurrentParent_ = null;\n\t} else {\n\t\tcurrentParent_ = currentParent_.parent;\n\t}\n}\n\n/**\n * Handles an intercepted call to the `elementOpen` function from incremental\n * dom.\n * @param {!function()} originalFn The original function before interception.\n * @protected\n */\nfunction handleInterceptedOpenCall_(originalFn, ...args) {\n\tcurrentParent_ = addChildToTree_(args);\n}\n\n/**\n * Handles an intercepted call to the `text` function from incremental dom.\n * @param {!function()} originalFn The original function before interception.\n * @protected\n */\nfunction handleInterceptedTextCall_(originalFn, ...args) {\n\taddChildToTree_(args, true);\n}\n\nexport default IncrementalDomChildren;\n"],"sourceRoot":"/source/"}