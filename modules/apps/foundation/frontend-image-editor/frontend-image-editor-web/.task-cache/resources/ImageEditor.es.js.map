{"version":3,"sources":["/source/ImageEditor.es.js"],"names":[],"mappings":"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","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport async from 'metal/src/async/async';\nimport core from 'metal/src/core';\nimport dom from 'metal-dom/src/dom';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\nimport Dropdown from 'metal-dropdown/src/Dropdown';\n\nimport ImageEditorHistoryEntry from './ImageEditorHistoryEntry.es';\nimport ImageEditorLoading from './ImageEditorLoading.es';\n\nimport templates from './ImageEditor.soy';\n\n/**\n * ImageEditor\n *\n * This class bootstraps all the necessary parts of an image editor. It only controls\n * the state and history of the editing process, orchestrating how the different parts\n * of the application work.\n *\n * All image processing is delegated to the different image editor capability implementations. The\n * editor provides:\n * - A common way of exposing the functionality.\n * - Some registration points which can be used by the image editor capability implementors\n * to provide UI controls.\n */\nclass ImageEditor extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * This index points to the current state in the history.\n\t\t *\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis.historyIndex_ = 0;\n\n\t\t/**\n\t\t * History of the different image states during edition. Every\n\t\t * entry entry represents a change to the image on top of the\n\t\t * previous one.\n\t\t * - History entries are objects with\n\t\t *     - url (optional): the url representing the image\n\t\t *     - data: the ImageData object of the image\n\t\t *\n\t\t * @type {Array.<Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.history_ = [\n\t\t\tnew ImageEditorHistoryEntry(\n\t\t\t\t{\n\t\t\t\t\turl: this.image\n\t\t\t\t}\n\t\t\t)\n\t\t];\n\n\t\t// Polyfill svg usage for lexicon icons\n\t\tsvg4everybody(\n\t\t\t{\n\t\t\t\tpolyfill: true\n\t\t\t}\n\t\t);\n\n\t\t// Load the first entry imageData and render it on the app.\n\t\tthis.history_[0].getImageData()\n\t\t\t.then((imageData) => {\n\t\t\t\tasync.nextTick(() => {\n\t\t\t\t\tthis.imageEditorReady = true;\n\n\t\t\t\t\tthis.syncImageData_(imageData);\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/**\n\t * Accepts the current changes applied by the active control and creates\n\t * a new entry in the history stack. Doing this will wipe out any\n\t * stale redo states.\n\t */\n\taccept() {\n\t\tlet selectedControl = this.components[this.id + '_selected_control_' + this.selectedControl.variant];\n\n\t\tthis.history_[this.historyIndex_].getImageData()\n\t\t\t.then((imageData) => selectedControl.process(imageData))\n\t\t\t.then((imageData) => this.createHistoryEntry_(imageData))\n\t\t\t.then(() => this.syncHistory_())\n\t\t\t.then(() => {\n\t\t\t\tthis.selectedControl = null;\n\t\t\t\tthis.selectedTool = null;\n\t\t\t});\n\t}\n\n\t/**\n\t * Notifies the opener app that the user wants to close the\n\t * editor without saving the changes\n\t *\n\t * @protected\n\t */\n\tclose_() {\n\t\tLiferay.Util.getWindow().hide();\n\t}\n\n\t/**\n\t * Creates a new history entry state.\n\t *\n\t * @param  {ImageData} imageData The ImageData of the new image.\n\t * @protected\n\t */\n\tcreateHistoryEntry_(imageData) {\n\t\t// Push new state and discard stale redo states\n\t\tthis.historyIndex_++;\n\t\tthis.history_.length = this.historyIndex_ + 1;\n\t\tthis.history_[this.historyIndex_] = new ImageEditorHistoryEntry({data: imageData});\n\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Discards the current changes applied by the active control and reverts\n\t * the image to its state before the control activation.\n\t */\n\tdiscard() {\n\t\tthis.selectedControl = null;\n\t\tthis.selectedTool = null;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Retrieves the editor canvas DOM node.\n\t *\n\t * @return {Element} The canvas element.\n\t */\n\tgetImageEditorCanvas() {\n\t\treturn this.element.querySelector('.lfr-image-editor-image-container canvas');\n\t}\n\n\t/**\n\t * Retrieves the Blob representation of the current image.\n\t *\n\t * @return {CancellablePromise} A promise that will resolve with the image blob.\n\t */\n\tgetImageEditorImageBlob() {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tlet canvas = this.getImageEditorCanvas();\n\n\t\t\tif (canvas.toBlob) {\n\t\t\t\tcanvas.toBlob(resolve);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet data = atob(canvas.toDataURL().split(',')[1]);\n\t\t\t\tlet length = data.length;\n\t\t\t\tlet bytes = new Uint8Array(length);\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tbytes[i] = data.charCodeAt(i);\n\t\t\t\t}\n\n\t\t\t\tresolve(new Blob([bytes], {type: 'image/png'}));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the ImageData representation of the current image.\n\t *\n\t * @return {CancellablePromise} A promise that will resolve with the image data.\n\t */\n\tgetImageEditorImageData() {\n\t\treturn this.history_[this.historyIndex_].getImageData();\n\t}\n\n\t/**\n\t * Notifies the opener app of the result of the save action\n\t *\n\t * @param  {Object} result The server response to the save action\n\t * @protected\n\t */\n\tnotifySaveResult_(result) {\n\t\tthis.components.loading.show = false;\n\n\t\tif (result && result.success) {\n\t\t\tLiferay.Util.getOpener().Liferay.fire(\n\t\t\t\tthis.saveEventName,\n\t\t\t\t{\n\t\t\t\t\tdata: result\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tLiferay.Util.getWindow().hide();\n\t\t}\n\t\telse if (result.error) {\n\t\t\tthis.showError_(result.error.message);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the image back to a previously undone state in the history.\n\t * Redoing an action recovers the undone image changes and enables the\n\t * undo stack in case the user wants to undo the changes again.\n\t */\n\tredo() {\n\t\tthis.historyIndex_++;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Selects a control and starts the edition phase for it.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\trequestImageEditorEdit(event) {\n\t\tlet controls = this.imageEditorCapabilities.tools.reduce(\n\t\t\t(prev, curr) => prev.concat(curr.controls), []);\n\n\t\tlet target = event.delegateTarget || event.currentTarget;\n\t\tlet targetControl = target.getAttribute('data-control');\n\t\tlet targetTool = target.getAttribute('data-tool');\n\n\t\tthis.syncHistory_()\n\t\t\t.then(() => {\n\t\t\t\tthis.selectedControl = controls.filter(tool => tool.variant === targetControl)[0];\n\t\t\t\tthis.selectedTool = targetTool;\n\t\t\t});\n\t}\n\n\t/**\n\t * Queues a request for a preview process of the current image by the\n\t * currently selected control.\n\t */\n\trequestImageEditorPreview() {\n\t\tlet selectedControl = this.components[this.id + '_selected_control_' + this.selectedControl.variant];\n\n\t\tthis.history_[this.historyIndex_].getImageData()\n\t\t\t.then((imageData) => selectedControl.preview(imageData))\n\t\t\t.then((imageData) => this.syncImageData_(imageData));\n\n\t\tthis.components.loading.show = true;\n\t}\n\n\t/**\n\t * Discards all changes and restores the original state of the image.\n\t * Unlike the undo/redo methods, reset will wipe out all the history.\n\t */\n\treset() {\n\t\tthis.historyIndex_ = 0;\n\t\tthis.history_.length = 1;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Tries to save the current image using the provided save url.\n\t *\n\t * @param {MouseEvent} event The MouseEvent that triggered the save action\n\t * @protected\n\t */\n\tsave_(event) {\n\t\tif (!event.delegateTarget.disabled) {\n\t\t\tthis.getImageEditorImageBlob()\n\t\t\t\t.then((imageBlob) => this.submitBlob_(imageBlob))\n\t\t\t\t.then((result) => this.notifySaveResult_(result))\n\t\t\t\t.catch((error) => this.showError_(error));\n\t\t}\n\t}\n\n\t/**\n\t * Shows an error message in the editor\n\t *\n\t * @param  {String} message The error message to show\n\t * @protected\n\t */\n\tshowError_(message) {\n\t\tthis.components.loading.show = false;\n\n\t\tAUI().use('liferay-alert', () => {\n\t\t\tnew Liferay.Alert(\n\t\t\t\t{\n\t\t\t\t\tdelay: {\n\t\t\t\t\t\thide: 2000,\n\t\t\t\t\t\tshow: 0\n\t\t\t\t\t},\n\t\t\t\t\tduration: 3000,\n\t\t\t\t\ticon: 'exclamation-circle',\n\t\t\t\t\tmessage: message,\n\t\t\t\t\ttype: 'danger'\n\t\t\t\t}\n\t\t\t).render(this.element);\n\t\t});\n\t}\n\n\t/**\n\t * Sends a given image blob to the server for processing\n\t * and storing.\n\t *\n\t * @param  {Blob} imageBlob The image blob to send to the server\n\t * @return {CancellablePromise} A promise that follows the xhr submission process\n\t * @protected\n\t */\n\tsubmitBlob_(imageBlob) {\n\t\tlet saveFileName = this.saveFileName;\n\t\tlet saveParamName = this.saveParamName;\n\n\t\tlet promise = new CancellablePromise((resolve, reject) => {\n\t\t\tlet formData = new FormData();\n\n\t\t\tformData.append(saveParamName, imageBlob, saveFileName);\n\n\t\t\tlet requestConfig = {\n\t\t\t\tcontentType: false,\n\t\t\t\tdata: formData,\n\t\t\t\tdataType: \"json\",\n\t\t\t\tprocessData: false,\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: this.saveURL\n\t\t\t};\n\n\t\t\t$.ajax(requestConfig)\n\t\t\t\t.done(resolve)\n\t\t\t\t.fail((jqXHR, status, error) => reject(error));\n\t\t});\n\n\t\tthis.components.loading.show = true;\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Syncs the image and history values after changes to the\n\t * history stack.\n\t *\n\t * @protected\n\t */\n\tsyncHistory_() {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tthis.history_[this.historyIndex_].getImageData()\n\t\t\t\t.then((imageData) => {\n\t\t\t\t\tthis.syncImageData_(imageData);\n\n\t\t\t\t\tthis.history = {\n\t\t\t\t\t\tcanRedo: this.historyIndex_ < this.history_.length - 1,\n\t\t\t\t\t\tcanReset: this.history_.length > 1,\n\t\t\t\t\t\tcanUndo: this.historyIndex_ > 0\n\t\t\t\t\t};\n\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Updates the image data showed in the editable area\n\t *\n\t * @param  {ImageData} imageData The new ImageData value to show on the editor\n\t * @protected\n\t */\n\tsyncImageData_(imageData) {\n\t\tlet width = imageData.width;\n\t\tlet height = imageData.height;\n\n\t\tlet aspectRatio = width / height;\n\n\t\tlet offscreenCanvas = document.createElement('canvas');\n\t\toffscreenCanvas.width = width;\n\t\toffscreenCanvas.height = height;\n\n\t\tlet offscreenContext = offscreenCanvas.getContext('2d');\n\t\toffscreenContext.clearRect(0, 0, width, height);\n\t\toffscreenContext.putImageData(imageData, 0, 0);\n\n\t\tlet canvas = this.getImageEditorCanvas();\n\n\t\tlet boundingBox = dom.closest(this.element, '.portlet-layout');\n\t\tlet availableWidth = boundingBox.offsetWidth;\n\t\tlet availableHeight = boundingBox.offsetHeight - 142 - 40;\n\t\tlet availableAspectRatio = availableWidth / availableHeight;\n\n\t\tif (availableAspectRatio > 1) {\n\t\t\tcanvas.height = availableHeight;\n\t\t\tcanvas.width = aspectRatio * availableHeight;\n\t\t} else {\n\t\t\tcanvas.width = availableWidth;\n\t\t\tcanvas.height = availableWidth / aspectRatio;\n\t\t}\n\n\t\tlet context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t\tcontext.drawImage(offscreenCanvas, 0, 0, width, height, 0, 0, canvas.width, canvas.height);\n\n\t\tcanvas.style.width = canvas.width + 'px';\n\t\tcanvas.style.height = canvas.height + 'px';\n\n\t\tthis.components.loading.show = false;\n\t}\n\n\t/**\n\t * Reverts the image to the previous state in the history. Undoing\n\t * an action brings back the previous version of the image and enables\n\t * the redo stack in case the user wants to reapply the change again.\n\t */\n\tundo() {\n\t\tthis.historyIndex_--;\n\t\tthis.syncHistory_();\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nImageEditor.STATE = {\n\t/**\n\t * Indicates that the editor is ready for user interaction\n\t * @type {Object}\n\t */\n\timageEditorReady: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: false\n\t},\n\n\t/**\n\t * Event to dispatch when the edition has been completed\n\t * @type {String}\n\t */\n\tsaveEventName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Name of the saved image that should be sent\n\t * to the server for the save action\n\t * @type {String}\n\t */\n\tsaveFileName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Name of the param where the image should be sent\n\t * to the server for the save action\n\t * @type {String}\n\t */\n\tsaveParamName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Url to save the image changes\n\t * @type {String}\n\t */\n\tsaveURL: {\n\t\tvalidator: core.isString\n\t}\n};\n\n// Register component\nSoy.register(ImageEditor, templates);\n\nexport default ImageEditor;"]}