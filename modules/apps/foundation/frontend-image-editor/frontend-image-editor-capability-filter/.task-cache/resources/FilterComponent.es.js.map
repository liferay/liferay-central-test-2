{"version":3,"sources":["/source/FilterComponent.es.js"],"names":[],"mappings":"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","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport async from 'metal/src/async/async';\nimport core from 'metal/src/core';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\nimport componentTemplates from './FilterComponent.soy';\nimport controlsTemplates from './FilterControls.soy';\n\n/**\n * Filter Component\n */\nclass FilterComponent extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tthis.cache_ = {};\n\n\t\tasync.nextTick(() => {\n\t\t\tthis.getImageEditorImageData()\n\t\t\t\t.then((imageData) => CancellablePromise.resolve(this.generateThumbnailImageData_(imageData)))\n\t\t\t\t.then((previewImageData) => this.generateThumbnails_(previewImageData))\n\t\t\t\t.then(() => this.prefetchFilters_());\n\t\t});\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tthis.cache_ = {};\n\t}\n\n\t/**\n\t * Generates a specific thumbnail for a given filter.\n\t *\n\t * @param  {String} filter The filter to generate the thumbnail for.\n\t * @param  {ImageData} imageData The image data to apply the filter to.\n\t * @return {CancellablePromise} A promise to be fullfilled when the\n\t * thumbnail has been generated.\n\t */\n\tgenerateThumbnail_(filter, imageData) {\n\t\tlet promise = this.spawnWorker_({\n\t\t\tfilter: filter,\n\t\t\timageData: imageData\n\t\t});\n\n\t\tpromise.then((imageData) => {\n\t\t\tlet canvas = this.element.querySelector('#' + this.key + filter + ' canvas');\n\t\t\tcanvas.getContext('2d').putImageData(imageData, 0, 0);\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Generates the complete set of thumbnails for the component filters.\n\t *\n\t * @param  {ImageData} imageData The thumbnail image data (small version)\n\t * @return {CancellablePromise} A promise to be fullfilled when all thumbnails\n\t * have been generated.\n\t */\n\tgenerateThumbnails_(imageData) {\n\t\treturn CancellablePromise.all(\n\t\t\tthis.filters.map(filter => this.generateThumbnail_(filter, imageData))\n\t\t);\n\t}\n\n\t/**\n\t * Generates a resized version of the image data to generate the\n\t * thumbnails more efficiently.\n\t *\n\t * @param  {ImageData} imageData The original image data\n\t * @return {ImageData} The resized image data\n\t */\n\tgenerateThumbnailImageData_(imageData) {\n\t\tlet thumbnailSize = this.thumbnailSize;\n\t\tlet imageWidth = imageData.width;\n\t\tlet imageHeight = imageData.height;\n\n\t\tlet rawCanvas = document.createElement('canvas');\n\t\trawCanvas.width = imageWidth;\n\t\trawCanvas.height = imageHeight;\n\t\trawCanvas.getContext('2d').putImageData(imageData, 0, 0);\n\n\t\tlet commonSize = imageWidth > imageHeight ? imageHeight : imageWidth;\n\n\t\tlet canvas = document.createElement('canvas');\n\t\tcanvas.width = thumbnailSize;\n\t\tcanvas.height = thumbnailSize;\n\n\t\tlet context = canvas.getContext('2d');\n\t\tcontext.drawImage(rawCanvas, imageWidth - commonSize, imageHeight - commonSize, commonSize, commonSize, 0, 0, thumbnailSize, thumbnailSize);\n\n\t\treturn context.getImageData(0, 0, thumbnailSize, thumbnailSize);\n\t}\n\n\t/**\n\t * Starts optimistically prefetching all the filter results.\n\t *\n\t * @return {CancellablePromise} A promise to be fullfilled when all\n\t * the filters have been prefetched\n\t */\n\tprefetchFilters_() {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tif (!this.isDisposed()) {\n\t\t\t\tlet missingFilters = this.filters.filter((filter) => !this.cache_[filter]);\n\n\t\t\t\tif (!missingFilters.length) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\tthis.getImageEditorImageData()\n\t\t\t\t\t\t.then((imageData) => this.process(imageData, missingFilters[0]))\n\t\t\t\t\t\t.then(() => this.prefetchFilters_());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Applies the selected filter to the image.\n\t *\n\t * @param  {ImageData} imageData ImageData representation of the image.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image.\n\t */\n\tpreview(imageData) {\n\t\treturn this.process(imageData);\n\t}\n\n\t/**\n\t * Notifies the editor that the component wants to generate a new\n\t * preview of the current image.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\tpreviewFilter(event) {\n\t\tthis.currentFilter_ = event.delegateTarget.getAttribute('data-filter');\n\t\tthis.requestImageEditorPreview();\n\t}\n\n\t/**\n\t * Applies the selected filter to the image.\n\t *\n\t * @param  {ImageData} imageData ImageData representation of the image.\n\t * @param {String} filterName The filter to apply to the image.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image.\n\t */\n\tprocess(imageData, filterName) {\n\t\tlet filter = filterName || this.currentFilter_;\n\t\tlet promise = this.cache_[filter];\n\n\t\tif (!promise) {\n\t\t\tpromise = this.spawnWorker_({\n\t\t\t\tfilter: filter,\n\t\t\t\timageData: imageData\n\t\t\t});\n\n\t\t\tthis.cache_[filter] = promise;\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Spawns the a webworker to do the image processing in a different thread.\n\t *\n\t * @param  {String} workerURI URI of the worker to spawn.\n\t * @param  {Object} message An object with the image and filter preset.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image.\n\t */\n\tspawnWorker_(message) {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tlet processWorker = new Worker(this.modulePath + '/FilterWorker.js');\n\n\t\t\tprocessWorker.onmessage = (event) => resolve(event.data);\n\t\t\tprocessWorker.postMessage(message);\n\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nFilterComponent.STATE = {\n\t/**\n\t * Array of available filters\n\t * @type {Object}\n\t */\n\tfilters: {\n\t\tvalidator: core.isArray,\n\t\tvalue: ['none', 'ruby', 'absinthe', 'chroma', 'atari', 'tripel', 'ailis', 'flatfoot', 'pyrexia', 'umbra', 'rouge', 'idyll', 'glimmer', 'elysium', 'nucleus', 'amber', 'paella', 'aureus', 'expanse', 'orchid']\n\t},\n\n\t/**\n\t * Injected helper to get the editor image data\n\t * @type {Function}\n\t */\n\tgetImageEditorImageData: {\n\t\tvalidator: core.isFunction\n\t},\n\n\t/**\n\t * Path of this module\n\t * @type {Function}\n\t */\n\tmodulePath: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Injected helper to get the editor image data\n\t * @type {Function}\n\t */\n\trequestImageEditorPreview: {\n\t\tvalidator: core.isFunction\n\t},\n\n\t/**\n\t * Size of the thumbnails. (size x size)\n\t * @type {Number}\n\t */\n\tthumbnailSize: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 55\n\t}\n};\n\n// Register component\nSoy.register(FilterComponent, componentTemplates);\n\nexport default FilterComponent;"]}