{"version":3,"sources":["/source/SoyRenderer.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { core, object } from 'metal';\nimport dom from 'metal-dom';\nimport { Component, ComponentRegistry, SurfaceRenderer } from 'metal-component';\nimport SoyAop from './SoyAop';\nimport SoyTemplates from './SoyTemplates';\n\n// The injected data that will be passed to soy templates.\nvar ijData = {};\n\n/**\n * A `SurfaceRenderer` that enables components to be rendered via soy templates. It\n * automatically creates surfaces named after each template and uses template params\n * as render attributes. That means that when an attribute value changes, the templates\n * that have a parameter with the same name will be automatically rendered again.\n * @extends {SurfaceRenderer}\n */\nclass SoyRenderer extends SurfaceRenderer {\n\t/**\n\t * Adds surfaces from the soy templates.\n\t * @protected\n\t */\n\taddSurfacesFromTemplates_() {\n\t\tvar name = this.component_.getName();\n\t\tvar templates = SoyTemplates.get(name);\n\t\tvar templateNames = Object.keys(templates);\n\t\tfor (var i = 0; i < templateNames.length; i++) {\n\t\t\tvar templateName = templateNames[i];\n\t\t\tvar templateFn = SoyAop.getOriginalFn(templates[templateName]);\n\t\t\tif (SoyRenderer.isSurfaceTemplate_(templateName, templateFn)) {\n\t\t\t\tvar surfaceId = templateName === 'render' ? this.component_.id : templateName;\n\t\t\t\tthis.addSurface(surfaceId, {\n\t\t\t\t\trenderAttrs: templateFn.params,\n\t\t\t\t\ttemplateComponentName: name,\n\t\t\t\t\ttemplateName: templateName\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the config data for a component from the data that was passed to its\n\t * soy template function.\n\t * @param {string} id The id of the component.\n\t * @param {!Object} templateData\n\t * @return {!Object} The component's config data.\n\t * @protected\n\t */\n\tstatic buildComponentConfigData_(id, templateData) {\n\t\tvar config = {\n\t\t\tid: id\n\t\t};\n\t\tfor (var key in templateData) {\n\t\t\tconfig[key] = templateData[key];\n\t\t}\n\t\treturn config;\n\t}\n\n\t/**\n\t * Builds the data object that should be passed to a template from the given component.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildTemplateData_() {\n\t\tvar component = this.component_;\n\t\tvar names = component.getAttrNames().filter(function(name) {\n\t\t\t// Get all attribute values except for \"element\", since it helps performance and this\n\t\t\t// attribute shouldn't be referenced inside a soy template anyway.\n\t\t\treturn name !== 'element';\n\t\t});\n\t\tvar surface = this.getSurface(component.id);\n\t\tvar data = (surface && surface.componentData) ? surface.componentData : {};\n\t\tvar attrs = object.map(component.getAttrs(names), function(key, value) {\n\t\t\tif (component.getAttrConfig(key).isHtml && core.isString(value)) {\n\t\t\t\treturn SoyRenderer.sanitizeHtml(value);\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t});\n\t\treturn object.mixin(data, attrs);\n\t}\n\n\t/**\n\t * Creates and instantiates a component that has the given soy template function as its\n\t * main render template. All keys present in the config object, if one is given, will be\n\t * attributes of this component, and the object itself will be passed to the constructor.\n\t * @param {!function()} templateFn\n\t * @param {(Element|string)=} opt_element The element that should be decorated. If none is given,\n\t *   one will be created and appended to the document body.\n\t * @param {Object=} opt_data Data to be passed to the soy template when it's called.\n\t * @return {!Component}\n\t */\n\tstatic createComponentFromTemplate(templateFn, opt_element, opt_data) {\n\t\tvar element = opt_element ? dom.toElement(opt_element) : null;\n\t\tvar data = object.mixin(\n\t\t\t{\n\t\t\t\tid: element ? element.id : null\n\t\t\t},\n\t\t\topt_data,\n\t\t\t{\n\t\t\t\telement: element\n\t\t\t}\n\t\t);\n\n\t\tvar name = 'TemplateComponent' + core.getUid();\n\t\tclass TemplateComponent extends Component {\n\t\t}\n\t\tTemplateComponent.RENDERER = SoyRenderer;\n\t\tComponentRegistry.register(TemplateComponent, name);\n\t\tSoyTemplates.set(name, {\n\t\t\trender: function(opt_attrs, opt_ignored, opt_ijData) {\n\t\t\t\treturn SoyAop.getOriginalFn(templateFn)(data, opt_ignored, opt_ijData);\n\t\t\t}\n\t\t});\n\t\tSoyAop.registerTemplates(name);\n\t\treturn new TemplateComponent(data);\n\t}\n\n\t/**\n\t * Decorates html rendered by the given soy template function, instantiating any referenced\n\t * components in it.\n\t * @param {!function()} templateFn\n\t * @param {(Element|string)=} opt_element The element that should be decorated. If none is given,\n\t *   one will be created and appended to the document body.\n\t * @param {Object=} opt_data Data to be passed to the soy template when it's called.\n\t * @return {!Component} The component that was created for this action. Contains\n\t *   references to components that were rendered by the given template function.\n\t */\n\tstatic decorateFromTemplate(templateFn, opt_element, opt_data) {\n\t\treturn SoyRenderer.createComponentFromTemplate(templateFn, opt_element, opt_data).decorate();\n\t}\n\n\t/**\n\t * Generates the id for a surface that was found by a soy template call.\n\t * @param {string} parentSurfaceId The id of the parent surface, or undefined\n\t *   if there is none.\n\t * @param {!Object} data The placeholder data registered for this surface.\n\t * @return {string} The generated id.\n\t * @override\n\t */\n\tgenerateSurfaceElementId(parentSurfaceId, data) {\n\t\tif (data.templateName &&\n\t\t\tparentSurfaceId === this.component_.id &&\n\t\t\t!this.firstSurfaceFound_[data.templateName]) {\n\t\t\tthis.firstSurfaceFound_[data.templateName] = true;\n\t\t\treturn this.prefixSurfaceId(data.templateName);\n\t\t} else {\n\t\t\treturn super.generateSurfaceElementId(parentSurfaceId);\n\t\t}\n\t}\n\n\t/**\n\t * Renders the appropriate soy template for the specified surface.\n\t * @param {!Object} surface The surface configuration.\n\t * @param {string=} opt_skipContents True if only the element's tag needs to be rendered.\n\t * @return {string}\n\t * @override\n\t */\n\tgetSurfaceContent(surface, opt_skipContents) {\n\t\tif (surface.surfaceElementId === this.component_.id) {\n\t\t\tif (!surface.renderAttrs) {\n\t\t\t\tthis.addSurfacesFromTemplates_();\n\t\t\t}\n\t\t\tthis.firstSurfaceFound_ = {};\n\t\t}\n\n\t\tthis.surfaceBeingRendered_ = surface.surfaceElementId;\n\t\tthis.skipInnerCalls_ = this.skipInnerCalls_ || opt_skipContents;\n\n\t\tvar data = surface.templateData;\n\t\tsurface.templateData = null;\n\t\tvar content = this.renderTemplateByName_(\n\t\t\tsurface.templateComponentName,\n\t\t\tsurface.templateName,\n\t\t\tdata\n\t\t);\n\n\t\tthis.surfaceBeingRendered_ = null;\n\t\tthis.skipInnerCalls_ = false;\n\t\treturn content;\n\t}\n\n\t/**\n\t * Handles a call to the SoyRenderer component template.\n\t * @param {string} componentName The component's name.\n\t * @param {Object} data The data the template was called with.\n\t * @return {string} A placeholder to be rendered instead of the content the template\n\t *   function would have returned.\n\t * @protected\n\t */\n\thandleComponentCall_(componentName, data) {\n\t\tvar surfaceData = {\n\t\t\tcomponentName: componentName\n\t\t};\n\t\tvar id = (data || {}).id;\n\t\tif (!id) {\n\t\t\tid = this.generateSurfaceElementId(this.surfaceBeingRendered_, surfaceData);\n\t\t}\n\t\tsurfaceData.componentData = SoyRenderer.buildComponentConfigData_(id, data);\n\t\treturn this.buildPlaceholder(id, surfaceData);\n\t}\n\n\t/**\n\t * Handles a call to a soy template.\n\t * @param {string} templateComponentName The name of the component that this template was belongs to.\n\t * @param {string} templateName The name of this template.\n\t * @param {!function()} originalFn The original template function that was intercepted.\n\t * @param {!Object} data The data the template was called with.\n\t * @param {*} opt_ignored\n\t * @param {Object} opt_ijData Template injected data object.\n\t * @return {string}\n\t * @protected\n\t */\n\thandleInterceptedCall_(templateComponentName, templateName, originalFn, data, opt_ignored, opt_ijData) {\n\t\tif (this.skipInnerCalls_) {\n\t\t\treturn '';\n\t\t} else if (templateName === 'render') {\n\t\t\treturn this.handleComponentCall_.call(this, templateComponentName, data);\n\t\t} else {\n\t\t\treturn this.handleSurfaceCall_.call(this, templateComponentName, templateName, originalFn, data, opt_ignored, opt_ijData);\n\t\t}\n\t}\n\n\t/**\n\t * Handles a call to the SoyRenderer surface template.\n\t * @param {string} templateComponentName The name of the component that this template was belongs to.\n\t * @param {string} templateName The name of this template.\n\t * @param {!function()} originalFn The original template function that was intercepted.\n\t * @param {!Object} data The data the template was called with.\n\t * @param {*} opt_ignored\n\t * @param {Object} opt_ijData Template injected data object.\n\t * @return {string} A placeholder to be rendered instead of the content the template\n\t *   function would have returned.\n\t * @protected\n\t */\n\thandleSurfaceCall_(templateComponentName, templateName, originalFn, data, opt_ignored, opt_ijData) {\n\t\tvar surfaceData = {\n\t\t\tstatic: originalFn.static,\n\t\t\ttemplateComponentName: templateComponentName,\n\t\t\ttemplateData: data,\n\t\t\ttemplateName: templateName\n\t\t};\n\t\tvar surfaceElementId;\n\t\tif (core.isDefAndNotNull(data.surfaceElementId)) {\n\t\t\tsurfaceElementId = data.surfaceElementId;\n\t\t} else if (core.isDefAndNotNull(data.surfaceId)) {\n\t\t\tsurfaceElementId = this.getSurfaceElementId(data.surfaceId.toString());\n\t\t} else {\n\t\t\tif (originalFn.private) {\n\t\t\t\treturn originalFn.call(null, data, opt_ignored, opt_ijData);\n\t\t\t}\n\t\t\tsurfaceElementId = this.generateSurfaceElementId(this.surfaceBeingRendered_, surfaceData);\n\t\t}\n\t\treturn this.buildPlaceholder(surfaceElementId, surfaceData);\n\t}\n\n\t/**\n\t * Checks if a template is a surface template.\n\t * @param {string} templateName\n\t * @param {!function()} templateFn\n\t * @return {boolean}\n\t * @protected\n\t */\n\tstatic isSurfaceTemplate_(templateName, templateFn) {\n\t\treturn templateName.substr(0, 13) !== '__deltemplate' && !templateFn.private;\n\t}\n\n\t/**\n\t * Renders the given soy template function, instantiating any referenced components in it.\n\t * @param {!function()} templateFn\n\t * @param {(Element|string)=} opt_element The element that should be decorated. If none is given,\n\t *   one will be created and appended to the document body.\n\t * @param {Object=} opt_data Data to be passed to the soy template when it's called.\n\t * @return {!Component} The component that was created for this action. Contains\n\t *   references to components that were rendered by the given template function.\n\t */\n\tstatic renderFromTemplate(templateFn, opt_element, opt_data) {\n\t\treturn SoyRenderer.createComponentFromTemplate(templateFn, opt_element, opt_data).render();\n\t}\n\n\t/**\n\t * Renders the specified template.\n\t * @param {!function()} templateFn\n\t * @param {Object=} opt_data\n\t * @return {string} The template's result content.\n\t * @protected\n\t */\n\trenderTemplate_(templateFn, opt_data) {\n\t\tSoyAop.startInterception(this.handleInterceptedCall_.bind(this));\n\t\ttemplateFn = SoyAop.getOriginalFn(templateFn);\n\t\tvar content = templateFn(opt_data || this.buildTemplateData_(), null, ijData).content;\n\t\tSoyAop.stopInterception();\n\t\treturn content;\n\t}\n\n\t/**\n\t * Renders the template with the specified name.\n\t * @param {string} templateComponentName\n\t * @param {string} templateName\n\t * @param {Object=} opt_data\n\t * @return {string} The template's result content.\n\t * @protected\n\t */\n\trenderTemplateByName_(templateComponentName, templateName, opt_data) {\n\t\tvar elementTemplate = SoyTemplates.get(templateComponentName, templateName);\n\t\tif (core.isFunction(elementTemplate)) {\n\t\t\treturn this.renderTemplate_(elementTemplate, opt_data);\n\t\t}\n\t}\n\n\t/**\n\t * Sanitizes the given html string, so it can skip escaping when passed to a\n\t * soy template.\n\t * @param {string} html\n\t * @return {soydata.SanitizedHtml}\n\t */\n\tstatic sanitizeHtml(html) {\n\t\treturn soydata.VERY_UNSAFE.ordainSanitizedHtml(html);\n\t}\n\n\t/**\n\t * Sets the injected data object that should be passed to templates.\n\t * @param {Object} data\n\t */\n\tstatic setInjectedData(data) {\n\t\tijData = data || {};\n\t}\n}\n\nvar originalSanitizedHtmlFromFn = soydata.SanitizedHtml.from;\nsoydata.SanitizedHtml.from = function(value) {\n\tif (value && value.contentKind === 'HTML') {\n\t\tvalue = SoyRenderer.sanitizeHtml(value.content);\n\t}\n\treturn originalSanitizedHtmlFromFn(value);\n};\n\n\nexport default SoyRenderer;\n"]}