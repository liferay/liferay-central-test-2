{"version":3,"sources":["/source/ComponentRenderer.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAQM;;;;;;;;;AAML,WANK,iBAML,CAAY,SAAZ,EAAuB;yBANlB,mBAMkB;;gDACtB,0BADsB;;AAEtB,SAAK,UAAL,GAAkB,SAAlB,CAFsB;AAGtB,SAAK,wBAAL,GAAgC,0BAAhC,CAHsB;AAItB,SAAK,wBAAL,CAA8B,GAA9B,CACC,MAAK,UAAL,CAAgB,EAAhB,CAAmB,cAAnB,EAAmC,MAAK,oCAAL,CAA0C,IAA1C,OAAnC,CADD,EAEC,MAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,EAA+B,MAAK,MAAL,CAAY,IAAZ,OAA/B,CAFD,EAJsB;;GAAvB;;;;;;;;;;;;;AANK,8BAyBL,uCAAe;AACd,UAAO,SAAS,aAAT,CAAuB,KAAvB,CAAP,CADc;;;AAzBV,8BAgCL,6CAAkB;AACjB,QAAK,wBAAL,CAA8B,kBAA9B,GADiB;AAEjB,QAAK,wBAAL,GAAgC,IAAhC,CAFiB;;;AAhCb,8BA6CL,qFAAqC,SAAS;AAC7C,OAAI,KAAK,UAAL,CAAgB,WAAhB,EAA6B;AAChC,SAAK,MAAL,CAAY,OAAZ,EADgC;IAAjC;;;AA9CI,8BAwDL,2BAAS;;AAxDJ,8BAiEL,2BAAS;;SAjEJ;;;;mBAoES","sourcesContent":["'use strict';\n\nimport { EventEmitter, EventHandler } from 'metal-events';\n\n/**\n * Base class that component renderers should extend from. It defines the\n * required methods all renderers should have.\n */\nclass ComponentRenderer extends EventEmitter {\n\t/**\n\t * Constructor function for `ComponentRenderer`.\n\t * @param {!Component} component The component that this renderer is\n\t *     responsible for.\n\t */\n\tconstructor(component) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\t\tthis.componentRendererEvents_ = new EventHandler();\n\t\tthis.componentRendererEvents_.add(\n\t\t\tthis.component_.on('attrsChanged', this.handleComponentRendererAttrsChanged_.bind(this)),\n\t\t\tthis.component_.once('render', this.render.bind(this))\n\t\t);\n\t}\n\n\t/**\n\t * Builds and returns the component's main element, without any content. This\n\t * is used by Component when building the element attribute from scratch,\n\t * which can happen before the first render, whenever the attribute is first\n\t * accessed.\n\t * Subclasses should override this to customize the creation of the default\n\t * component element.\n\t * @return {!Element}\n\t */\n\tbuildElement() {\n\t\treturn document.createElement('div');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.componentRendererEvents_.removeAllListeners();\n\t\tthis.componentRendererEvents_ = null;\n\t}\n\n\t/**\n\t * Handles an `attrsChanged` event from this renderer's component. Calls the\n\t * `update` function if the component has already been rendered for the first\n\t * time.\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed attributes as keys, each mapped to an object with its\n\t *     new (newVal) and previous (prevVal) values.\n\t */\n\thandleComponentRendererAttrsChanged_(changes) {\n\t\tif (this.component_.wasRendered) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Renders the component's whole content. When decorating this should avoid\n\t * replacing the existing content if it's already correct.\n\t * @param {decorating: boolean} data\n\t */\n\trender() {}\n\n\t/**\n\t * Updates the component's element html. This is automatically called by\n\t * the component when the value of at least one of its attributes has changed.\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed attributes as keys, each mapped to an object with its\n\t *     new (newVal) and previous (prevVal) values.\n\t */\n\tupdate() {}\n}\n\nexport default ComponentRenderer;\n"]}