{"version":3,"sources":["/source/Popover.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWM;;;;;;;;;oBASL,6CAAiB,cAAc;AAC9B,0BAAM,gBAAN,YAAuB,YAAvB,EAD8B;;AAG9B,OAAI,YAAJ,EAAkB;AACjB,QAAI,cAAc,aAAa,YAAb,CAA0B,cAA1B,CAAd,CADa;AAEjB,QAAI,WAAJ,EAAiB;AAChB,UAAK,OAAL,GAAe,WAAf,CADgB;KAAjB;IAFD;;;AAZI,oBA2BL,mCAAY,SAAS;AACpB,QAAK,OAAL,CAAa,KAAb,CAAmB,OAAnB,GAA6B,UAAU,OAAV,GAAoB,EAApB,CADT;AAEpB,0BAAM,WAAN,YAAkB,OAAlB,EAFoB;;;SA3BhB;;;AAgCN,eAAI,QAAJ,CAAa,OAAb;;;;;;;AAOA,SAAQ,KAAR,GAAgB;;;;;AAKf,WAAS;AACR,WAAQ,IAAR;AACA,cAAW,gBAAK,QAAL;GAFZ;;;;;;;AAUA,iBAAe;AACd,cAAW,MAAM,OAAN;AACX,UAAO,CAAC,OAAD,EAAU,OAAV,CAAP;GAFD;EAfD;;;;;;;AA0BA,SAAQ,KAAR,GAAgB,qBAAY,KAAZ;;mBAED;AACoD,yBAAc,QAAd,CAAuB,SAAvB,EAAkC,OAAlC","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport Soy from 'metal-soy';\nimport { TooltipBase } from 'metal-tooltip';\nimport templates from './Popover.soy';\n\n/**\n * Popover component. Extends the behavior from `TooltipBase`, adding\n * just some UI to it.\n */\nclass Popover extends TooltipBase {\n\t/**\n\t * State synchronization logic for `alignElement`. Overrides the original\n\t * method from `TooltipBase` so the `content` state can be retrived from\n\t * the new aligned element.\n\t * @param {Element} alignElement\n\t * @param {Element} prevAlignElement\n\t * @override\n\t */\n\tsyncAlignElement(alignElement) {\n\t\tsuper.syncAlignElement(alignElement);\n\n\t\tif (alignElement) {\n\t\t\tvar dataContent = alignElement.getAttribute('data-content');\n\t\t\tif (dataContent) {\n\t\t\t\tthis.content = dataContent;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * State synchronization logic for `visible`. Updates the element's display,\n\t * since bootstrap makes it 'none' by default, so we need to change it to\n\t * 'block' when the popover becomes visible.\n\t * @param {boolean} visible\n\t * @override\n\t */\n\tsyncVisible(visible) {\n\t\tthis.element.style.display = visible ? 'block' : '';\n\t\tsuper.syncVisible(visible);\n\t}\n}\nSoy.register(Popover, templates);\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nPopover.STATE = {\n\t/**\n\t * The popover's content.\n\t * @type {string}\n\t */\n\tcontent: {\n\t\tisHtml: true,\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Trigger events used to bind handlers to show and hide popover.\n\t * @type {!Array<string>}\n\t * @default ['click', 'click']\n\t */\n\ttriggerEvents: {\n\t\tvalidator: Array.isArray,\n\t\tvalue: ['click', 'click']\n\t}\n};\n\n/**\n * @inheritDoc\n * @see `Align` class.\n * @static\n */\nPopover.Align = TooltipBase.Align;\n\nexport default Popover;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('popover', Popover);"]}