{"version":3,"sources":["/source/incremental-dom.js"],"names":[],"mappings":"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","sourcesContent":["/* jshint ignore:start */\n\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function (global, factory) {\n  (factory((global.IncrementalDOM = global.IncrementalDOM || {})));\n}(window, function (exports) { 'use strict';\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * A cached reference to the hasOwnProperty function.\n   */\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n   * A cached reference to the create function.\n   */\n  var create = Object.create;\n\n  /**\n   * Used to prevent property collisions between our \"map\" and its prototype.\n   * @param {!Object<string, *>} map The map to check.\n   * @param {string} property The property to check.\n   * @return {boolean} Whether map has property.\n   */\n  var has = function (map, property) {\n    return hasOwnProperty.call(map, property);\n  };\n\n  /**\n   * Creates an map object without a prototype.\n   * @return {!Object}\n   */\n  var createMap = function () {\n    return create(null);\n  };\n\n  /**\n   * Keeps track of information needed to perform diffs for a given DOM node.\n   * @param {!string} nodeName\n   * @param {?string=} key\n   * @constructor\n   */\n  function NodeData(nodeName, key) {\n    /**\n     * The attributes and their values.\n     * @const {!Object<string, *>}\n     */\n    this.attrs = createMap();\n\n    /**\n     * An array of attribute name/value pairs, used for quickly diffing the\n     * incomming attributes to see if the DOM node's attributes need to be\n     * updated.\n     * @const {Array<*>}\n     */\n    this.attrsArr = [];\n\n    /**\n     * The incoming attributes for this Node, before they are updated.\n     * @const {!Object<string, *>}\n     */\n    this.newAttrs = createMap();\n\n    /**\n     * The key used to identify this node, used to preserve DOM nodes when they\n     * move within their parent.\n     * @const\n     */\n    this.key = key;\n\n    /**\n     * Keeps track of children within this node by their key.\n     * {?Object<string, !Element>}\n     */\n    this.keyMap = null;\n\n    /**\n     * Whether or not the keyMap is currently valid.\n     * {boolean}\n     */\n    this.keyMapValid = true;\n\n    /**\n     * The node name for this node.\n     * @const {string}\n     */\n    this.nodeName = nodeName;\n\n    /**\n     * @type {?string}\n     */\n    this.text = null;\n  }\n\n  /**\n   * Initializes a NodeData object for a Node.\n   *\n   * @param {Node} node The node to initialize data for.\n   * @param {string} nodeName The node name of node.\n   * @param {?string=} key The key that identifies the node.\n   * @return {!NodeData} The newly initialized data object\n   */\n  var initData = function (node, nodeName, key) {\n    var data = new NodeData(nodeName, key);\n    node['__incrementalDOMData'] = data;\n    return data;\n  };\n\n  /**\n   * Retrieves the NodeData object for a Node, creating it if necessary.\n   *\n   * @param {Node} node The node to retrieve the data for.\n   * @return {!NodeData} The NodeData for this Node.\n   */\n  var getData = function (node) {\n    var data = node['__incrementalDOMData'];\n\n    if (!data) {\n      var nodeName = node.nodeName.toLowerCase();\n      var key = null;\n\n      if (node instanceof Element) {\n        key = node.getAttribute('key');\n      }\n\n      data = initData(node, nodeName, key);\n    }\n\n    return data;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** @const */\n  var symbols = {\n    default: '__default',\n\n    placeholder: '__placeholder'\n  };\n\n  /**\n   * Applies an attribute or property to a given Element. If the value is null\n   * or undefined, it is removed from the Element. Otherwise, the value is set\n   * as an attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {?(boolean|number|string)=} value The attribute's value.\n   */\n  var applyAttr = function (el, name, value) {\n    if (value == null) {\n      el.removeAttribute(name);\n    } else {\n      el.setAttribute(name, value);\n    }\n  };\n\n  /**\n   * Applies a property to a given Element.\n   * @param {!Element} el\n   * @param {string} name The property's name.\n   * @param {*} value The property's value.\n   */\n  var applyProp = function (el, name, value) {\n    el[name] = value;\n  };\n\n  /**\n   * Applies a style to an Element. No vendor prefix expansion is done for\n   * property names/values.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} style The style to set. Either a string of css or an object\n   *     containing property-value pairs.\n   */\n  var applyStyle = function (el, name, style) {\n    if (typeof style === 'string') {\n      el.style.cssText = style;\n    } else {\n      el.style.cssText = '';\n      var elStyle = el.style;\n      var obj = /** @type {!Object<string,string>} */style;\n\n      for (var prop in obj) {\n        if (has(obj, prop)) {\n          elStyle[prop] = obj[prop];\n        }\n      }\n    }\n  };\n\n  /**\n   * Updates a single attribute on an Element.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value. If the value is an object or\n   *     function it is set on the Element, otherwise, it is set as an HTML\n   *     attribute.\n   */\n  var applyAttributeTyped = function (el, name, value) {\n    var type = typeof value;\n\n    if (type === 'object' || type === 'function') {\n      applyProp(el, name, value);\n    } else {\n      applyAttr(el, name, /** @type {?(boolean|number|string)} */value);\n    }\n  };\n\n  /**\n   * Calls the appropriate attribute mutator for this attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value.\n   */\n  var updateAttribute = function (el, name, value) {\n    var data = getData(el);\n    var attrs = data.attrs;\n\n    if (attrs[name] === value) {\n      return;\n    }\n\n    var mutator = attributes[name] || attributes[symbols.default];\n    mutator(el, name, value);\n\n    attrs[name] = value;\n  };\n\n  /**\n   * A publicly mutable object to provide custom mutators for attributes.\n   * @const {!Object<string, function(!Element, string, *)>}\n   */\n  var attributes = createMap();\n\n  // Special generic mutator that's called for any attribute that does not\n  // have a specific mutator.\n  attributes[symbols.default] = applyAttributeTyped;\n\n  attributes[symbols.placeholder] = function () {};\n\n  attributes['style'] = applyStyle;\n\n  /**\n   * Gets the namespace to create an element (of a given tag) in.\n   * @param {string} tag The tag to get the namespace for.\n   * @param {?Node} parent\n   * @return {?string} The namespace to create the tag in.\n   */\n  var getNamespaceForTag = function (tag, parent) {\n    if (tag === 'svg') {\n      return 'http://www.w3.org/2000/svg';\n    }\n\n    if (getData(parent).nodeName === 'foreignObject') {\n      return null;\n    }\n\n    return parent.namespaceURI;\n  };\n\n  /**\n   * Creates an Element.\n   * @param {Document} doc The document with which to create the Element.\n   * @param {?Node} parent\n   * @param {string} tag The tag for the Element.\n   * @param {?string=} key A key to identify the Element.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element.\n   * @return {!Element}\n   */\n  var createElement = function (doc, parent, tag, key, statics) {\n    var namespace = getNamespaceForTag(tag, parent);\n    var el = undefined;\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, tag);\n    } else {\n      el = doc.createElement(tag);\n    }\n\n    initData(el, tag, key);\n\n    if (statics) {\n      for (var i = 0; i < statics.length; i += 2) {\n        updateAttribute(el, /** @type {!string}*/statics[i], statics[i + 1]);\n      }\n    }\n\n    return el;\n  };\n\n  /**\n   * Creates a Text Node.\n   * @param {Document} doc The document with which to create the Element.\n   * @return {!Text}\n   */\n  var createText = function (doc) {\n    var node = doc.createTextNode('');\n    initData(node, '#text', null);\n    return node;\n  };\n\n  /**\n   * Creates a mapping that can be used to look up children using a key.\n   * @param {?Node} el\n   * @return {!Object<string, !Element>} A mapping of keys to the children of the\n   *     Element.\n   */\n  var createKeyMap = function (el) {\n    var map = createMap();\n    var children = el.children;\n    var count = children.length;\n\n    for (var i = 0; i < count; i += 1) {\n      var child = children[i];\n      var key = getData(child).key;\n\n      if (key) {\n        map[key] = child;\n      }\n    }\n\n    return map;\n  };\n\n  /**\n   * Retrieves the mapping of key to child node for a given Element, creating it\n   * if necessary.\n   * @param {?Node} el\n   * @return {!Object<string, !Node>} A mapping of keys to child Elements\n   */\n  var getKeyMap = function (el) {\n    var data = getData(el);\n\n    if (!data.keyMap) {\n      data.keyMap = createKeyMap(el);\n    }\n\n    return data.keyMap;\n  };\n\n  /**\n   * Retrieves a child from the parent with the given key.\n   * @param {?Node} parent\n   * @param {?string=} key\n   * @return {?Node} The child corresponding to the key.\n   */\n  var getChild = function (parent, key) {\n    return key ? getKeyMap(parent)[key] : null;\n  };\n\n  /**\n   * Registers an element as being a child. The parent will keep track of the\n   * child using the key. The child can be retrieved using the same key using\n   * getKeyMap. The provided key should be unique within the parent Element.\n   * @param {?Node} parent The parent of child.\n   * @param {string} key A key to identify the child with.\n   * @param {!Node} child The child to register.\n   */\n  var registerChild = function (parent, key, child) {\n    getKeyMap(parent)[key] = child;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** @const */\n  var notifications = {\n    /**\n     * Called after patch has compleated with any Nodes that have been created\n     * and added to the DOM.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesCreated: null,\n\n    /**\n     * Called after patch has compleated with any Nodes that have been removed\n     * from the DOM.\n     * Note it's an applications responsibility to handle any childNodes.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesDeleted: null\n  };\n\n  /**\n   * Keeps track of the state of a patch.\n   * @constructor\n   */\n  function Context() {\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.created = notifications.nodesCreated && [];\n\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.deleted = notifications.nodesDeleted && [];\n  }\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markCreated = function (node) {\n    if (this.created) {\n      this.created.push(node);\n    }\n  };\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markDeleted = function (node) {\n    if (this.deleted) {\n      this.deleted.push(node);\n    }\n  };\n\n  /**\n   * Notifies about nodes that were created during the patch opearation.\n   */\n  Context.prototype.notifyChanges = function () {\n    if (this.created && this.created.length > 0) {\n      notifications.nodesCreated(this.created);\n    }\n\n    if (this.deleted && this.deleted.length > 0) {\n      notifications.nodesDeleted(this.deleted);\n    }\n  };\n\n  /**\n  * Makes sure that keyed Element matches the tag name provided.\n  * @param {!string} nodeName The nodeName of the node that is being matched.\n  * @param {string=} tag The tag name of the Element.\n  * @param {?string=} key The key of the Element.\n  */\n  var assertKeyedTagMatches = function (nodeName, tag, key) {\n    if (nodeName !== tag) {\n      throw new Error('Was expecting node with key \"' + key + '\" to be a ' + tag + ', not a ' + nodeName + '.');\n    }\n  };\n\n  /** @type {?Context} */\n  var context = null;\n\n  /** @type {?Node} */\n  var currentNode = undefined;\n\n  /** @type {?Node} */\n  var currentParent = undefined;\n\n  /** @type {?Element|?DocumentFragment} */\n  var root = undefined;\n\n  /** @type {?Document} */\n  var doc = undefined;\n\n  /** @type {?function()} */\n  var findNode = undefined;\n\n  /**\n   * Sets up and restores a patch context, running the patch function with the\n   * provided data.\n   * @param {!Element|!DocumentFragment} node The Element or Document\n   *     where the patch should start.\n   * @param {!function(T)} fn The patching function.\n   * @param {T=} data An argument passed to fn.\n   * @template T\n   */\n  var runPatch = function (node, fn, data) {\n    var prevContext = context;\n    var prevRoot = root;\n    var prevDoc = doc;\n    var prevCurrentNode = currentNode;\n    var prevCurrentParent = currentParent;\n    var previousInAttributes = false;\n    var previousInSkip = false;\n\n    context = new Context();\n    root = node;\n    doc = node.ownerDocument;\n\n    if ('production' !== 'production') {}\n\n    fn(data);\n\n    if ('production' !== 'production') {}\n\n    context.notifyChanges();\n\n    context = prevContext;\n    root = prevRoot;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n  };\n\n  /**\n   * Patches the document starting at node with the provided function. This\n   * function may be called during an existing patch operation.\n   * @param {!Element|!DocumentFragment} node The Element or Document\n   *     to patch.\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM.\n   * @param {T=} data An argument passed to fn to represent DOM state.\n   * @template T\n   */\n  var patchInner = function (node, fn, data) {\n    runPatch(node, function (data) {\n      currentNode = node;\n      currentParent = node.parentNode;\n\n      enterNode();\n      fn(data);\n      exitNode();\n\n      if ('production' !== 'production') {}\n    }, data);\n  };\n\n  /**\n   * Patches an Element with the the provided function. Exactly one top level\n   * element call should be made corresponding to `node`.\n   * @param {!Element} node The Element where the patch should start.\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM. This should have at most one top level\n   *     element call.\n   * @param {T=} data An argument passed to fn to represent DOM state.\n   * @template T\n   */\n  var patchOuter = function (node, fn, data) {\n    runPatch(node, function (data) {\n      currentNode = /** @type {!Element} */{ nextSibling: node };\n      currentParent = node.parentNode;\n\n      fn(data);\n\n      if ('production' !== 'production') {}\n    }, data);\n  };\n\n  /**\n   * Checks whether or not the current node matches the specified nodeName and\n   * key.\n   *\n   * @param {?string} nodeName The nodeName for this node.\n   * @param {?string=} key An optional key that identifies a node.\n   * @return {boolean} True if the node matches, false otherwise.\n   */\n  var matches = function (nodeName, key) {\n    var data = getData(currentNode);\n\n    // Key check is done using double equals as we want to treat a null key the\n    // same as undefined. This should be okay as the only values allowed are\n    // strings, null and undefined so the == semantics are not too weird.\n    return nodeName === data.nodeName && key == data.key;\n  };\n\n  /**\n   * Aligns the virtual Element definition with the actual DOM, moving the\n   * corresponding DOM node to the correct location or creating it if necessary.\n   * @param {string} nodeName For an Element, this should be a valid tag string.\n   *     For a Text, this should be #text.\n   * @param {?string=} key The key used to identify this element.\n   * @param {?Array<*>=} statics For an Element, this should be an array of\n   *     name-value pairs.\n   */\n  var alignWithDOM = function (nodeName, key, statics) {\n    if (currentNode && matches(nodeName, key)) {\n      return;\n    }\n\n    var node = undefined;\n\n    // Check to see if the node has moved within the parent.\n    if (key) {\n      node = getChild(currentParent, key);\n      if (node && 'production' !== 'production') {\n        assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\n      }\n    }\n\n    // Check to see if the `findNode` function (registered through\n    // `registerFindNode`) returns a matching node.\n    if (!node && findNode) {\n      node = findNode.apply(null, arguments);\n      if (node === currentNode) {\n        return;\n      }\n    }\n\n    // Create the node if it doesn't exist.\n    if (!node) {\n      if (nodeName === '#text') {\n        node = createText(doc);\n      } else {\n        node = createElement(doc, currentParent, nodeName, key, statics);\n      }\n\n      if (key) {\n        registerChild(currentParent, key, node);\n      }\n\n      context.markCreated(node);\n    }\n\n    // If the node has a key, remove it from the DOM to prevent a large number\n    // of re-orders in the case that it moved far or was completely removed.\n    // Since we hold on to a reference through the keyMap, we can always add it\n    // back.\n    if (currentNode && getData(currentNode).key) {\n      currentParent.replaceChild(node, currentNode);\n      getData(currentParent).keyMapValid = false;\n    } else {\n      currentParent.insertBefore(node, currentNode);\n    }\n\n    currentNode = node;\n  };\n\n  /**\n   * Clears out any unvisited Nodes, as the corresponding virtual element\n   * functions were never called for them.\n   */\n  var clearUnvisitedDOM = function () {\n    var node = currentParent;\n    var data = getData(node);\n    var keyMap = data.keyMap;\n    var keyMapValid = data.keyMapValid;\n    var child = node.lastChild;\n    var key = undefined;\n\n    if (child === currentNode && keyMapValid) {\n      return;\n    }\n\n    if (data.attrs[symbols.placeholder] && node !== root) {\n      if ('production' !== 'production') {}\n      return;\n    }\n\n    while (child !== currentNode) {\n      node.removeChild(child);\n      context.markDeleted( /** @type {!Node}*/child);\n\n      key = getData(child).key;\n      if (key) {\n        delete keyMap[key];\n      }\n      child = node.lastChild;\n    }\n\n    // Clean the keyMap, removing any unusued keys.\n    if (!keyMapValid) {\n      for (key in keyMap) {\n        child = keyMap[key];\n        if (child.parentNode !== node) {\n          context.markDeleted(child);\n          delete keyMap[key];\n        }\n      }\n\n      data.keyMapValid = true;\n    }\n  };\n\n  /**\n   * Changes to the first child of the current node.\n   */\n  var enterNode = function () {\n    currentParent = currentNode;\n    currentNode = null;\n  };\n\n  /**\n   * Changes to the next sibling of the current node.\n   */\n  var nextNode = function () {\n    if (currentNode) {\n      currentNode = currentNode.nextSibling;\n    } else {\n      currentNode = currentParent.firstChild;\n    }\n  };\n\n  /**\n   * Changes to the parent of the current node, removing any unvisited children.\n   */\n  var exitNode = function () {\n    clearUnvisitedDOM();\n\n    currentNode = currentParent;\n    currentParent = currentParent.parentNode;\n  };\n\n  /**\n   * Makes sure that the current node is an Element with a matching tagName and\n   * key.\n   *\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @return {!Element} The corresponding Element.\n   */\n  var coreElementOpen = function (tag, key, statics) {\n    nextNode();\n    alignWithDOM.apply(null, arguments);\n    enterNode();\n    return (/** @type {!Element} */currentParent\n    );\n  };\n\n  /**\n   * Closes the currently open Element, removing any unvisited children if\n   * necessary.\n   *\n   * @return {!Element} The corresponding Element.\n   */\n  var coreElementClose = function () {\n    if ('production' !== 'production') {}\n\n    exitNode();\n    return (/** @type {!Element} */currentNode\n    );\n  };\n\n  /**\n   * Makes sure the current node is a Text node and creates a Text node if it is\n   * not.\n   *\n   * @return {!Text} The corresponding Text Node.\n   */\n  var coreText = function () {\n    nextNode();\n    alignWithDOM('#text', null, null);\n    return (/** @type {!Text} */currentNode\n    );\n  };\n\n  /**\n   * Gets the current Element being patched.\n   * @return {!Element}\n   */\n  var currentElement = function () {\n    if ('production' !== 'production') {}\n    return (/** @type {!Element} */currentParent\n    );\n  };\n\n  var registerFindNode = function (findNodeFn) {\n    findNode = findNodeFn;\n  };\n\n  /**\n   * Skips the children in a subtree, allowing an Element to be closed without\n   * clearing out the children.\n   */\n  var skip = function () {\n    if ('production' !== 'production') {}\n    currentNode = currentParent.lastChild;\n  };\n\n  /**\n   * The offset in the virtual element declaration where the attributes are\n   * specified.\n   * @const\n   */\n  var ATTRIBUTES_OFFSET = 3;\n\n  /**\n   * Builds an array of arguments for use with elementOpenStart, attr and\n   * elementOpenEnd.\n   * @const {Array<*>}\n   */\n  var argsBuilder = [];\n\n  /**\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} const_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementOpen = function (tag, key, statics, const_args) {\n    if ('production' !== 'production') {}\n\n    var node = coreElementOpen(tag, key, statics);\n    var data = getData(node);\n\n    /*\n     * Checks to see if one or more attributes have changed for a given Element.\n     * When no attributes have changed, this is much faster than checking each\n     * individual argument. When attributes have changed, the overhead of this is\n     * minimal.\n     */\n    var attrsArr = data.attrsArr;\n    var newAttrs = data.newAttrs;\n    var attrsChanged = false;\n    var i = ATTRIBUTES_OFFSET;\n    var j = 0;\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      if (attrsArr[j] !== arguments[i]) {\n        attrsChanged = true;\n        break;\n      }\n    }\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsChanged = true;\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    if (attrsChanged) {\n      for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n        newAttrs[arguments[i]] = arguments[i + 1];\n      }\n\n      for (var _attr in newAttrs) {\n        updateAttribute(node, _attr, newAttrs[_attr]);\n        newAttrs[_attr] = undefined;\n      }\n    }\n\n    return node;\n  };\n\n  /**\n   * Declares a virtual Element at the current location in the document. This\n   * corresponds to an opening tag and a elementClose tag is required. This is\n   * like elementOpen, but the attributes are defined using the attr function\n   * rather than being passed as arguments. Must be folllowed by 0 or more calls\n   * to attr, then a call to elementOpenEnd.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   */\n  var elementOpenStart = function (tag, key, statics) {\n    if ('production' !== 'production') {}\n\n    argsBuilder[0] = tag;\n    argsBuilder[1] = key;\n    argsBuilder[2] = statics;\n  };\n\n  /***\n   * Defines a virtual attribute at this point of the DOM. This is only valid\n   * when called between elementOpenStart and elementOpenEnd.\n   *\n   * @param {string} name\n   * @param {*} value\n   */\n  var attr = function (name, value) {\n    if ('production' !== 'production') {}\n\n    argsBuilder.push(name, value);\n  };\n\n  /**\n   * Closes an open tag started with elementOpenStart.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementOpenEnd = function () {\n    if ('production' !== 'production') {}\n\n    var node = elementOpen.apply(null, argsBuilder);\n    argsBuilder.length = 0;\n    return node;\n  };\n\n  /**\n   * Closes an open virtual Element.\n   *\n   * @param {string} tag The element's tag.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementClose = function (tag) {\n    if ('production' !== 'production') {}\n\n    var node = coreElementClose();\n\n    if ('production' !== 'production') {}\n\n    return node;\n  };\n\n  /**\n   * Declares a virtual Element at the current location in the document that has\n   * no children.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} const_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementVoid = function (tag, key, statics, const_args) {\n    var node = elementOpen.apply(null, arguments);\n    elementClose.apply(null, arguments);\n    return node;\n  };\n\n  /**\n   * Declares a virtual Element at the current location in the document that is a\n   * placeholder element. Children of this Element can be manually managed and\n   * will not be cleared by the library.\n   *\n   * A key must be specified to make sure that this node is correctly preserved\n   * across all conditionals.\n   *\n   * @param {string} tag The element's tag.\n   * @param {string} key The key used to identify this element.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} const_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementPlaceholder = function (tag, key, statics, const_args) {\n    if ('production' !== 'production') {}\n\n    elementOpen.apply(null, arguments);\n    skip();\n    return elementClose.apply(null, arguments);\n  };\n\n  /**\n   * Declares a virtual Text at this point in the document.\n   *\n   * @param {string|number|boolean} value The value of the Text.\n   * @param {...(function((string|number|boolean)):string)} const_args\n   *     Functions to format the value which are called only when the value has\n   *     changed.\n   * @return {!Text} The corresponding text node.\n   */\n  var text = function (value, const_args) {\n    if ('production' !== 'production') {}\n\n    var node = coreText();\n    var data = getData(node);\n\n    if (data.text !== value) {\n      data.text = /** @type {string} */value;\n\n      var formatted = value;\n      for (var i = 1; i < arguments.length; i += 1) {\n        /*\n         * Call the formatter function directly to prevent leaking arguments.\n         * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n         */\n        var fn = arguments[i];\n        formatted = fn(formatted);\n      }\n\n      node.data = formatted;\n    }\n\n    return node;\n  };\n\n  exports.patch = patchInner;\n  exports.patchInner = patchInner;\n  exports.patchOuter = patchOuter;\n  exports.currentElement = currentElement;\n  exports.registerFindNode = registerFindNode;\n  exports.skip = skip;\n  exports.elementVoid = elementVoid;\n  exports.elementOpenStart = elementOpenStart;\n  exports.elementOpenEnd = elementOpenEnd;\n  exports.elementOpen = elementOpen;\n  exports.elementClose = elementClose;\n  exports.elementPlaceholder = elementPlaceholder;\n  exports.text = text;\n  exports.attr = attr;\n  exports.symbols = symbols;\n  exports.attributes = attributes;\n  exports.applyAttr = applyAttr;\n  exports.applyProp = applyProp;\n  exports.notifications = notifications;\n\n}));\n/* jshint ignore:end */\n"]}