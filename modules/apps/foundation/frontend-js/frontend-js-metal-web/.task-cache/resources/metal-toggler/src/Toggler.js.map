{"version":3,"sources":["/source/Toggler.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport { EventHandler } from 'metal-events';\nimport State from 'metal-state';\n\n/**\n * Toggler component.\n */\nclass Toggler extends State {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.headerEventHandler_ = new EventHandler();\n\n\t\tthis.on('headerChanged', this.syncHeader);\n\t\tthis.syncHeader();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.headerEventHandler_.removeAllListeners();\n\t}\n\n\t/**\n\t * Gets the content to be toggled by the given header element.\n\t * @param {!Element} header\n\t * @protected\n\t */\n\tgetContentElement_(header) {\n\t\tif (core.isElement(this.content)) {\n\t\t\treturn this.content;\n\t\t}\n\n\t\tvar content = dom.next(header, this.content);\n\t\tif (content) {\n\t\t\treturn content;\n\t\t}\n\n\t\tcontent = header.querySelector(this.content);\n\t\tif (content) {\n\t\t\treturn content;\n\t\t}\n\n\t\treturn this.container.querySelector(this.content);\n\t}\n\n\t/**\n\t * Handles a `click` event on the header.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleClick_(event) {\n\t\tthis.toggle(event.delegateTarget || event.currentTarget);\n\t}\n\n\t/**\n\t * Handles a `keydown` event on the header.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeydown_(event) {\n\t\tif (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\tthis.toggle(event.delegateTarget || event.currentTarget);\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Syncs the component according to the value of the `header` state,\n\t * attaching events to the new element and detaching from any previous one.\n\t */\n\tsyncHeader() {\n\t\tthis.headerEventHandler_.removeAllListeners();\n\t\tif (this.header) {\n\t\t\tif (core.isString(this.header)) {\n\t\t\t\tthis.headerEventHandler_.add(\n\t\t\t\t\tdom.delegate(this.container, 'click', this.header, this.handleClick_.bind(this)),\n\t\t\t\t\tdom.delegate(this.container, 'keydown', this.header, this.handleKeydown_.bind(this))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.headerEventHandler_.add(\n\t\t\t\t\tdom.on(this.header, 'click', this.handleClick_.bind(this)),\n\t\t\t\t\tdom.on(this.header, 'keydown', this.handleKeydown_.bind(this))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the content's visibility.\n\t */\n\ttoggle(header) {\n\t\tvar content = this.getContentElement_(header);\n\t\tdom.toggleClasses(content, Toggler.CSS_EXPANDED);\n\t\tdom.toggleClasses(content, Toggler.CSS_COLLAPSED);\n\n\t\tif (dom.hasClass(content, Toggler.CSS_EXPANDED)) {\n\t\t\tdom.addClasses(header, Toggler.CSS_HEADER_EXPANDED);\n\t\t\tdom.removeClasses(header, Toggler.CSS_HEADER_COLLAPSED);\n\t\t} else {\n\t\t\tdom.removeClasses(header, Toggler.CSS_HEADER_EXPANDED);\n\t\t\tdom.addClasses(header, Toggler.CSS_HEADER_COLLAPSED);\n\t\t}\n\t}\n}\n\n/**\n * State configuration.\n */\nToggler.STATE = {\n\t/**\n\t * The element where the header/content selectors will be looked for.\n\t * @type {string|!Element}\n\t */\n\tcontainer: {\n\t\tsetter: dom.toElement,\n\t\tvalidator: value => core.isString(value) || core.isElement(value),\n\t\tvalue: document\n\t},\n\n\t/**\n\t * The element that should be expanded/collapsed by this toggler.\n\t * @type {string|!Element}\n\t */\n\tcontent: {\n\t\tvalidator: value => core.isString(value) || core.isElement(value)\n\t},\n\n\t/**\n\t * The element that should be trigger toggling.\n\t * @type {string|!Element}\n\t */\n\theader: {\n\t\tvalidator: value => core.isString(value) || core.isElement(value)\n\t}\n};\n\n/**\n * The CSS class added to the content when it's collapsed.\n */\nToggler.CSS_COLLAPSED = 'toggler-collapsed';\n\n/**\n * The CSS class added to the content when it's expanded.\n */\nToggler.CSS_EXPANDED = 'toggler-expanded';\n\n/**\n * The CSS class added to the header when the content is collapsed.\n */\nToggler.CSS_HEADER_COLLAPSED = 'toggler-header-collapsed';\n\n/**\n * The CSS class added to the header when the content is expanded.\n */\nToggler.CSS_HEADER_EXPANDED = 'toggler-header-expanded';\n\nexport default Toggler;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('toggler', Toggler);"]}