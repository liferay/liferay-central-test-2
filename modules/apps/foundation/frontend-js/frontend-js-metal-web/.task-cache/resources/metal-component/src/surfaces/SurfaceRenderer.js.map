{"version":3,"sources":["/source/SurfaceRenderer.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { array, core, object, string } from 'metal';\nimport { dom, features, globalEval } from 'metal-dom';\nimport html from 'metal-html';\nimport Component from '../Component';\nimport ComponentCollector from '../ComponentCollector';\nimport ComponentRenderer from '../ComponentRenderer';\nimport EventsCollector from '../EventsCollector';\nimport SurfaceCollector from './SurfaceCollector';\n\n/**\n * Renders components based on surfaces. Surfaces are an area of the component\n * that can have information rendered into it. This renderer can manage multiple\n * surfaces. Surfaces are only rendered when their contents are modified,\n * representing render performance gains. For each surface, render attributes\n * could be associated. When the render context of a surface gets modified, the\n * renderer's lifecycle will repaint the modified surface automatically.\n *\n * This renderer is not intended to be used on its own. Instead, subclasses\n * should override the `getSurfaceContent` function to implement the surface\n * rendering logic. This function will be called whenever a surface may need to\n * be repainted, and should return the rendered content as a string.\n *\n * For example:\n * <code>\n * class CustomSurfaceRenderer extends SurfaceRenderer {\n *   getSurfaceContent(surface) {\n *     return someTemplateEngine(surface.surfaceElementId);\n *   }\n * }\n * </code>\n *\n * To use the new renderer, you just need to set the component's RENDERER static\n * variable to the renderer class, like this:\n *\n * <code>\n * class CustomComponent extends Component {\n * }\n * CustomComponent.RENDERER = CustomSurfaceRenderer;\n * </code>\n */\nclass SurfaceRenderer extends ComponentRenderer {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(component) {\n\t\tsuper(component);\n\n\t\t/**\n\t\t * Holds data about all surfaces that were collected through the\n\t\t * `replaceSurfacePlaceholders_` method.\n\t\t * @type {!Array}\n\t\t * @protected\n\t\t */\n\t\tthis.collectedSurfaces_ = [];\n\n\t\t/**\n\t\t * Holds the number of generated ids for each surface's contents.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.generatedIdCount_ = {};\n\n\t\t/**\n\t\t * The element ids of all surfaces that were removed on a repaint.\n\t\t * @type {!Array<string>}\n\t\t * @protected\n\t\t */\n\t\tthis.removedSurfaces_ = [];\n\n\t\t/**\n\t\t * The ids of the surfaces registered for this renderer's component.\n\t\t * @type {!Object<string, boolean>}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaceIds_ = {};\n\n\t\t/**\n\t\t * Collects inline events from html contents.\n\t\t * @type {!EventsCollector}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsCollector_ = new EventsCollector(this.component_);\n\n\t\tcore.mergeSuperClassesProperty(this.component_.constructor, 'SURFACE_TAG_NAME', array.firstDefinedValue);\n\t\tthis.component_.constructor.SURFACE_TAG_NAME_MERGED =\n\t\t\tthis.component_.constructor.SURFACE_TAG_NAME_MERGED || 'div';\n\n\t\tthis.setShouldUseFacade(true);\n\t\tthis.addSurfacesFromStaticHint_();\n\t\tthis.addSurface(this.component_.id, {\n\t\t\tcomponentName: this.component_.getName()\n\t\t});\n\n\t\tthis.component_.once('attached', this.handleComponentAttachedOnce_.bind(this));\n\t\tthis.component_.on('detached', this.handleComponentDetached_.bind(this));\n\t\tthis.on('renderSurface', this.defaultRenderSurfaceFn_, true);\n\t}\n\n\t/**\n\t * Adds a simple attribute with the given name to the component, if it doesn't\n\t * exist yet.\n\t * @param {string} attrName\n\t * @param {Object=} opt_initialValue Optional initial value for the new attr.\n\t * @protected\n\t */\n\taddMissingAttr_(attrName, opt_initialValue) {\n\t\tif (!this.component_.getAttrConfig(attrName)) {\n\t\t\tthis.component_.addAttr(attrName, {}, opt_initialValue);\n\t\t}\n\t}\n\n\t/**\n\t * Registers a surface to the component. Surface elements are not\n\t * automatically appended to the component element.\n\t * @param {string} surfaceId The surface id to be registered.\n\t * @param {Object=} opt_surfaceConfig Optional surface configuration.\n\t * @chainable\n\t */\n\taddSurface(surfaceId, opt_surfaceConfig) {\n\t\tvar config = opt_surfaceConfig || {};\n\t\tvar surfaceElementId = this.getSurfaceElementId(surfaceId, config);\n\t\tif (this.surfaceIds_[surfaceElementId]) {\n\t\t\tSurfaceRenderer.surfacesCollector.updateSurface(surfaceElementId, config);\n\t\t} else {\n\t\t\tthis.surfaceIds_[surfaceElementId] = true;\n\t\t\tconfig.cacheState = config.cacheState || SurfaceRenderer.Cache.NOT_INITIALIZED;\n\t\t\tSurfaceRenderer.surfacesCollector.addSurface(surfaceElementId, config);\n\t\t\tif (config.componentName && surfaceId !== this.component_.id) {\n\t\t\t\tthis.addSubComponent(config.componentName, surfaceElementId);\n\t\t\t}\n\t\t}\n\t\tthis.cacheSurfaceRenderAttrs_(surfaceElementId, config.renderAttrs);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Registers surfaces to the component. Surface elements are not\n\t * automatically appended to the component element.\n\t * @param {!Object.<string, Object=>} configs An object that maps the names\n\t *     of all the surfaces to be added to their configuration objects.\n\t * @chainable\n\t */\n\taddSurfaces(configs) {\n\t\tfor (var surfaceId in configs) {\n\t\t\tthis.addSurface(surfaceId, configs[surfaceId]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds surfaces from super classes static hint.\n\t * @protected\n\t */\n\taddSurfacesFromStaticHint_() {\n\t\tcore.mergeSuperClassesProperty(this.component_.constructor, 'SURFACES', this.mergeObjects_);\n\t\tthis.surfacesRenderAttrs_ = {};\n\n\t\tvar configs = this.component_.constructor.SURFACES_MERGED;\n\t\tfor (var surfaceId in configs) {\n\t\t\tthis.addSurface(surfaceId, object.mixin({}, configs[surfaceId]));\n\t\t}\n\t}\n\n\t/**\n\t * Adds the given surface element ids to the list of removed surfaces,\n\t * removing their parent reference as well.\n\t * @param {!Array<string>} surfaceElementIds\n\t * @protected\n\t */\n\taddToRemovedSurfaces_(surfaceElementIds) {\n\t\tfor (var i = 0; i < surfaceElementIds.length; i++) {\n\t\t\tvar surface = this.getSurface(surfaceElementIds[i]);\n\t\t\tthis.removedSurfaces_.push(surface);\n\t\t\tsurface.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbuildElement() {\n\t\tvar compId = this.component_.id;\n\t\tvar element = this.findElementInContent_(compId, this.getElementContent_(true) || '');\n\t\tif (!element) {\n\t\t\telement = this.findElementInContent_(compId, this.getComponentHtml(''));\n\t\t}\n\t\tdom.removeChildren(element);\n\t\tdom.exitDocument(element);\n\t\treturn element;\n\t}\n\n\t/**\n\t * Builds a fragment element with the given content, so it can be rendered.\n\t * Any script tags inside the content will be moved to the header, so they can\n\t * be reevaluated when this content is rendered.\n\t * @param {string} content\n\t * @return {!Element}\n\t * @protected\n\t */\n\tbuildFragment_(content) {\n\t\tvar frag = dom.buildFragment(content);\n\t\tif (content.indexOf('<script') !== -1) {\n\t\t\tglobalEval.runScriptsInElement(frag);\n\t\t}\n\t\treturn frag;\n\t}\n\n\t/**\n\t * Builds a surface placeholder, attaching it to the given data.\n\t * @param {string} surfaceElementId\n\t * @param {Object=} opt_data\n\t * @return {string}\n\t */\n\tbuildPlaceholder(surfaceElementId, opt_data) {\n\t\tif (surfaceElementId && opt_data) {\n\t\t\topt_data.surfaceElementId = surfaceElementId;\n\t\t\tthis.addSurface(surfaceElementId, opt_data);\n\t\t}\n\t\treturn '%%%%~s' + (surfaceElementId ? '-' + surfaceElementId : '') + '~%%%%';\n\t}\n\n\t/**\n\t * Caches the given content for the surface with the requested id.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t */\n\tcacheSurfaceContent(surfaceElementId, content) {\n\t\tvar cacheState = this.computeSurfaceCacheState_(content);\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tsurface.cacheState = cacheState;\n\t}\n\n\t/**\n\t * Caches surface render attributes into a O(k) flat map representation.\n\t * Relevant for performance to calculate the surfaces group that were\n\t * modified by attributes mutation.\n\t * @param {string} surfaceElementId The surface id to be cached into the flat map.\n\t * @param {Array} renderAttrs The surface's render attrs.\n\t * @protected\n\t */\n\tcacheSurfaceRenderAttrs_(surfaceElementId, renderAttrs) {\n\t\tvar attrs = renderAttrs || [];\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\tif (!this.surfacesRenderAttrs_[attrs[i]]) {\n\t\t\t\tthis.surfacesRenderAttrs_[attrs[i]] = {};\n\t\t\t\tthis.addMissingAttr_(attrs[i], this.component_.getInitialConfig()[attrs[i]]);\n\t\t\t}\n\t\t\tthis.surfacesRenderAttrs_[attrs[i]][surfaceElementId] = true;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given content has an element tag with the given id.\n\t * @param {string} content\n\t * @param {string} id\n\t * @return {boolean}\n\t * @protected\n\t */\n\tcheckHasElementTag_(content, id) {\n\t\treturn content.indexOf(' id=\"' + id + '\"') !== -1;\n\t}\n\n\t/**\n\t * Clears the cache of the specified surface.\n\t * @param {string} surfaceIds\n\t */\n\tclearSurfaceCache(surfaceId) {\n\t\tthis.getSurface(surfaceId).cacheState = SurfaceRenderer.Cache.NOT_INITIALIZED;\n\t}\n\n\t/**\n\t * Compares cache states.\n\t * @param {number} currentCacheState\n\t * @param {number} previousCacheState\n\t * @return {boolean} True if there's a cache hit, or false for cache miss.\n\t */\n\tcompareCacheStates_(currentCacheState, previousCacheState) {\n\t\treturn currentCacheState !== SurfaceRenderer.Cache.NOT_INITIALIZED &&\n\t\t\tcurrentCacheState === previousCacheState;\n\t}\n\n\t/**\n\t * Computes the cache state for the surface content. If value is string, the\n\t * cache state is represented by its hashcode.\n\t * @param {?string} value The value to calculate the cache state.\n\t * @return {Object} The computed cache state.\n\t * @protected\n\t */\n\tcomputeSurfaceCacheState_(value) {\n\t\tvalue = value || '';\n\t\tif (features.checkAttrOrderChange()) {\n\t\t\tvalue = this.convertHtmlToBrowserFormat_(value);\n\t\t}\n\t\treturn string.hashCode(value);\n\t}\n\n\t/**\n\t * Converts the given html string to the format the current browser uses\n\t * when html is rendered. This is done by rendering the html in a temporary\n\t * element, and returning its resulting rendered html.\n\t * @param {string} htmlString The html to be converted.\n\t * @return {string}\n\t * @protected\n\t */\n\tconvertHtmlToBrowserFormat_(htmlString) {\n\t\tvar element = document.createElement('div');\n\t\tdom.append(element, htmlString);\n\t\treturn element.innerHTML;\n\t}\n\n\t/**\n\t * Creates a surface that was found via a string placeholder.\n\t * @param {string} parentSurfaceElementId The id of the surface element that contains\n\t *   the surface to be created, or undefined if there is none.\n\t * @param {string=} opt_surfaceElementId\n\t * @return {!Object} The created surface.\n\t * @protected\n\t */\n\tcreatePlaceholderSurface_(parentSurfaceElementId, opt_surfaceElementId) {\n\t\tvar surfaceElementId = opt_surfaceElementId;\n\t\tif (!core.isDefAndNotNull(surfaceElementId)) {\n\t\t\tsurfaceElementId = this.generateSurfaceElementId(parentSurfaceElementId);\n\t\t}\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tif (!surface) {\n\t\t\tsurface = {\n\t\t\t\tsurfaceElementId: surfaceElementId\n\t\t\t};\n\t\t\tthis.addSurface(surfaceElementId, surface);\n\t\t}\n\t\treturn surface;\n\t}\n\n\t/**\n\t * Adds a sub component to this renderer's component.\n\t * @param {string} componentName\n\t * @param {string} componentId\n\t * @return {!Component}\n\t * @protected\n\t */\n\taddSubComponent(componentName, componentId) {\n\t\treturn this.component_.addSubComponent(\n\t\t\tcomponentName,\n\t\t\tcomponentId,\n\t\t\tthis.getSurfaceFromElementId(componentId).componentData\n\t\t);\n\t}\n\n\t/**\n\t * Creates the surface element with its id namespaced to the component id.\n\t * @param {string} surfaceElementId The id of the element for the surface to be\n\t *   created.\n\t * @return {Element} The surface element.\n\t * @protected\n\t */\n\tcreateSurfaceElement_(surfaceElementId) {\n\t\tvar el = document.createElement(this.component_.constructor.SURFACE_TAG_NAME_MERGED);\n\t\tel.id = surfaceElementId;\n\t\treturn el;\n\t}\n\n\t/**\n\t * The default implementation for the `renderSurface` event. Renders\n\t * content into a surface. If the specified content is the same of the\n\t * current surface content, nothing happens. If the surface cache state\n\t * is not initialized or the content is not eligible for cache or content\n\t * is different, the surfaces re-renders.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tdefaultRenderSurfaceFn_(data) {\n\t\tvar surfaceElementId = data.surfaceElementId;\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tif (surface.componentName && surfaceElementId !== this.component_.id) {\n\t\t\tthis.renderComponentSurface_(surfaceElementId, data.content);\n\t\t\treturn;\n\t\t}\n\n\t\tvar content = data.content || this.getSurfaceContent_(surfaceElementId);\n\t\tvar cacheContent = data.cacheContent || content;\n\t\tvar cacheHit = surface.static;\n\t\tif (!surface.static) {\n\t\t\tvar previousCacheState = surface.cacheState;\n\t\t\tthis.cacheSurfaceContent(surfaceElementId, cacheContent);\n\t\t\tcacheHit = this.compareCacheStates_(surface.cacheState, previousCacheState);\n\t\t}\n\n\t\tif (cacheHit) {\n\t\t\tthis.renderPlaceholderSurfaceContents_(cacheContent, surfaceElementId);\n\t\t} else {\n\t\t\tthis.eventsCollector_.attachListenersFromHtml(cacheContent, surfaceElementId);\n\t\t\tthis.replaceSurfaceContent_(surfaceElementId, surface, content);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\n\t\tthis.eventsCollector_.dispose();\n\t\tthis.eventsCollector_ = null;\n\n\t\tthis.surfacesRenderAttrs_ = null;\n\n\t\tObject.keys(this.surfaceIds_).forEach(surfaceId => this.removeSurface(surfaceId, true));\n\t\tthis.surfaceIds_ = null;\n\t}\n\n\t/**\n\t * Emits the `renderSurface` event, which will cause the specified surface to be\n\t * rendered, unless it's prevented.\n\t * @param {string} surfaceElementId\n\t * @param {string=} opt_content\n\t * @param {string=} opt_cacheContent\n\t * @param {Array<string>=} opt_renderAttrs The render attributes that caused the\n\t *   surface to be rerendered, or nothing if that wasn't the cause of the update.\n\t * @protected\n\t */\n\temitRenderSurfaceEvent_(surfaceElementId, opt_content, opt_cacheContent, opt_renderAttrs) {\n\t\tthis.emit('renderSurface', {\n\t\t\tcacheContent: opt_cacheContent,\n\t\t\tcontent: opt_content,\n\t\t\trenderAttrs: opt_renderAttrs || [],\n\t\t\tsurfaceElementId: surfaceElementId,\n\t\t\tsurfaceId: this.getSurfaceId(this.getSurfaceFromElementId(surfaceElementId))\n\t\t});\n\t}\n\n\t/**\n\t * Finds the element with the given id in the given content, if there is one.\n\t * @param {string} id\n\t * @param {!Element|string} content\n\t * @return {Element}\n\t * @protected\n\t */\n\tfindElementInContent_(id, content) {\n\t\tcontent = core.isString(content) ? dom.buildFragment(content) : content;\n\t\tvar firstChild = content.childNodes[0];\n\t\tif (firstChild && firstChild.id === id) {\n\t\t\treturn firstChild;\n\t\t}\n\t}\n\n\t/**\n\t * Generates an id for a surface that was found inside the contents of the main\n\t * element or of a parent surface.\n\t * @param {string} parentSurfaceElementId The id of the parent surface, or undefined\n\t *   if there is none.\n\t * @return {string} The generated id.\n\t */\n\tgenerateSurfaceElementId(parentSurfaceElementId) {\n\t\tthis.generatedIdCount_[parentSurfaceElementId] = (this.generatedIdCount_[parentSurfaceElementId] || 0) + 1;\n\t\treturn parentSurfaceElementId + '-s' + this.generatedIdCount_[parentSurfaceElementId];\n\t}\n\n\t/**\n\t * Gets the html that should be used to build this component's main element with\n\t * some content.\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetComponentHtml(content) {\n\t\treturn this.wrapContentIfNecessary(\n\t\t\tcontent,\n\t\t\tthis.component_.id,\n\t\t\tthis.component_.constructor.ELEMENT_TAG_NAME_MERGED\n\t\t);\n\t}\n\n\t/**\n\t * Calls `getElementContent` and creating its surface if it hasn't been created yet.\n\t * @param {string=} opt_skipContents True if only the element's tag needs to be rendered.\n\t * @return {Object|string} The content to be rendered. If the content is a\n\t *   string, surfaces can be represented by placeholders in the format specified\n\t *   by SurfaceRenderer.SURFACE_REGEX. Also, if the string content's main wrapper has\n\t *   the component's id, then it will be used to render the main element tag.\n\t * @protected\n\t */\n\tgetElementContent_(opt_skipContents) {\n\t\treturn this.getSurfaceContent(this.getSurface(this.component_.id), opt_skipContents);\n\t}\n\n\t/**\n\t * Calls `getElementContent` and replaces all placeholders in the returned content.\n\t * This is called when rendering sub components, so it also attaches listeners to\n\t * the original content.\n\t * @return {string} The content with all placeholders already replaced.\n\t */\n\tgetElementExtendedContent() {\n\t\tvar content = this.getElementContent_() || '';\n\t\tthis.eventsCollector_.attachListenersFromHtml(content, this.component_.id);\n\t\tthis.cacheSurfaceContent(this.component_.id, content);\n\t\treturn this.replaceSurfacePlaceholders_(content, this.component_.id, this.getSurface(this.component_.id));\n\t}\n\n\t/**\n\t * Gets surfaces that got modified by the specified attributes changes.\n\t * @param {Object.<string, Object>} changes Object containing the attribute\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @return {Object.<string, boolean>} Object containing modified surface ids\n\t *     as key and true as value.\n\t * @protected\n\t */\n\tgetModifiedSurfacesFromChanges_(changes) {\n\t\tvar surfaces = {};\n\t\tfor (var attr in changes) {\n\t\t\tvar surfaceNames = Object.keys(this.surfacesRenderAttrs_[attr] || {});\n\t\t\tfor (var i = 0; i < surfaceNames.length; i++) {\n\t\t\t\tif (!surfaces[surfaceNames[i]]) {\n\t\t\t\t\tsurfaces[surfaceNames[i]] = [];\n\t\t\t\t}\n\t\t\t\tsurfaces[surfaceNames[i]].push(attr);\n\t\t\t}\n\t\t}\n\t\treturn surfaces;\n\t}\n\n\t/**\n\t * Same as `getSurfaceHtml_`, but only called for non component surfaces.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetNonComponentSurfaceHtml(surfaceElementId, content) {\n\t\treturn this.wrapContentIfNecessary(content, surfaceElementId, this.component_.constructor.SURFACE_TAG_NAME_MERGED);\n\t}\n\n\t/**\n\t * Gets surface configuration object. If surface is not registered returns\n\t * null.\n\t * @param {string} surfaceId The surface id or its element id.\n\t * @return {Object} The surface configuration object.\n\t */\n\tgetSurface(surfaceId) {\n\t\tvar surface = this.getSurfaceFromElementId(this.getSurfaceElementId(surfaceId));\n\t\treturn surface ? surface : this.getSurfaceFromElementId(surfaceId);\n\t}\n\n\t/**\n\t * Returns the appropriate string content for the specified surface. Subclasses\n\t * should implement this method.\n\t * @param {!Object} surface The surface configuration.\n\t * @param {string=} opt_skipContents True if only the element's tag needs to be rendered.\n\t * @return {string}\n\t * @override\n\t */\n\tgetSurfaceContent() {\n\t\tcore.abstractMethod();\n\t}\n\n\t/**\n\t * Gets the content for the requested surface. Calls `getSurfaceContent` for non\n\t * component surfaces, handling component surfaces automatically.\n\t * @param {string} surfaceElementId The surface element id.\n\t * @return {string} The content to be rendered.\n\t * @protected\n\t */\n\tgetSurfaceContent_(surfaceElementId) {\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tif (surface.componentName && surfaceElementId !== this.component_.id) {\n\t\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\t\tif (component.wasRendered) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\treturn component.getRenderer().getElementExtendedContent();\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.getSurfaceContent(surface) || '';\n\t\t}\n\t}\n\n\t/**\n\t * Queries from the document or creates an element for the surface. Surface\n\t * elements have its surface id namespaced to the component id, e.g. for a\n\t * component with id `gallery` and a surface with id `pictures` the surface\n\t * element will be represented by the id `gallery-pictures`. Surface\n\t * elements must also be appended to the component element.\n\t * @param {string} surfaceId The surface id.\n\t * @param {Object=} opt_surface The surface's config. If not given, it will\n\t *   be fetched.\n\t * @return {Element} The surface element or null if surface not registered.\n\t */\n\tgetSurfaceElement(surfaceId, opt_surface) {\n\t\tvar surface = opt_surface || this.getSurface(surfaceId);\n\t\tif (!surface) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!surface.element) {\n\t\t\tif (surface.componentName) {\n\t\t\t\tvar component = ComponentCollector.components[surfaceId];\n\t\t\t\tif (component) {\n\t\t\t\t\tsurface.element = component.element;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar surfaceElementId = this.getSurfaceElementId(surfaceId, surface);\n\t\t\t\tsurface.element = this.component_.findElementById(surfaceElementId) ||\n\t\t\t\t\tthis.createSurfaceElement_(surfaceElementId);\n\t\t\t}\n\t\t}\n\t\treturn surface.element;\n\t}\n\n\t/**\n\t * Adds the component id as the prefix of the given surface id if necessary.\n\t * @param {string} surfaceId\n\t * @param {Object=} opt_surface The surface data.\n\t * @return {string}\n\t */\n\tgetSurfaceElementId(surfaceId, opt_surface) {\n\t\tvar surface = opt_surface || {};\n\t\tif (surface.surfaceElementId) {\n\t\t\treturn surface.surfaceElementId;\n\t\t} else if (surface.componentName || this.hasComponentPrefix_(surfaceId)) {\n\t\t\treturn surfaceId;\n\t\t} else {\n\t\t\treturn this.prefixSurfaceId(surfaceId);\n\t\t}\n\t}\n\n\t/**\n\t * Gets surface configuration object. This is similar to `getSurface`, but\n\t * receives the surface's element id, while `getSurface` can also receive\n\t * a local surface id.\n\t * @param {string} surfaceElementId The surface's element id\n\t * @return {Object} The surface configuration object.\n\t */\n\tgetSurfaceFromElementId(surfaceElementId) {\n\t\treturn SurfaceRenderer.surfacesCollector.getSurface(surfaceElementId);\n\t}\n\n\t/**\n\t * Gets the html that should be used to build a surface's main element with its\n\t * content.\n\t * @param {!Object} surface\n\t * @param {string} content\n\t * @return {string}\n\t * @protected\n\t */\n\tgetSurfaceHtml_(surface, content) {\n\t\tvar surfaceElementId = surface.surfaceElementId;\n\t\tif (surface.componentName) {\n\t\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\t\treturn component.getRenderer().getComponentHtml(content);\n\t\t} else {\n\t\t\treturn this.getNonComponentSurfaceHtml(surfaceElementId, content);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the surface id for the given surface.\n\t * @param {!Object} surface\n\t * @return {string}\n\t */\n\tgetSurfaceId(surface) {\n\t\tif (surface.componentName || !this.hasComponentPrefix_(surface.surfaceElementId)) {\n\t\t\treturn surface.surfaceElementId;\n\t\t} else {\n\t\t\treturn surface.surfaceElementId.substr(this.component_.id.length + 1);\n\t\t}\n\t}\n\n\t/**\n\t * A map of surface ids to the respective surface object.\n\t * @return {!Object}\n\t */\n\tgetSurfaces() {\n\t\tvar surfaces = {};\n\t\tObject.keys(this.surfaceIds_).forEach(function(surfaceElementId) {\n\t\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\t\tsurfaces[this.getSurfaceId(surface)] = surface;\n\t\t}.bind(this));\n\t\treturn surfaces;\n\t}\n\n\t/**\n\t * Handles the `attached` event from this renderer's component. This function\n\t * is called only once, on the first time the event is triggered.\n\t * @protected\n\t */\n\thandleComponentAttachedOnce_() {\n\t\tthis.updatePlaceholderSurfaces_();\n\t}\n\n\t/**\n\t * Handles the `detached` event from this renderer's component, removing all\n\t * event listeners.\n\t * @protected\n\t */\n\thandleComponentDetached_() {\n\t\tthis.eventsCollector_.detachAllListeners();\n\t}\n\n\t/**\n\t * Checks if the given surface id has this component's prefix.\n\t * @param {string} surfaceId\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasComponentPrefix_(surfaceId) {\n\t\tvar compId = this.component_.id;\n\t\treturn surfaceId.substr(0, compId.length) === compId &&\n\t\t\t(surfaceId.length === compId.length || surfaceId[compId.length] === '-');\n\t}\n\n\t/**\n\t * Merges an array of objects into a single object. Used by the SURFACES static\n\t * variable.\n\t * @param {!Array} values The values to be merged.\n\t * @return {!Object} The merged value.\n\t * @protected\n\t */\n\tmergeObjects_(values) {\n\t\treturn object.mixin.apply(null, [{}].concat(values.reverse()));\n\t}\n\n\t/**\n\t * Prefixes the given surface id with this component's id.\n\t * @param {string} surfaceId\n\t * @return {string}\n\t */\n\tprefixSurfaceId(surfaceId) {\n\t\treturn this.component_.id + '-' + surfaceId;\n\t}\n\n\t/**\n\t * Unregisters a surface and removes its element from the DOM.\n\t * @param {string} surfaceId The surface id.\n\t * @param {boolean=} opt_skipDomRemoval Flag indicating if the removal\n\t *     of the surface from the dom should be skipped. When true, only the\n\t *     surface data is going to be removed.\n\t * @chainable\n\t */\n\tremoveSurface(surfaceId, opt_skipDomRemoval) {\n\t\tif (!opt_skipDomRemoval) {\n\t\t\tvar el = this.getSurfaceElement(surfaceId);\n\t\t\tif (el && el.parentNode) {\n\t\t\t\tel.parentNode.removeChild(el);\n\t\t\t}\n\t\t}\n\t\tvar surfaceElementId = this.getSurfaceElementId(surfaceId, this.getSurface(surfaceId));\n\t\tSurfaceRenderer.surfacesCollector.removeSurface(surfaceElementId);\n\t\tthis.surfaceIds_[surfaceElementId] = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all surfaces that were removed during the repaint of their parents,\n\t * and weren't added back again. Component surfaces will be disposed.\n\t * @protected\n\t */\n\tremoveUnusedSurfaces_() {\n\t\tvar compIds = [];\n\t\tfor (var i = 0; i < this.removedSurfaces_.length; i++) {\n\t\t\tvar surface = this.removedSurfaces_[i];\n\t\t\tif (!surface.parent) {\n\t\t\t\tthis.removeSurface(surface.surfaceElementId);\n\t\t\t\tif (surface.componentName) {\n\t\t\t\t\tcompIds.push(surface.surfaceElementId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.component_.disposeSubComponents(compIds);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender(data) {\n\t\tvar id = this.component_.id;\n\t\tif (data.decorating) {\n\t\t\tvar extendedContent = this.getElementExtendedContent();\n\t\t\tvar extendedCacheState = this.computeSurfaceCacheState_(extendedContent);\n\t\t\tvar originalContent = html.compress(this.component_.element.outerHTML);\n\t\t\tvar htmlCacheState = this.computeSurfaceCacheState_(originalContent);\n\t\t\tif (!this.compareCacheStates_(htmlCacheState, extendedCacheState)) {\n\t\t\t\tthis.replaceElementContent(extendedContent);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.emitRenderSurfaceEvent_(id);\n\t\t}\n\t}\n\n\t/**\n\t * Renders a surface that holds a component.\n\t * @param {string} surfaceElementId\n\t * @param {string=} opt_content The content to be rendered.\n\t * @protected\n\t */\n\trenderComponentSurface_(surfaceElementId, opt_content) {\n\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\tif (component.wasRendered) {\n\t\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\t\tComponent.componentsCollector.updateComponent(surfaceElementId, surface.componentData);\n\t\t} else {\n\t\t\tif (opt_content && dom.isEmpty(component.element)) {\n\t\t\t\t// If we have the rendered content for this component, but it hasn't\n\t\t\t\t// been rendered in its element yet, we render it manually here. That\n\t\t\t\t// can happen if the subcomponent's element is set before the parent\n\t\t\t\t// element renders its content, making originally rendered content be\n\t\t\t\t// set on the wrong place.\n\t\t\t\tcomponent.getRenderer().replaceElementContent(opt_content);\n\t\t\t}\n\t \t\tcomponent.renderAsSubComponent();\n\t\t}\n\t}\n\n\t/**\n\t * Renders the contents of all the surface placeholders found in the given content.\n\t * @param {string} content\n\t * @param {string} surfaceElementId The id of surface element the content is from.\n\t * @protected\n\t */\n\trenderPlaceholderSurfaceContents_(content, surfaceElementId) {\n\t\tvar instance = this;\n\t\tcontent.replace(SurfaceRenderer.SURFACE_REGEX, function(match, id) {\n\t\t\tvar surface = instance.createPlaceholderSurface_(surfaceElementId, id);\n\t\t\tinstance.emitRenderSurfaceEvent_(surface.surfaceElementId);\n\t\t\treturn match;\n\t\t});\n\t}\n\n\t/**\n\t * Renders all surfaces contents ignoring the cache.\n\t * @param {Object.<string, Array=>} surfaces Object map where the key is\n\t *     the surface id and value the optional attributes list that caused\n\t *     the rerender.\n\t * @protected\n\t */\n\trenderSurfacesContent_(surfaces) {\n\t\tthis.generatedIdCount_ = {};\n\t\tthis.removedSurfaces_ = [];\n\n\t\tvar compId = this.component_.id;\n\t\tvar surfaceElementIds = Object.keys(surfaces);\n\t\tvar idIndex = surfaceElementIds.indexOf(compId);\n\t\tif (idIndex !== -1) {\n\t\t\t// Always render the main content surface first, for performance reasons.\n\t\t\tsurfaceElementIds.splice(idIndex, 1);\n\t\t\tsurfaceElementIds = [compId].concat(surfaceElementIds);\n\t\t}\n\n\t\tfor (var i = 0; i < surfaceElementIds.length; i++) {\n\t\t\tvar surface = this.getSurfaceFromElementId(surfaceElementIds[i]);\n\t\t\tif (!surface.handled && (surface.parent || surfaceElementIds[i] === compId)) {\n\t\t\t\tthis.emitRenderSurfaceEvent_(surfaceElementIds[i], null, null, surfaces[surfaceElementIds[i]]);\n\t\t\t}\n\t\t}\n\t\tthis.updatePlaceholderSurfaces_();\n\t\tthis.eventsCollector_.detachUnusedListeners();\n\t\tthis.removeUnusedSurfaces_();\n\t}\n\n\t/**\n\t * Replaces the content of this component's element with the given one.\n\t * @param {string} content The content to be rendered.\n\t */\n\treplaceElementContent(content) {\n\t\tvar element = this.component_.element;\n\t\tvar newContent = this.buildFragment_(content);\n\t\tvar newElement = this.findElementInContent_(this.component_.id, newContent);\n\t\tif (newElement) {\n\t\t\tthis.updateElementAttributes_(element, newElement);\n\t\t\tnewContent = newElement.childNodes;\n\t\t}\n\t\tdom.removeChildren(element);\n\t\tdom.append(element, newContent);\n\t}\n\n\t/**\n\t * Replaces the content of a surface with a new one.\n\t * @param {string} surfaceElementId The surface id.\n\t * @param {!Object} surface The surface object.\n\t * @param {string} content The content to be rendered.\n\t * @protected\n\t */\n\treplaceSurfaceContent_(surfaceElementId, surface, content) {\n\t\tcontent = this.replaceSurfacePlaceholders_(content, surfaceElementId, surface);\n\t\tif (surfaceElementId === this.component_.id) {\n\t\t\tthis.replaceElementContent(content);\n\t\t\treturn;\n\t\t}\n\n\t\tvar el = this.getSurfaceElement(surfaceElementId);\n\t\tvar frag = this.buildFragment_(content);\n\t\tvar element = this.findElementInContent_(surfaceElementId, frag);\n\t\tif (element) {\n\t\t\tsurface.element = element;\n\t\t\tdom.replace(el, surface.element);\n\t\t} else {\n\t\t\tdom.removeChildren(el);\n\t\t\tdom.append(el, frag);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces the given content's surface placeholders with their real contents.\n\t * @param {string} content\n\t * @param {string} surfaceElementId The id of the surface element that contains\n\t *   the given content, or undefined if the content is from the main element.\n\t * @param {!Object} surface The surface object.\n\t * @return {string} The final string with replaced placeholders.\n\t * @protected\n\t */\n\treplaceSurfacePlaceholders_(content, surfaceElementId, surface) {\n\t\tif (!surface.componentName || surfaceElementId === this.component_.id) {\n\t\t\tthis.addToRemovedSurfaces_(surface.children || []);\n\t\t\tsurface.children = [];\n\t\t}\n\n\t\tvar instance = this;\n\t\treturn content.replace(SurfaceRenderer.SURFACE_REGEX, function(match, id) {\n\t\t\t// Surfaces should already have been created before being rendered so they can be\n\t\t\t// accessed from their getSurfaceContent calls.\n\t\t\tvar placeholderSurface = instance.createPlaceholderSurface_(surfaceElementId, id);\n\t\t\tid = placeholderSurface.surfaceElementId;\n\t\t\tplaceholderSurface.handled = true;\n\t\t\tplaceholderSurface.parent = surfaceElementId;\n\t\t\tsurface.children.push(id);\n\n\t\t\tvar surfaceContent = instance.getSurfaceContent_(id);\n\t\t\tvar surfaceHtml = instance.getSurfaceHtml_(placeholderSurface, surfaceContent);\n\t\t\tvar expandedHtml = instance.replaceSurfacePlaceholders_(surfaceHtml, id, placeholderSurface);\n\t\t\tinstance.collectedSurfaces_.push({\n\t\t\t\tcacheContent: surfaceContent,\n\t\t\t\tcontent: expandedHtml,\n\t\t\t\tsurface: placeholderSurface\n\t\t\t});\n\n\t\t\treturn expandedHtml;\n\t\t});\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tupdate(data) {\n\t\tthis.renderSurfacesContent_(this.getModifiedSurfacesFromChanges_(data.changes));\n\t}\n\n\t/**\n\t * Sets the attributes from the second element to the first element.\n\t * @param {!Element} element\n\t * @param {!Element} newElement\n\t * @protected\n\t */\n\tupdateElementAttributes_(element, newElement) {\n\t\tvar attrs = newElement.attributes;\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\t// The \"id\" and \"class\" html attributes are already synced via the \"id\"\n\t\t\t// and \"elementClasses\" component attributes, respectively.\n\t\t\tif (attrs[i].name !== 'id' && attrs[i].name !== 'class') {\n\t\t\t\telement.setAttribute(attrs[i].name, attrs[i].value);\n\t\t\t}\n\t\t}\n\n\t\tif (element.tagName !== newElement.tagName) {\n\t\t\tconsole.error(\n\t\t\t\t'The component named \"' + this.component_.getName() + '\" tried to change the component ' +\n\t\t\t\t'element\\'s tag name, which is not allowed. Make sure to always return the same tag ' +\n\t\t\t\t'name for the component element on the renderer\\'s getSurfaceContent. This may also ' +\n\t\t\t\t'have been caused by passing an element to this component with a different tag name ' +\n\t\t\t\t'from the one it uses.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a surface after it has been rendered through placeholders.\n\t * @param {!{content: string, cacheContent: string, surfaceElementId: string}} collectedData\n\t *   Data about the collected surface. Should have the surface's id, content and the\n\t *   content that should be cached for it.\n\t * @protected\n\t */\n\tupdatePlaceholderSurface_(collectedData) {\n\t\tvar surface = collectedData.surface;\n\t\tvar surfaceElementId = surface.surfaceElementId;\n\t\tif (surface.componentName) {\n\t\t\t// Elements of component surfaces are unchangeable, so we need to replace the\n\t\t\t// rendered element with the component's.\n\t\t\tdom.replace(this.component_.findElementById(surfaceElementId), this.getSurfaceElement(surfaceElementId, surface));\n\n\t\t\t// Component surfaces need to be handled in case some internal details have changed.\n\t\t\tthis.emitRenderSurfaceEvent_(surfaceElementId, collectedData.content, collectedData.cacheContent);\n\t\t} else {\n\t\t\t// This surface's element has either changed or never been created yet. Let's just\n\t\t\t// reset it to null, so it can be fetched from the dom again when necessary. Also,\n\t\t\t// since there's no need to do cache checks or rerender, let's just attach its\n\t\t\t// listeners and cache its content manually.\n\t\t\tsurface.element = null;\n\t\t\tthis.cacheSurfaceContent(surfaceElementId, collectedData.cacheContent);\n\t\t\tthis.eventsCollector_.attachListenersFromHtml(collectedData.cacheContent, surfaceElementId);\n\t\t}\n\t}\n\n\t/**\n\t * Updates all collected surfaces.\n\t * @protected\n\t */\n\tupdatePlaceholderSurfaces_() {\n\t\tfor (var i = this.collectedSurfaces_.length - 1; i >= 0; i--) {\n\t\t\tthis.updatePlaceholderSurface_(this.collectedSurfaces_[i]);\n\t\t\tthis.collectedSurfaces_[i].surface.handled = false;\n\t\t}\n\t\tthis.collectedSurfaces_ = [];\n\t}\n\n\t/**\n\t * Wraps the content with the given tag, unless the content already has an element with the\n\t * correct id.\n\t * @param {string} content\n\t * @param {string} id\n\t * @param {string} tag\n\t * @return {string}\n\t * @protected\n\t */\n\twrapContentIfNecessary(content, id, tag) {\n\t\tif (!this.checkHasElementTag_(content, id)) {\n\t\t\tcontent = '<' + tag + ' id=\"' + id + '\">' + content + '</' + tag + '>';\n\t\t}\n\t\treturn content;\n\t}\n}\n\n/**\n * Cache states for the surfaces.\n * @enum {string}\n */\nSurfaceRenderer.Cache = {\n\t/**\n\t * Cache not initialized.\n\t */\n\tNOT_INITIALIZED: -2\n};\n\n/**\n * The regex used to search for surface placeholders.\n * @type {RegExp}\n * @static\n */\nSurfaceRenderer.SURFACE_REGEX = /\\%\\%\\%\\%~s(?:-([^~:]+))?~\\%\\%\\%\\%/g;\n\n/**\n * Helper responsible for temporarily holding surface data.\n * @type {!SurfaceCollector}\n * @protected\n * @static\n */\nSurfaceRenderer.surfacesCollector = new SurfaceCollector();\n\nexport default SurfaceRenderer;\n"]}