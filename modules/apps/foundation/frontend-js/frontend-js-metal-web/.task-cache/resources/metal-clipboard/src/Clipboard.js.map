{"version":3,"sources":["/source/Clipboard.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport Attribute from 'metal-attribute';\nimport core from 'metal';\nimport dom from 'metal-dom';\n\n/**\n * Clipboard component.\n */\nclass Clipboard extends Attribute {\n\t/**\n\t * Delegates a click event to the passed selector.\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.listener_ = dom.on(this.selector, 'click', (e) => this.initialize(e));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.listener_.dispose();\n\t\tthis.listener_ = null;\n\t\tif (this.clipboardAction_) {\n\t\t\tthis.clipboardAction_.dispose();\n\t\t\tthis.clipboardAction_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Defines a new `ClipboardAction` on each click event.\n\t * @param {!Event} e\n\t */\n\tinitialize(e) {\n\t\tif (this.clipboardAction_) {\n\t\t\tthis.clipboardAction_ = null;\n\t\t}\n\n\t\tthis.clipboardAction_ = new ClipboardAction({\n\t\t\thost: this,\n\t\t\taction: this.action(e.delegateTarget),\n\t\t\ttarget: this.target(e.delegateTarget),\n\t\t\ttext: this.text(e.delegateTarget),\n\t\t\ttrigger: e.delegateTarget\n\t\t});\n\t}\n}\n\n/**\n * Attributes definition.\n * @type {!Object}\n * @static\n */\nClipboard.ATTRS = {\n\t/**\n\t * A function that returns the name of the clipboard action that should be done\n\t * when for the given element (either 'copy' or 'cut').\n\t * @type {!function(!Element)}\n\t */\n\taction: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn delegateTarget.getAttribute('data-action');\n\t\t}\n\t},\n\n\t/**\n\t * The selector for all elements that should be listened for clipboard actions.\n\t * @type {string}\n\t */\n\tselector: {\n\t\tvalue: '[data-clipboard]',\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * A function that returns an element that has the content to be copied to the\n\t * clipboard.\n\t * @type {!function(!Element)}\n\t */\n\ttarget: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn document.querySelector(delegateTarget.getAttribute('data-target'));\n\t\t}\n\t},\n\n\t/**\n\t * A function that returns the text to be copied to the clipboard.\n\t * @type {!function(!Element)}\n\t */\n\ttext: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(delegateTarget) {\n\t\t\treturn delegateTarget.getAttribute('data-text');\n\t\t}\n\t}\n};\n\n/**\n * ClipboardAction component.\n */\nclass ClipboardAction extends Attribute {\n\t/**\n\t * Initializes selection either from a `text` or `target` attribute.\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tif (this.text) {\n\t\t\tthis.selectValue();\n\t\t} else if (this.target) {\n\t\t\tthis.selectTarget();\n\t\t}\n\t}\n\n\t/**\n\t * Removes current selection and focus from `target` element.\n\t */\n\tclearSelection() {\n\t\tif (this.target) {\n\t\t\tthis.target.blur();\n\t\t}\n\n\t\twindow.getSelection().removeAllRanges();\n\t}\n\n\t/**\n\t * Executes the copy operation based on the current selection.\n\t */\n\tcopyText() {\n\t\tlet succeeded;\n\n\t\ttry {\n\t\t\tsucceeded = document.execCommand(this.action);\n\t\t} catch (err) {\n\t\t\tsucceeded = false;\n\t\t}\n\n\t\tthis.handleResult(succeeded);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeFakeElement();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Emits an event based on the copy operation result.\n\t * @param {boolean} succeeded\n\t */\n\thandleResult(succeeded) {\n\t\tif (succeeded) {\n\t\t\tthis.host.emit('success', {\n\t\t\t\taction: this.action,\n\t\t\t\ttext: this.selectedText,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t});\n\t\t} else {\n\t\t\tthis.host.emit('error', {\n\t\t\t\taction: this.action,\n\t\t\t\ttrigger: this.trigger,\n\t\t\t\tclearSelection: this.clearSelection.bind(this)\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake element that was added to the document, as well as its\n\t * listener.\n\t */\n\tremoveFakeElement() {\n\t\tif (this.fake) {\n\t\t\tdom.exitDocument(this.fake);\n\t\t}\n\n\t\tif (this.removeFakeHandler) {\n\t\t\tthis.removeFakeHandler.removeListener();\n\t\t}\n\t}\n\n\t/**\n\t * Selects the content from element passed on `target` attribute.\n\t */\n\tselectTarget() {\n\t\tif (this.target.nodeName === 'INPUT' || this.target.nodeName === 'TEXTAREA') {\n\t\t\tthis.target.select();\n\t\t\tthis.selectedText = this.target.value;\n\t\t} else {\n\t\t\tlet range = document.createRange();\n\t\t\tlet selection = window.getSelection();\n\n\t\t\trange.selectNodeContents(this.target);\n\t\t\tselection.addRange(range);\n\t\t\tthis.selectedText = selection.toString();\n\t\t}\n\n\t\tthis.copyText();\n\t}\n\n\t/**\n\t * Selects the content from value passed on `text` attribute.\n\t */\n\tselectValue() {\n\t\tthis.removeFakeElement();\n\t\tthis.removeFakeHandler = dom.once(document, 'click', this.removeFakeElement.bind(this));\n\n\t\tthis.fake = document.createElement('textarea');\n\t\tthis.fake.style.position = 'fixed';\n\t\tthis.fake.style.left = '-9999px';\n\t\tthis.fake.setAttribute('readonly', '');\n\t\tthis.fake.value = this.text;\n\t\tthis.selectedText = this.text;\n\n\t\tdom.enterDocument(this.fake);\n\n\t\tthis.fake.select();\n\t\tthis.copyText();\n\t}\n}\n\n/**\n * Attributes definition.\n * @type {!Object}\n * @static\n */\nClipboardAction.ATTRS = {\n\t/**\n\t * The action to be performed (either 'copy' or 'cut').\n\t * @type {string}\n\t * @default 'copy'\n\t */\n\taction: {\n\t\tvalue: 'copy',\n\t\tvalidator: function(val) {\n\t\t\treturn val === 'copy' || val === 'cut';\n\t\t}\n\t},\n\n\t/**\n\t * A reference to the `Clipboard` base class.\n\t * @type {!Clipboard}\n\t */\n\thost: {\n\t\tvalidator: function(val) {\n\t\t\treturn val instanceof Clipboard;\n\t\t}\n\t},\n\n\t/**\n\t * The text that is current selected.\n\t * @type {string}\n\t */\n\tselectedText: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The ID of an element that will be have its content copied.\n\t * @type {Element}\n\t */\n\ttarget: {\n\t\tvalidator: core.isElement\n\t},\n\n\t/**\n\t * The text to be copied.\n\t * @type {string}\n\t */\n\ttext: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The element that when clicked initiates a clipboard action.\n\t * @type {!Element}\n\t */\n\ttrigger: {\n\t\tvalidator: core.isElement\n\t}\n};\n\nexport default Clipboard;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('clipboard', Clipboard);"]}