{"version":3,"sources":["/source/Datatable.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport templates from './Datatable.soy';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\nclass Datatable extends Component {\n\n\t/**\n\t * Visits array items and asserts that it only contains one literal type.\n\t * @param {array} value\n\t * @protected\n\t * @throws {Error} If types are different.\n\t */\n\tassertNoMixedTypesInArrays_(value) {\n\t\tvar lastType;\n\t\tvar acceptArray = (v) => {\n\t\t\tvar type = this.getValueType_(v);\n\t\t\tthis.assertSameTypes_(lastType, type);\n\t\t\tlastType = type;\n\t\t\tthis.assertNoMixedTypesInArrays_(v);\n\t\t};\n\t\tvar acceptObject = (v) => this.assertNoMixedTypesInArrays_(v);\n\t\tthis.visit_(value, acceptArray, acceptObject);\n\t}\n\n\t/**\n\t * Asserts literal types are not the same.\n\t * @param {string} type1\n\t * @param {string} type2\n\t * @protected\n\t * @throws {Error} If types are different.\n\t */\n\tassertSameTypes_(type1, type2) {\n\t\tif (type1 && type2 && type1 !== type2) {\n\t\t\tthrow new Error('Datatable does not support mixed types in arrays.');\n\t\t}\n\t}\n\n\t/**\n\t * Extract keys from an array of objects. Column values are aggregated from\n\t * extracting 1-deep key values. For other array types keys are not\n\t * extracted and values are plotted in one column vertically.\n\t * @param {object} expandedValue\n\t * @protected\n\t */\n\tcollectColumnsFromArrayValues_(expandedValue) {\n\t\tvar value = expandedValue.value;\n\t\tvar isFirstArrayItemObject = value[0] && value[0].type === Datatable.TYPES.OBJECT;\n\t\tif (isFirstArrayItemObject) {\n\t\t\tlet columns = {};\n\t\t\tlet columnsType = {};\n\t\t\tvalue.forEach((item) => Object.keys(item.value).forEach((key) => {\n\t\t\t\tcolumns[key] = true;\n\t\t\t\tcolumnsType[key] = item.value[key].type;\n\t\t\t}));\n\t\t\texpandedValue.columns = this.formatColumns(Object.keys(columns));\n\t\t\texpandedValue.columnsType = this.formatColumnsType(columnsType);\n\t\t}\n\t}\n\n\t/**\n\t * Extract columns from object keys.\n\t * @param {object} expandedValue\n\t * @protected\n\t */\n\tcollectColumnsFromObjectKeys_(expandedValue) {\n\t\tvar value = expandedValue.value;\n\t\tlet columns = {};\n\t\tlet columnsType = {};\n\t\tObject.keys(value).forEach((key) => {\n\t\t\tcolumns[key] = true;\n\t\t\tcolumnsType[key] = value[key].type;\n\t\t});\n\t\texpandedValue.columns = this.formatColumns(Object.keys(columns));\n\t\texpandedValue.columnsType = this.formatColumnsType(columnsType);\n\t}\n\n\t/**\n\t * Analyzes the expanded object containing type and value and extracts an\n\t * array of columns to be used for plotting.\n\t * @param {object} expandedValue\n\t * @protected\n\t */\n\tcollectColumnsFromValues_(expandedValue) {\n\t\tswitch (expandedValue.type) {\n\t\t\tcase Datatable.TYPES.ARRAY:\n\t\t\t\tthis.collectColumnsFromArrayValues_(expandedValue);\n\t\t\t\tbreak;\n\t\t\tcase Datatable.TYPES.OBJECT:\n\t\t\t\tthis.collectColumnsFromObjectKeys_(expandedValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Internal helper to get literal JSON type of a value.\n\t * @param {*} value\n\t * @return {string} Type inferred from JSON value.\n\t */\n\tgetValueType_(value) {\n\t\tif (value === null) {\n\t\t\treturn Datatable.TYPES.NULL;\n\t\t}\n\t\tif (value === undefined) {\n\t\t\treturn Datatable.TYPES.UNDEFINED;\n\t\t}\n\t\tif (Array.isArray(value)) {\n\t\t\treturn Datatable.TYPES.ARRAY;\n\t\t}\n\t\tif (core.isObject(value) && value.contentKind === 'HTML') {\n\t\t\treturn Datatable.TYPES.STRING;\n\t\t}\n\t\treturn typeof value;\n\t}\n\n\t/**\n\t * Returns true if data is already expanded, false otherwise.\n\t * @param {*} data\n\t * @return {boolean}\n\t */\n\tisAlreadyExpanded(data) {\n\t\treturn core.isObject(data) && 'columns' in data && 'type' in data;\n\t}\n\n\tsetData_(data) {\n\t\tif (!this.isAlreadyExpanded(data)) {\n\t\t\tthis.assertNoMixedTypesInArrays_(data);\n\t\t\tdata = this.visitValuesAndExpandType_(data);\n\t\t}\n\t\treturn this.visitValuesAndWrapStringValues_(data);\n\t}\n\n\t/**\n\t * Toggles sibling table content of <code>event.delegateTarget</code>.\n\t * @param {Event} event\n\t */\n\ttoggleTableContents(event) {\n\t\tvar label = event.delegateTarget;\n\t\tdom.toggleClasses(label, this.labelClasses);\n\t\tdom.toggleClasses(dom.next(label, 'table'), this.hiddenClasses);\n\t}\n\n\t/**\n\t * Internal non-recursive visitor helper to navigate over JSON values.\n\t * @param {*} value The value to start the visit.\n\t * @param {!function} acceptArray Accept logic for array items.\n\t * @param {!function} acceptObject Accept logic for object keys and values.\n\t * @protected\n\t */\n\tvisit_(value, acceptArray, acceptObject) {\n\t\tswitch (this.getValueType_(value)) {\n\t\t\tcase Datatable.TYPES.ARRAY:\n\t\t\t\tvalue.forEach((v, k) => acceptArray(v, k, value));\n\t\t\t\tbreak;\n\t\t\tcase Datatable.TYPES.OBJECT:\n\t\t\t\tObject.keys(value).forEach((k) => acceptObject(value[k], k, value));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Visits all json values and wraps it in object containing its type and\n\t * value.\n\t * @param {*} value The value to start the visit.\n\t * @return {object} Wrapped object containing type and value.\n\t * @protected\n\t */\n\tvisitValuesAndExpandType_(value) {\n\t\tvar acceptArray = (val, key, reference) => reference[key] = this.visitValuesAndExpandType_(val);\n\t\tvar acceptObject = (val, key, reference) => reference[key] = this.visitValuesAndExpandType_(val);\n\t\tthis.visit_(value, acceptArray, acceptObject);\n\t\tvar type = this.getValueType_(value);\n\t\tvar expanded = {\n\t\t\ttype: type,\n\t\t\tvalue: value\n\t\t};\n\t\tthis.collectColumnsFromValues_(expanded);\n\t\treturn expanded;\n\t}\n\n\t/**\n\t * Visits all json values and wraps it in special `Soy.toIncDom` helper if\n\t * it's string.\n\t * @param {*} value The value to start the visit.\n\t * @return {object} Wrapped string.\n\t * @protected\n\t */\n\tvisitValuesAndWrapStringValues_(value) {\n\t\tvar acceptArray = (val, key, reference) => reference[key] = this.visitValuesAndWrapStringValues_(val);\n\t\tvar acceptObject = (val, key, reference) => reference[key] = this.visitValuesAndWrapStringValues_(val);\n\t\tthis.visit_(value, acceptArray, acceptObject);\n\t\tif (core.isObject(value)) {\n\t\t\tvar type = this.getValueType_(value.value);\n\t\t\tif (type === Datatable.TYPES.STRING) {\n\t\t\t\tvalue.value = Soy.toIncDom(value.value);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n}\nSoy.register(Datatable, templates);\n\nDatatable.STATE = {\n\t/**\n\t * Data to be plotted on datatable. Any JSON type is supported if it does\n\t * not contain mixed types inside an array.\n\t * @type {*}\n\t */\n\tdata: {\n\t\tsetter: 'setData_'\n\t},\n\n\t/**\n\t * If true displays types in column.\n\t * @type {boolean}\n\t * @default true\n\t */\n\tdisplayColumnsType: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * Formats array of columns extracted from JSON data. Relevant for operates\n\t * over column values, such as sorting and formatting.\n\t * @type {function(array.<string>)}\n\t */\n\tformatColumns: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(columns) {\n\t\t\treturn columns.sort();\n\t\t}\n\t},\n\n\t/**\n\t * Formats map of columns type extracted from JSON data. Relevant for\n\t * operates over column values, such as sorting and formatting.\n\t * @type {function(map.<string,string>)}\n\t */\n\tformatColumnsType: {\n\t\tvalidator: core.isFunction,\n\t\tvalue: function(columnstype) {\n\t\t\treturn columnstype;\n\t\t}\n\t},\n\n\t/**\n\t * Css classes to be used for hidden state.\n\t * @type {string}\n\t * @default 'hidden'\n\t */\n\thiddenClasses: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'hidden'\n\t},\n\n\t/**\n\t * Css classes to be used for labels.\n\t * @type {string}\n\t * @default 'collapsed expanded'\n\t */\n\tlabelClasses: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'collapsed expanded'\n\t},\n\n\t/**\n\t * Css classes to be used for tables.\n\t * @type {string}\n\t * @default 'table table-condensed table-hover'\n\t */\n\ttableClasses: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'table table-bordered table-condensed table-hover'\n\t}\n};\n\n/**\n * Datatable supported types.\n * @type {object}\n * @static\n */\nDatatable.TYPES = {\n\tARRAY: 'array',\n\tBOOLEAN: 'boolean',\n\tNULL: 'null',\n\tNUMBER: 'number',\n\tOBJECT: 'object',\n\tSTRING: 'string',\n\tUNDEFINED: 'undefined'\n};\n\nexport default Datatable;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('datatable', Datatable);"]}