{"version":3,"sources":["/source/ButtonGroup.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAWM;;;;;;;;;wBAOL,qCAAa,OAAO;AACnB,OAAI,SAAS,MAAM,cAAN,CADM;AAEnB,OAAI,QAAQ,OAAO,YAAP,CAAoB,YAApB,CAAR,CAFe;AAGnB,OAAI,gBAAgB,KAAK,QAAL,CAAc,OAAd,CAAsB,KAAK,OAAL,CAAa,KAAb,EAAoB,KAApB,CAAtC,CAHe;AAInB,OAAI,kBAAkB,CAAC,CAAD,EAAI;AACzB,SAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,OAAL,CAAa,KAAb,EAAoB,KAApB,CAAnB,CADyB;AAEzB,SAAK,QAAL,GAAgB,KAAK,QAAL,CAFS;IAA1B,MAGO,IAAI,KAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,WAAL,EAAkB;AACnD,SAAK,QAAL,CAAc,MAAd,CAAqB,aAArB,EAAoC,CAApC,EADmD;AAEnD,SAAK,QAAL,GAAgB,KAAK,QAAL,CAFmC;IAA7C;;;AAdH,wBA4BL,+CAAkB,UAAU;AAC3B,OAAI,cAAc,KAAK,GAAL,CAAS,KAAK,WAAL,EAAkB,KAAK,OAAL,CAAa,MAAb,CAAzC,CADuB;AAE3B,OAAI,IAAI,CAAJ,CAFuB;AAG3B,UAAO,SAAS,MAAT,GAAkB,WAAlB,EAA+B;AACrC,QAAI,SAAS,OAAT,CAAiB,KAAK,OAAL,CAAa,CAAb,EAAgB,KAAhB,CAAjB,KAA4C,CAAC,CAAD,EAAI;AACnD,cAAS,IAAT,CAAc,KAAK,OAAL,CAAa,CAAb,EAAgB,KAAhB,CAAd,CADmD;KAApD;AAGA,QAJqC;IAAtC;AAMA,UAAO,QAAP,CAT2B;;;SA5BvB;;;AAwCN,eAAI,QAAJ,CAAa,WAAb;;;;;;;AAOA,aAAY,KAAZ,GAAoB;;;;;;;;AAQnB,WAAS;AACR,cAAW;WAAO,eAAe,KAAf;IAAP;AACX,YAAS,mBAAW;AACnB,WAAO,EAAP,CADmB;IAAX;GAFV;;;;;;;;;AAcA,eAAa;AACZ,cAAW,gBAAK,QAAL;AACX,UAAO,CAAP;AACA,cAAW,IAAX;GAHD;;;;;;AAUA,YAAU;AACT,WAAQ,mBAAR;AACA,cAAW,MAAM,OAAN;AACX,YAAS,mBAAW;AACnB,WAAO,EAAP,CADmB;IAAX;GAHV;EAhCD;;;;;;;AA8CA,aAAY,cAAZ,GAA6B,oBAA7B;;mBAEe;AACoD,yBAAc,QAAd,CAAuB,aAAvB,EAAsC,WAAtC","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport Component from 'metal-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ButtonGroup.soy';\n\n/**\n * Responsible for handling groups of buttons.\n */\nclass ButtonGroup extends Component {\n\t/**\n\t * Handles a `click` event fired on one of the buttons. Appropriately selects\n\t * or deselects the clicked button.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleClick_(event) {\n\t\tvar button = event.delegateTarget;\n\t\tvar index = button.getAttribute('data-index');\n\t\tvar selectedIndex = this.selected.indexOf(this.buttons[index].label);\n\t\tif (selectedIndex === -1) {\n\t\t\tthis.selected.push(this.buttons[index].label);\n\t\t\tthis.selected = this.selected;\n\t\t} else if (this.selected.length > this.minSelected) {\n\t\t\tthis.selected.splice(selectedIndex, 1);\n\t\t\tthis.selected = this.selected;\n\t\t}\n\t}\n\n\t/**\n\t * Setter function for the `selected` state. Checks if the minimum number\n\t * of buttons is selected. If not, the remaining number of buttons needed to\n\t * reach the minimum will be selected.\n\t * @param {!Object<number, boolean>|!Array<string>} selected\n\t * @return {!Object<number, boolean>}\n\t * @protected\n\t */\n\tsetterSelectedFn_(selected) {\n\t\tvar minSelected = Math.min(this.minSelected, this.buttons.length);\n\t\tvar i = 0;\n\t\twhile (selected.length < minSelected) {\n\t\t\tif (selected.indexOf(this.buttons[i].label) === -1) {\n\t\t\t\tselected.push(this.buttons[i].label);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn selected;\n\t}\n}\nSoy.register(ButtonGroup, templates);\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nButtonGroup.STATE = {\n\t/**\n\t * Configuration for the buttons that should be rendered in this group.\n\t * Each button config should be given as an object. Supported options are:\n\t * label, type and cssClass.\n\t * @type {!Array<!Object>}\n\t * @default []\n\t */\n\tbuttons: {\n\t\tvalidator: val => val instanceof Array,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t/**\n\t * The minimum number of buttons that need to be selected at a time. If the\n\t * minimum number of buttons is not already initially selected, this will\n\t * automaticaly select the first `minSelected` buttons.\n\t * @type {number}\n\t * @default 0\n\t */\n\tminSelected: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * An array with the labels of the buttons that should be selected.\n\t * @type {!Array<string>}\n\t */\n\tselected: {\n\t\tsetter: 'setterSelectedFn_',\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\n/**\n * The CSS class added to selected buttons.\n * @type {string}\n * @static\n */\nButtonGroup.SELECTED_CLASS = 'btn-group-selected';\n\nexport default ButtonGroup;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('buttonGroup', ButtonGroup);"]}