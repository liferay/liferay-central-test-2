/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.site.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.liferay.site.model.GroupFriendlyURL;
import com.liferay.site.service.GroupFriendlyURLLocalService;
import com.liferay.site.service.persistence.GroupFriendlyURLPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the group friendly url local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.site.service.impl.GroupFriendlyURLLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.site.service.impl.GroupFriendlyURLLocalServiceImpl
 * @see com.liferay.site.service.GroupFriendlyURLLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class GroupFriendlyURLLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements GroupFriendlyURLLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.site.service.GroupFriendlyURLLocalServiceUtil} to access the group friendly url local service.
	 */

	/**
	 * Adds the group friendly url to the database. Also notifies the appropriate model listeners.
	 *
	 * @param groupFriendlyURL the group friendly url
	 * @return the group friendly url that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GroupFriendlyURL addGroupFriendlyURL(
		GroupFriendlyURL groupFriendlyURL) {
		groupFriendlyURL.setNew(true);

		return groupFriendlyURLPersistence.update(groupFriendlyURL);
	}

	/**
	 * Creates a new group friendly url with the primary key. Does not add the group friendly url to the database.
	 *
	 * @param groupFriendlyURLId the primary key for the new group friendly url
	 * @return the new group friendly url
	 */
	@Override
	public GroupFriendlyURL createGroupFriendlyURL(long groupFriendlyURLId) {
		return groupFriendlyURLPersistence.create(groupFriendlyURLId);
	}

	/**
	 * Deletes the group friendly url with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param groupFriendlyURLId the primary key of the group friendly url
	 * @return the group friendly url that was removed
	 * @throws PortalException if a group friendly url with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GroupFriendlyURL deleteGroupFriendlyURL(long groupFriendlyURLId)
		throws PortalException {
		return groupFriendlyURLPersistence.remove(groupFriendlyURLId);
	}

	/**
	 * Deletes the group friendly url from the database. Also notifies the appropriate model listeners.
	 *
	 * @param groupFriendlyURL the group friendly url
	 * @return the group friendly url that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GroupFriendlyURL deleteGroupFriendlyURL(
		GroupFriendlyURL groupFriendlyURL) {
		return groupFriendlyURLPersistence.remove(groupFriendlyURL);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(GroupFriendlyURL.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return groupFriendlyURLPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.site.model.impl.GroupFriendlyURLModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return groupFriendlyURLPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.site.model.impl.GroupFriendlyURLModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return groupFriendlyURLPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return groupFriendlyURLPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return groupFriendlyURLPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public GroupFriendlyURL fetchGroupFriendlyURL(long groupFriendlyURLId) {
		return groupFriendlyURLPersistence.fetchByPrimaryKey(groupFriendlyURLId);
	}

	/**
	 * Returns the group friendly url matching the UUID and group.
	 *
	 * @param uuid the group friendly url's UUID
	 * @param groupId the primary key of the group
	 * @return the matching group friendly url, or <code>null</code> if a matching group friendly url could not be found
	 */
	@Override
	public GroupFriendlyURL fetchGroupFriendlyURLByUuidAndGroupId(String uuid,
		long groupId) {
		return groupFriendlyURLPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the group friendly url with the primary key.
	 *
	 * @param groupFriendlyURLId the primary key of the group friendly url
	 * @return the group friendly url
	 * @throws PortalException if a group friendly url with the primary key could not be found
	 */
	@Override
	public GroupFriendlyURL getGroupFriendlyURL(long groupFriendlyURLId)
		throws PortalException {
		return groupFriendlyURLPersistence.findByPrimaryKey(groupFriendlyURLId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(groupFriendlyURLLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(GroupFriendlyURL.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("groupFriendlyURLId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(groupFriendlyURLLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(GroupFriendlyURL.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"groupFriendlyURLId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(groupFriendlyURLLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(GroupFriendlyURL.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("groupFriendlyURLId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<GroupFriendlyURL>() {
				@Override
				public void performAction(GroupFriendlyURL groupFriendlyURL)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						groupFriendlyURL);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(GroupFriendlyURL.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return groupFriendlyURLLocalService.deleteGroupFriendlyURL((GroupFriendlyURL)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return groupFriendlyURLPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the group friendly urls matching the UUID and company.
	 *
	 * @param uuid the UUID of the group friendly urls
	 * @param companyId the primary key of the company
	 * @return the matching group friendly urls, or an empty list if no matches were found
	 */
	@Override
	public List<GroupFriendlyURL> getGroupFriendlyURLsByUuidAndCompanyId(
		String uuid, long companyId) {
		return groupFriendlyURLPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of group friendly urls matching the UUID and company.
	 *
	 * @param uuid the UUID of the group friendly urls
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of group friendly urls
	 * @param end the upper bound of the range of group friendly urls (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching group friendly urls, or an empty list if no matches were found
	 */
	@Override
	public List<GroupFriendlyURL> getGroupFriendlyURLsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<GroupFriendlyURL> orderByComparator) {
		return groupFriendlyURLPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the group friendly url matching the UUID and group.
	 *
	 * @param uuid the group friendly url's UUID
	 * @param groupId the primary key of the group
	 * @return the matching group friendly url
	 * @throws PortalException if a matching group friendly url could not be found
	 */
	@Override
	public GroupFriendlyURL getGroupFriendlyURLByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return groupFriendlyURLPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the group friendly urls.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.site.model.impl.GroupFriendlyURLModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of group friendly urls
	 * @param end the upper bound of the range of group friendly urls (not inclusive)
	 * @return the range of group friendly urls
	 */
	@Override
	public List<GroupFriendlyURL> getGroupFriendlyURLs(int start, int end) {
		return groupFriendlyURLPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of group friendly urls.
	 *
	 * @return the number of group friendly urls
	 */
	@Override
	public int getGroupFriendlyURLsCount() {
		return groupFriendlyURLPersistence.countAll();
	}

	/**
	 * Updates the group friendly url in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param groupFriendlyURL the group friendly url
	 * @return the group friendly url that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GroupFriendlyURL updateGroupFriendlyURL(
		GroupFriendlyURL groupFriendlyURL) {
		return groupFriendlyURLPersistence.update(groupFriendlyURL);
	}

	/**
	 * Returns the group friendly url local service.
	 *
	 * @return the group friendly url local service
	 */
	public GroupFriendlyURLLocalService getGroupFriendlyURLLocalService() {
		return groupFriendlyURLLocalService;
	}

	/**
	 * Sets the group friendly url local service.
	 *
	 * @param groupFriendlyURLLocalService the group friendly url local service
	 */
	public void setGroupFriendlyURLLocalService(
		GroupFriendlyURLLocalService groupFriendlyURLLocalService) {
		this.groupFriendlyURLLocalService = groupFriendlyURLLocalService;
	}

	/**
	 * Returns the group friendly url persistence.
	 *
	 * @return the group friendly url persistence
	 */
	public GroupFriendlyURLPersistence getGroupFriendlyURLPersistence() {
		return groupFriendlyURLPersistence;
	}

	/**
	 * Sets the group friendly url persistence.
	 *
	 * @param groupFriendlyURLPersistence the group friendly url persistence
	 */
	public void setGroupFriendlyURLPersistence(
		GroupFriendlyURLPersistence groupFriendlyURLPersistence) {
		this.groupFriendlyURLPersistence = groupFriendlyURLPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.site.model.GroupFriendlyURL",
			groupFriendlyURLLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.site.model.GroupFriendlyURL");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return GroupFriendlyURLLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return GroupFriendlyURL.class;
	}

	protected String getModelClassName() {
		return GroupFriendlyURL.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = groupFriendlyURLPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = GroupFriendlyURLLocalService.class)
	protected GroupFriendlyURLLocalService groupFriendlyURLLocalService;
	@BeanReference(type = GroupFriendlyURLPersistence.class)
	protected GroupFriendlyURLPersistence groupFriendlyURLPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}