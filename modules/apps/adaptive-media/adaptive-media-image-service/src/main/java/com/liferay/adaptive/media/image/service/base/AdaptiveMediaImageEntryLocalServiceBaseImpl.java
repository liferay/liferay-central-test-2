/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.adaptive.media.image.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.adaptive.media.image.model.AdaptiveMediaImageEntry;
import com.liferay.adaptive.media.image.service.AdaptiveMediaImageEntryLocalService;
import com.liferay.adaptive.media.image.service.persistence.AdaptiveMediaImageEntryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the adaptive media image entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.adaptive.media.image.service.impl.AdaptiveMediaImageEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.adaptive.media.image.service.impl.AdaptiveMediaImageEntryLocalServiceImpl
 * @see com.liferay.adaptive.media.image.service.AdaptiveMediaImageEntryLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AdaptiveMediaImageEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AdaptiveMediaImageEntryLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.adaptive.media.image.service.AdaptiveMediaImageEntryLocalServiceUtil} to access the adaptive media image entry local service.
	 */

	/**
	 * Adds the adaptive media image entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImageEntry the adaptive media image entry
	 * @return the adaptive media image entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AdaptiveMediaImageEntry addAdaptiveMediaImageEntry(
		AdaptiveMediaImageEntry adaptiveMediaImageEntry) {
		adaptiveMediaImageEntry.setNew(true);

		return adaptiveMediaImageEntryPersistence.update(adaptiveMediaImageEntry);
	}

	/**
	 * Creates a new adaptive media image entry with the primary key. Does not add the adaptive media image entry to the database.
	 *
	 * @param adaptiveMediaImageEntryId the primary key for the new adaptive media image entry
	 * @return the new adaptive media image entry
	 */
	@Override
	public AdaptiveMediaImageEntry createAdaptiveMediaImageEntry(
		long adaptiveMediaImageEntryId) {
		return adaptiveMediaImageEntryPersistence.create(adaptiveMediaImageEntryId);
	}

	/**
	 * Deletes the adaptive media image entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImageEntryId the primary key of the adaptive media image entry
	 * @return the adaptive media image entry that was removed
	 * @throws PortalException if a adaptive media image entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AdaptiveMediaImageEntry deleteAdaptiveMediaImageEntry(
		long adaptiveMediaImageEntryId) throws PortalException {
		return adaptiveMediaImageEntryPersistence.remove(adaptiveMediaImageEntryId);
	}

	/**
	 * Deletes the adaptive media image entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImageEntry the adaptive media image entry
	 * @return the adaptive media image entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AdaptiveMediaImageEntry deleteAdaptiveMediaImageEntry(
		AdaptiveMediaImageEntry adaptiveMediaImageEntry) {
		return adaptiveMediaImageEntryPersistence.remove(adaptiveMediaImageEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AdaptiveMediaImageEntry.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return adaptiveMediaImageEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adaptive.media.image.model.impl.AdaptiveMediaImageEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return adaptiveMediaImageEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adaptive.media.image.model.impl.AdaptiveMediaImageEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return adaptiveMediaImageEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return adaptiveMediaImageEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return adaptiveMediaImageEntryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AdaptiveMediaImageEntry fetchAdaptiveMediaImageEntry(
		long adaptiveMediaImageEntryId) {
		return adaptiveMediaImageEntryPersistence.fetchByPrimaryKey(adaptiveMediaImageEntryId);
	}

	/**
	 * Returns the adaptive media image entry matching the UUID and group.
	 *
	 * @param uuid the adaptive media image entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching adaptive media image entry, or <code>null</code> if a matching adaptive media image entry could not be found
	 */
	@Override
	public AdaptiveMediaImageEntry fetchAdaptiveMediaImageEntryByUuidAndGroupId(
		String uuid, long groupId) {
		return adaptiveMediaImageEntryPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the adaptive media image entry with the primary key.
	 *
	 * @param adaptiveMediaImageEntryId the primary key of the adaptive media image entry
	 * @return the adaptive media image entry
	 * @throws PortalException if a adaptive media image entry with the primary key could not be found
	 */
	@Override
	public AdaptiveMediaImageEntry getAdaptiveMediaImageEntry(
		long adaptiveMediaImageEntryId) throws PortalException {
		return adaptiveMediaImageEntryPersistence.findByPrimaryKey(adaptiveMediaImageEntryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(adaptiveMediaImageEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AdaptiveMediaImageEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"adaptiveMediaImageEntryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(adaptiveMediaImageEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AdaptiveMediaImageEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"adaptiveMediaImageEntryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(adaptiveMediaImageEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AdaptiveMediaImageEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"adaptiveMediaImageEntryId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return adaptiveMediaImageEntryLocalService.deleteAdaptiveMediaImageEntry((AdaptiveMediaImageEntry)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return adaptiveMediaImageEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the adaptive media image entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the adaptive media image entries
	 * @param companyId the primary key of the company
	 * @return the matching adaptive media image entries, or an empty list if no matches were found
	 */
	@Override
	public List<AdaptiveMediaImageEntry> getAdaptiveMediaImageEntriesByUuidAndCompanyId(
		String uuid, long companyId) {
		return adaptiveMediaImageEntryPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of adaptive media image entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the adaptive media image entries
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of adaptive media image entries
	 * @param end the upper bound of the range of adaptive media image entries (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching adaptive media image entries, or an empty list if no matches were found
	 */
	@Override
	public List<AdaptiveMediaImageEntry> getAdaptiveMediaImageEntriesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<AdaptiveMediaImageEntry> orderByComparator) {
		return adaptiveMediaImageEntryPersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the adaptive media image entry matching the UUID and group.
	 *
	 * @param uuid the adaptive media image entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching adaptive media image entry
	 * @throws PortalException if a matching adaptive media image entry could not be found
	 */
	@Override
	public AdaptiveMediaImageEntry getAdaptiveMediaImageEntryByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return adaptiveMediaImageEntryPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the adaptive media image entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adaptive.media.image.model.impl.AdaptiveMediaImageEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of adaptive media image entries
	 * @param end the upper bound of the range of adaptive media image entries (not inclusive)
	 * @return the range of adaptive media image entries
	 */
	@Override
	public List<AdaptiveMediaImageEntry> getAdaptiveMediaImageEntries(
		int start, int end) {
		return adaptiveMediaImageEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of adaptive media image entries.
	 *
	 * @return the number of adaptive media image entries
	 */
	@Override
	public int getAdaptiveMediaImageEntriesCount() {
		return adaptiveMediaImageEntryPersistence.countAll();
	}

	/**
	 * Updates the adaptive media image entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImageEntry the adaptive media image entry
	 * @return the adaptive media image entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AdaptiveMediaImageEntry updateAdaptiveMediaImageEntry(
		AdaptiveMediaImageEntry adaptiveMediaImageEntry) {
		return adaptiveMediaImageEntryPersistence.update(adaptiveMediaImageEntry);
	}

	/**
	 * Returns the adaptive media image entry local service.
	 *
	 * @return the adaptive media image entry local service
	 */
	public AdaptiveMediaImageEntryLocalService getAdaptiveMediaImageEntryLocalService() {
		return adaptiveMediaImageEntryLocalService;
	}

	/**
	 * Sets the adaptive media image entry local service.
	 *
	 * @param adaptiveMediaImageEntryLocalService the adaptive media image entry local service
	 */
	public void setAdaptiveMediaImageEntryLocalService(
		AdaptiveMediaImageEntryLocalService adaptiveMediaImageEntryLocalService) {
		this.adaptiveMediaImageEntryLocalService = adaptiveMediaImageEntryLocalService;
	}

	/**
	 * Returns the adaptive media image entry persistence.
	 *
	 * @return the adaptive media image entry persistence
	 */
	public AdaptiveMediaImageEntryPersistence getAdaptiveMediaImageEntryPersistence() {
		return adaptiveMediaImageEntryPersistence;
	}

	/**
	 * Sets the adaptive media image entry persistence.
	 *
	 * @param adaptiveMediaImageEntryPersistence the adaptive media image entry persistence
	 */
	public void setAdaptiveMediaImageEntryPersistence(
		AdaptiveMediaImageEntryPersistence adaptiveMediaImageEntryPersistence) {
		this.adaptiveMediaImageEntryPersistence = adaptiveMediaImageEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.adaptive.media.image.model.AdaptiveMediaImageEntry",
			adaptiveMediaImageEntryLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.adaptive.media.image.model.AdaptiveMediaImageEntry");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AdaptiveMediaImageEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AdaptiveMediaImageEntry.class;
	}

	protected String getModelClassName() {
		return AdaptiveMediaImageEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = adaptiveMediaImageEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AdaptiveMediaImageEntryLocalService.class)
	protected AdaptiveMediaImageEntryLocalService adaptiveMediaImageEntryLocalService;
	@BeanReference(type = AdaptiveMediaImageEntryPersistence.class)
	protected AdaptiveMediaImageEntryPersistence adaptiveMediaImageEntryPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}