/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.adaptive.media.image.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.adaptive.media.image.model.AdaptiveMediaImage;
import com.liferay.adaptive.media.image.service.AdaptiveMediaImageLocalService;
import com.liferay.adaptive.media.image.service.persistence.AdaptiveMediaImageFinder;
import com.liferay.adaptive.media.image.service.persistence.AdaptiveMediaImagePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the adaptive media image local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.adaptive.media.image.service.impl.AdaptiveMediaImageLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.adaptive.media.image.service.impl.AdaptiveMediaImageLocalServiceImpl
 * @see com.liferay.adaptive.media.image.service.AdaptiveMediaImageLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AdaptiveMediaImageLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AdaptiveMediaImageLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.adaptive.media.image.service.AdaptiveMediaImageLocalServiceUtil} to access the adaptive media image local service.
	 */

	/**
	 * Adds the adaptive media image to the database. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImage the adaptive media image
	 * @return the adaptive media image that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AdaptiveMediaImage addAdaptiveMediaImage(
		AdaptiveMediaImage adaptiveMediaImage) {
		adaptiveMediaImage.setNew(true);

		return adaptiveMediaImagePersistence.update(adaptiveMediaImage);
	}

	/**
	 * Creates a new adaptive media image with the primary key. Does not add the adaptive media image to the database.
	 *
	 * @param adaptiveMediaImageId the primary key for the new adaptive media image
	 * @return the new adaptive media image
	 */
	@Override
	public AdaptiveMediaImage createAdaptiveMediaImage(
		long adaptiveMediaImageId) {
		return adaptiveMediaImagePersistence.create(adaptiveMediaImageId);
	}

	/**
	 * Deletes the adaptive media image with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImageId the primary key of the adaptive media image
	 * @return the adaptive media image that was removed
	 * @throws PortalException if a adaptive media image with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AdaptiveMediaImage deleteAdaptiveMediaImage(
		long adaptiveMediaImageId) throws PortalException {
		return adaptiveMediaImagePersistence.remove(adaptiveMediaImageId);
	}

	/**
	 * Deletes the adaptive media image from the database. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImage the adaptive media image
	 * @return the adaptive media image that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AdaptiveMediaImage deleteAdaptiveMediaImage(
		AdaptiveMediaImage adaptiveMediaImage) {
		return adaptiveMediaImagePersistence.remove(adaptiveMediaImage);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AdaptiveMediaImage.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return adaptiveMediaImagePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adaptive.media.image.model.impl.AdaptiveMediaImageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return adaptiveMediaImagePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adaptive.media.image.model.impl.AdaptiveMediaImageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return adaptiveMediaImagePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return adaptiveMediaImagePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return adaptiveMediaImagePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AdaptiveMediaImage fetchAdaptiveMediaImage(long adaptiveMediaImageId) {
		return adaptiveMediaImagePersistence.fetchByPrimaryKey(adaptiveMediaImageId);
	}

	/**
	 * Returns the adaptive media image matching the UUID and group.
	 *
	 * @param uuid the adaptive media image's UUID
	 * @param groupId the primary key of the group
	 * @return the matching adaptive media image, or <code>null</code> if a matching adaptive media image could not be found
	 */
	@Override
	public AdaptiveMediaImage fetchAdaptiveMediaImageByUuidAndGroupId(
		String uuid, long groupId) {
		return adaptiveMediaImagePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the adaptive media image with the primary key.
	 *
	 * @param adaptiveMediaImageId the primary key of the adaptive media image
	 * @return the adaptive media image
	 * @throws PortalException if a adaptive media image with the primary key could not be found
	 */
	@Override
	public AdaptiveMediaImage getAdaptiveMediaImage(long adaptiveMediaImageId)
		throws PortalException {
		return adaptiveMediaImagePersistence.findByPrimaryKey(adaptiveMediaImageId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(adaptiveMediaImageLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AdaptiveMediaImage.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("adaptiveMediaImageId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(adaptiveMediaImageLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AdaptiveMediaImage.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"adaptiveMediaImageId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(adaptiveMediaImageLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AdaptiveMediaImage.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("adaptiveMediaImageId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return adaptiveMediaImageLocalService.deleteAdaptiveMediaImage((AdaptiveMediaImage)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return adaptiveMediaImagePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the adaptive media images matching the UUID and company.
	 *
	 * @param uuid the UUID of the adaptive media images
	 * @param companyId the primary key of the company
	 * @return the matching adaptive media images, or an empty list if no matches were found
	 */
	@Override
	public List<AdaptiveMediaImage> getAdaptiveMediaImagesByUuidAndCompanyId(
		String uuid, long companyId) {
		return adaptiveMediaImagePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of adaptive media images matching the UUID and company.
	 *
	 * @param uuid the UUID of the adaptive media images
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of adaptive media images
	 * @param end the upper bound of the range of adaptive media images (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching adaptive media images, or an empty list if no matches were found
	 */
	@Override
	public List<AdaptiveMediaImage> getAdaptiveMediaImagesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<AdaptiveMediaImage> orderByComparator) {
		return adaptiveMediaImagePersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the adaptive media image matching the UUID and group.
	 *
	 * @param uuid the adaptive media image's UUID
	 * @param groupId the primary key of the group
	 * @return the matching adaptive media image
	 * @throws PortalException if a matching adaptive media image could not be found
	 */
	@Override
	public AdaptiveMediaImage getAdaptiveMediaImageByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return adaptiveMediaImagePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the adaptive media images.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adaptive.media.image.model.impl.AdaptiveMediaImageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of adaptive media images
	 * @param end the upper bound of the range of adaptive media images (not inclusive)
	 * @return the range of adaptive media images
	 */
	@Override
	public List<AdaptiveMediaImage> getAdaptiveMediaImages(int start, int end) {
		return adaptiveMediaImagePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of adaptive media images.
	 *
	 * @return the number of adaptive media images
	 */
	@Override
	public int getAdaptiveMediaImagesCount() {
		return adaptiveMediaImagePersistence.countAll();
	}

	/**
	 * Updates the adaptive media image in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param adaptiveMediaImage the adaptive media image
	 * @return the adaptive media image that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AdaptiveMediaImage updateAdaptiveMediaImage(
		AdaptiveMediaImage adaptiveMediaImage) {
		return adaptiveMediaImagePersistence.update(adaptiveMediaImage);
	}

	/**
	 * Returns the adaptive media image local service.
	 *
	 * @return the adaptive media image local service
	 */
	public AdaptiveMediaImageLocalService getAdaptiveMediaImageLocalService() {
		return adaptiveMediaImageLocalService;
	}

	/**
	 * Sets the adaptive media image local service.
	 *
	 * @param adaptiveMediaImageLocalService the adaptive media image local service
	 */
	public void setAdaptiveMediaImageLocalService(
		AdaptiveMediaImageLocalService adaptiveMediaImageLocalService) {
		this.adaptiveMediaImageLocalService = adaptiveMediaImageLocalService;
	}

	/**
	 * Returns the adaptive media image persistence.
	 *
	 * @return the adaptive media image persistence
	 */
	public AdaptiveMediaImagePersistence getAdaptiveMediaImagePersistence() {
		return adaptiveMediaImagePersistence;
	}

	/**
	 * Sets the adaptive media image persistence.
	 *
	 * @param adaptiveMediaImagePersistence the adaptive media image persistence
	 */
	public void setAdaptiveMediaImagePersistence(
		AdaptiveMediaImagePersistence adaptiveMediaImagePersistence) {
		this.adaptiveMediaImagePersistence = adaptiveMediaImagePersistence;
	}

	/**
	 * Returns the adaptive media image finder.
	 *
	 * @return the adaptive media image finder
	 */
	public AdaptiveMediaImageFinder getAdaptiveMediaImageFinder() {
		return adaptiveMediaImageFinder;
	}

	/**
	 * Sets the adaptive media image finder.
	 *
	 * @param adaptiveMediaImageFinder the adaptive media image finder
	 */
	public void setAdaptiveMediaImageFinder(
		AdaptiveMediaImageFinder adaptiveMediaImageFinder) {
		this.adaptiveMediaImageFinder = adaptiveMediaImageFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.adaptive.media.image.model.AdaptiveMediaImage",
			adaptiveMediaImageLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.adaptive.media.image.model.AdaptiveMediaImage");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AdaptiveMediaImageLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AdaptiveMediaImage.class;
	}

	protected String getModelClassName() {
		return AdaptiveMediaImage.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = adaptiveMediaImagePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AdaptiveMediaImageLocalService.class)
	protected AdaptiveMediaImageLocalService adaptiveMediaImageLocalService;
	@BeanReference(type = AdaptiveMediaImagePersistence.class)
	protected AdaptiveMediaImagePersistence adaptiveMediaImagePersistence;
	@BeanReference(type = AdaptiveMediaImageFinder.class)
	protected AdaptiveMediaImageFinder adaptiveMediaImageFinder;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}