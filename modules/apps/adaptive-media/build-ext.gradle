import org.kt3k.gradle.plugin.CoverallsPlugin

import org.gradle.testing.jacoco.tasks.JacocoReport

buildscript {
	dependencies {
		classpath group: "org.kt3k.gradle.plugin", name: "coveralls-gradle-plugin", version: "2.6.3"
	}

	repositories {
		mavenLocal()

		maven {
			url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: CoverallsPlugin

task checkDocker
task copyJacocoAgent(type: Copy)
task coverageReport(type: JacocoReport)
task createTempDir(type: Exec)
task loginDocker(type: Exec)
task rmDocker(type: Exec)
task runDocker(type: Exec)
task startJacocoRecording
task stopDocker(type: Exec)
task stopJacocoRecording(type: Exec)

Iterable<Project> moduleProjects = subprojects.findAll{
	!it.childProjects
}

FileCollection moduleSrcDirs = files(moduleProjects.sourceSets.main.allSource.srcDirs)

allprojects {
	apply plugin: "jacoco"

	jacoco {
		toolVersion = "0.7.8"
	}
}

checkDocker {
	doLast {
		URL url = new URL("http://localhost:8080")

		println "Trying to reach ${url}"

		while (true) {
			try {
				print "."

				url.text

				println "Portal startup finished"

				break
			}
			catch (Exception e) {
				Thread.sleep 1000
			}
		}
	}
}

copyJacocoAgent {
	configurations.jacocoAgent.asFileTree.each {
		from(zipTree(it))
	}

	into "${rootDir}/build/jacoco"
}

coverageReport {
	additionalSourceDirs = moduleSrcDirs
	classDirectories = files(moduleProjects.sourceSets.main.output)
	executionData = files(moduleProjects.jacocoTestReport.executionData, "${rootDir}/build/jacoco/testIntegration.exec")
	sourceDirectories = moduleSrcDirs

	reports {
		html.enabled = true
		xml.enabled = true
	}

	onlyIf = { true }

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(
				dir: it,
				exclude: [
					"**/*Exception*",
					"**/*ServiceUtil*",
					"**/*ServiceWrapper*",
					"**/constants/*",
					"**/exception/*",
					"**/model/*",
					"**/model/impl/*",
					"**/persistence/*",
					"**/service/base/*",
					"**/service/util/*"
				])
		})
	}
}

createTempDir {
	commandLine "mkdir", "-m", "777", "-p", "${rootDir}/build/tmpdir"
}

loginDocker {
	args "login"

	doFirst {
		if (_isAlreadyLoggedIn()) {
			println "User already logged in in Docker"

			throw new StopExecutionException()
		}

		println "User not logged in into Docker yet"

		if (!dockerPwd || !dockerUser) {
			println "DOCKER_USER or DOCKER_PWD environment variables not set"

			def console = System.console()

			if (console == null) {
				throw new GradleException("It is not possible to read Docker credentials.")
			}

			println "Using system.in to prompt for Docker user and password"

			println "Please enter docker user:"

			dockerUser = console.readLine()

			if (!dockerUser) {
				throw new GradleException("You must enter Docker user or set DOCKER_USER environment variable to proceed.")
			}

			println "Please enter Docker password:"

			dockerPwd = console.readPassword()

			if (!dockerPwd) {
				throw new GradleException("You must enter Docker password or set DOCKER_PWD environment variable to proceed.")
			}

			args "--username=${dockerUser}"
			args "--password=${dockerPwd}"
		}
	}

	executable = "docker"

	ext {
		dockerPwd = System.getenv("DOCKER_PWD")
		dockerUser = System.getenv("DOCKER_USER")
	}
}

rmDocker {
	commandLine "docker", "rm", "com-liferay-adaptive-media"
	dependsOn stopDocker
	ignoreExitValue = true
}

runDocker {
	dependsOn createTempDir
	dependsOn loginDocker
	dependsOn rmDocker
	dependsOn copyJacocoAgent

	String javaOpts = project.getProperty("com.liferay.adaptive.media.java.opts")

	javaOpts += " " + project.getProperty("com.liferay.adaptive.media.jacoco.opts")

	if (project.hasProperty("debug")) {
		javaOpts += " " + project.getProperty("com.liferay.adaptive.media.debug.opts")
	}

	commandLine "docker", "run",
		"-h", "localhost",
		"-e", "JAVA_OPTS=$javaOpts",
		"-p", "5005:5005",
		"-p", "8080:8080",
		"-p", "8099:8099",
		"-p", "11311:11311",
		"-v", "${rootDir}/../bundles/deploy:/liferay/deploy",
		"-v", "${rootDir}/docker/portal-ext.properties:/liferay/portal-ext.properties",
		"-v", "${rootDir}/build/tmpdir:${rootDir}/build/tmpdir",
		"-v", "${rootDir}/build/jacoco:/jacoco",
		"-d",
		"--name", "com-liferay-adaptive-media",
		"liferay/liferay-de:20170421073001106222642-db"

	finalizedBy checkDocker
}

startJacocoRecording {
	doLast {
		File file = new File("${rootDir}/build/jacoco/testIntegration.exec")

		if (file.exists()) {
			file.deleteOnExit()
		}

		file.parentFile.mkdirs()

		file.createNewFile()
	}
}

stopDocker {
	commandLine "docker", "stop", "com-liferay-adaptive-media"
	ignoreExitValue = true
}

stopJacocoRecording {
	commandLine "docker", "exec", "-d", "com-liferay-adaptive-media", "env", "JAVA_OPTS=", "/liferay/tomcat-8.0.32/bin/shutdown.sh"
}

configure(subprojects.findAll {!it.childProjects}) {
	configurations {
		runtimeLib {
			description = "Configures deployable runtime libs."
		}

		compile.extendsFrom(runtimeLib)
	}

	liferay {
		deployDir = new File("${rootDir}/../bundles/deploy")
	}

	jacocoTestReport {
		additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
		sourceDirectories = files(sourceSets.main.allSource.srcDirs)
		classDirectories =  files(sourceSets.main.output)

		reports {
			html.enabled = true
			xml.enabled = true
		}
	}

	test {
		ignoreFailures = false
	}

	testIntegration {
		dependsOn createTempDir

		ignoreFailures = false
		systemProperty "java.io.tmpdir", "${rootDir}/build/tmpdir"
	}

	task deployRuntimeLibs(type: Copy) {
		into liferay.deployDir
		from configurations.runtimeLib
		rename {
			String fileName ->
				fileName.replaceAll("(.*)-((\\d\\.{1})*\\d)\\.jar", "\$1.jar")
		}
	}

	runDocker.dependsOn deploy
	runDocker.dependsOn deployRuntimeLibs

	if (project.hasProperty("docker")) {
		setUpTestableTomcat.enabled = false
	}

	startTestableTomcat.enabled = false
	stopTestableTomcat.enabled = false
}

repositories {
	mavenLocal()

	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}

tasks.coveralls {
	dependsOn coverageReport
}

coveralls.jacocoReportPath = "build/reports/jacoco/coverageReport/coverageReport.xml"
coveralls.sourceDirs = moduleSrcDirs.collect {
	file -> file.absolutePath
}

private boolean _isAlreadyLoggedIn() {
	File dockerConfigFile = new File(System.getenv("HOME") + "/.docker/config.json")

	if (dockerConfigFile.exists() && dockerConfigFile.text.contains("https://index.docker.io/v1/")) {
		return true
	}

	return false
}