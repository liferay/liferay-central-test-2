<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
LinkedHashMap<Long, long[]> scopes = new LinkedHashMap<Long, long[]>();

if (customizeAnnouncementsDisplayed) {
	long[] selectedScopeGroupIdsArray = GetterUtil.getLongValues(StringUtil.split(selectedScopeGroupIds));
	long[] selectedScopeOrganizationIdsArray = GetterUtil.getLongValues(StringUtil.split(selectedScopeOrganizationIds));
	long[] selectedScopeRoleIdsArray = GetterUtil.getLongValues(StringUtil.split(selectedScopeRoleIds));
	long[] selectedScopeUserGroupIdsArray = GetterUtil.getLongValues(StringUtil.split(selectedScopeUserGroupIds));

	if (selectedScopeGroupIdsArray.length != 0) {
		scopes.put(PortalUtil.getClassNameId(Group.class.getName()), selectedScopeGroupIdsArray);
	}

	if (selectedScopeOrganizationIdsArray.length != 0) {
		scopes.put(PortalUtil.getClassNameId(Organization.class.getName()), selectedScopeOrganizationIdsArray);
	}

	if (selectedScopeRoleIdsArray.length != 0) {
		scopes.put(PortalUtil.getClassNameId(Role.class.getName()), selectedScopeRoleIdsArray);
	}

	if (selectedScopeUserGroupIdsArray.length != 0) {
		scopes.put(PortalUtil.getClassNameId(UserGroup.class.getName()), selectedScopeUserGroupIdsArray);
	}
}
else {
	scopes = AnnouncementsUtil.getAnnouncementScopes(user.getUserId());
}

scopes.put(Long.valueOf(0), new long[] {0});

SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, "cur1", pageDelta, portletURL, null, "no-entries-were-found");

List<AnnouncementsEntry> results = null;
int total = 0;

int flagValue = AnnouncementsFlagConstants.NOT_HIDDEN;
%>

<div class="unread-entries">
	<%@ include file="/entry_iterator.jspf" %>
</div>

<%
int visibleMessagesCount = total;
%>

<c:if test="<%= visibleMessagesCount > 0 %>">
	<liferay-ui:search-paginator id="pageIteratorTop" searchContainer="<%= searchContainer %>" type="article" />
</c:if>

<%
flagValue = AnnouncementsFlagConstants.HIDDEN;

searchContainer = new SearchContainer(renderRequest, null, null, "cur2", pageDelta, portletURL, null, "no-entries-were-found");
%>

<div class="read-entries">
	<%@ include file="/entry_iterator.jspf" %>
</div>

<%
int hiddenMessagesCount = total;
%>

<c:if test="<%= hiddenMessagesCount > 0 %>">
	<liferay-ui:search-paginator id="pageIteratorBottom" searchContainer="<%= searchContainer %>" type="article" />
</c:if>

<%
if ((hiddenMessagesCount == 0) && (visibleMessagesCount == 0) && portletName.equals(AnnouncementsPortletKeys.ALERTS) && !AnnouncementsEntryPermission.contains(permissionChecker, layout, AnnouncementsPortletKeys.ALERTS, ActionKeys.ADD_ENTRY)) {
	renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
}
%>

<aui:script>
	function <portlet:namespace />handleEntry(entryId) {
		var entry = AUI.$('#<portlet:namespace />' + entryId);

		var container = entry.parent();

		if (container.hasClass('unread-entries')) {
			<portlet:namespace />markEntry(entryId);
		}
		else {
			<portlet:namespace />unmarkEntry(entryId);
		}
	}

	function <portlet:namespace />markEntry(entryId) {
		Liferay.Service(
			'/announcementsflag/add-flag',
			{
				entryId: entryId,
				value: <%= AnnouncementsFlagConstants.HIDDEN %>
			},
			AUI.$.proxy(Liferay.Portlet, 'refresh', '#p_p_id<portlet:namespace />')
		);
	}

	function <portlet:namespace />unmarkEntry(entryId) {
		Liferay.Service(
			'/announcementsflag/get-flag',
				{
					entryId : entryId,
					value: <%= AnnouncementsFlagConstants.HIDDEN %>
				},
				function(response) {
					Liferay.Service(
						'/announcementsflag/delete-flag',
						{
							flagId: response.flagId
						},
						AUI.$.proxy(Liferay.Portlet, 'refresh', '#p_p_id<portlet:namespace />')
					);
				}
		);
	}
</aui:script>