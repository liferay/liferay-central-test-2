/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.dynamic.data.mapping.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.dynamic.data.mapping.model.DDMDataProvider;
import com.liferay.dynamic.data.mapping.service.DDMDataProviderLocalService;
import com.liferay.dynamic.data.mapping.service.persistence.DDMDataProviderPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.service.persistence.GroupPersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.exportimport.lar.ExportImportHelperUtil;
import com.liferay.portlet.exportimport.lar.ManifestSummary;
import com.liferay.portlet.exportimport.lar.PortletDataContext;
import com.liferay.portlet.exportimport.lar.StagedModelDataHandlerUtil;
import com.liferay.portlet.exportimport.lar.StagedModelType;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the d d m data provider local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.dynamic.data.mapping.service.impl.DDMDataProviderLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.dynamic.data.mapping.service.impl.DDMDataProviderLocalServiceImpl
 * @see com.liferay.dynamic.data.mapping.service.DDMDataProviderLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class DDMDataProviderLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DDMDataProviderLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.dynamic.data.mapping.service.DDMDataProviderLocalServiceUtil} to access the d d m data provider local service.
	 */

	/**
	 * Adds the d d m data provider to the database. Also notifies the appropriate model listeners.
	 *
	 * @param ddmDataProvider the d d m data provider
	 * @return the d d m data provider that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DDMDataProvider addDDMDataProvider(DDMDataProvider ddmDataProvider) {
		ddmDataProvider.setNew(true);

		return ddmDataProviderPersistence.update(ddmDataProvider);
	}

	/**
	 * Creates a new d d m data provider with the primary key. Does not add the d d m data provider to the database.
	 *
	 * @param dataProviderId the primary key for the new d d m data provider
	 * @return the new d d m data provider
	 */
	@Override
	public DDMDataProvider createDDMDataProvider(long dataProviderId) {
		return ddmDataProviderPersistence.create(dataProviderId);
	}

	/**
	 * Deletes the d d m data provider with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dataProviderId the primary key of the d d m data provider
	 * @return the d d m data provider that was removed
	 * @throws PortalException if a d d m data provider with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DDMDataProvider deleteDDMDataProvider(long dataProviderId)
		throws PortalException {
		return ddmDataProviderPersistence.remove(dataProviderId);
	}

	/**
	 * Deletes the d d m data provider from the database. Also notifies the appropriate model listeners.
	 *
	 * @param ddmDataProvider the d d m data provider
	 * @return the d d m data provider that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DDMDataProvider deleteDDMDataProvider(
		DDMDataProvider ddmDataProvider) {
		return ddmDataProviderPersistence.remove(ddmDataProvider);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DDMDataProvider.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return ddmDataProviderPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.dynamic.data.mapping.model.impl.DDMDataProviderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return ddmDataProviderPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.dynamic.data.mapping.model.impl.DDMDataProviderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return ddmDataProviderPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return ddmDataProviderPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return ddmDataProviderPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DDMDataProvider fetchDDMDataProvider(long dataProviderId) {
		return ddmDataProviderPersistence.fetchByPrimaryKey(dataProviderId);
	}

	/**
	 * Returns the d d m data provider matching the UUID and group.
	 *
	 * @param uuid the d d m data provider's UUID
	 * @param groupId the primary key of the group
	 * @return the matching d d m data provider, or <code>null</code> if a matching d d m data provider could not be found
	 */
	@Override
	public DDMDataProvider fetchDDMDataProviderByUuidAndGroupId(String uuid,
		long groupId) {
		return ddmDataProviderPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the d d m data provider with the primary key.
	 *
	 * @param dataProviderId the primary key of the d d m data provider
	 * @return the d d m data provider
	 * @throws PortalException if a d d m data provider with the primary key could not be found
	 */
	@Override
	public DDMDataProvider getDDMDataProvider(long dataProviderId)
		throws PortalException {
		return ddmDataProviderPersistence.findByPrimaryKey(dataProviderId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.liferay.dynamic.data.mapping.service.DDMDataProviderLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(DDMDataProvider.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName("dataProviderId");

		return actionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.liferay.dynamic.data.mapping.service.DDMDataProviderLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(DDMDataProvider.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName("dataProviderId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<DDMDataProvider>() {
				@Override
				public void performAction(DDMDataProvider ddmDataProvider)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						ddmDataProvider);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(DDMDataProvider.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return ddmDataProviderLocalService.deleteDDMDataProvider((DDMDataProvider)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return ddmDataProviderPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the d d m data providers matching the UUID and company.
	 *
	 * @param uuid the UUID of the d d m data providers
	 * @param companyId the primary key of the company
	 * @return the matching d d m data providers, or an empty list if no matches were found
	 */
	@Override
	public List<DDMDataProvider> getDDMDataProvidersByUuidAndCompanyId(
		String uuid, long companyId) {
		return ddmDataProviderPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of d d m data providers matching the UUID and company.
	 *
	 * @param uuid the UUID of the d d m data providers
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of d d m data providers
	 * @param end the upper bound of the range of d d m data providers (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching d d m data providers, or an empty list if no matches were found
	 */
	@Override
	public List<DDMDataProvider> getDDMDataProvidersByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<DDMDataProvider> orderByComparator) {
		return ddmDataProviderPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the d d m data provider matching the UUID and group.
	 *
	 * @param uuid the d d m data provider's UUID
	 * @param groupId the primary key of the group
	 * @return the matching d d m data provider
	 * @throws PortalException if a matching d d m data provider could not be found
	 */
	@Override
	public DDMDataProvider getDDMDataProviderByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return ddmDataProviderPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the d d m data providers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.dynamic.data.mapping.model.impl.DDMDataProviderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of d d m data providers
	 * @param end the upper bound of the range of d d m data providers (not inclusive)
	 * @return the range of d d m data providers
	 */
	@Override
	public List<DDMDataProvider> getDDMDataProviders(int start, int end) {
		return ddmDataProviderPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of d d m data providers.
	 *
	 * @return the number of d d m data providers
	 */
	@Override
	public int getDDMDataProvidersCount() {
		return ddmDataProviderPersistence.countAll();
	}

	/**
	 * Updates the d d m data provider in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param ddmDataProvider the d d m data provider
	 * @return the d d m data provider that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DDMDataProvider updateDDMDataProvider(
		DDMDataProvider ddmDataProvider) {
		return ddmDataProviderPersistence.update(ddmDataProvider);
	}

	/**
	 * Returns the d d m data provider local service.
	 *
	 * @return the d d m data provider local service
	 */
	public DDMDataProviderLocalService getDDMDataProviderLocalService() {
		return ddmDataProviderLocalService;
	}

	/**
	 * Sets the d d m data provider local service.
	 *
	 * @param ddmDataProviderLocalService the d d m data provider local service
	 */
	public void setDDMDataProviderLocalService(
		DDMDataProviderLocalService ddmDataProviderLocalService) {
		this.ddmDataProviderLocalService = ddmDataProviderLocalService;
	}

	/**
	 * Returns the d d m data provider persistence.
	 *
	 * @return the d d m data provider persistence
	 */
	public DDMDataProviderPersistence getDDMDataProviderPersistence() {
		return ddmDataProviderPersistence;
	}

	/**
	 * Sets the d d m data provider persistence.
	 *
	 * @param ddmDataProviderPersistence the d d m data provider persistence
	 */
	public void setDDMDataProviderPersistence(
		DDMDataProviderPersistence ddmDataProviderPersistence) {
		this.ddmDataProviderPersistence = ddmDataProviderPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the group local service.
	 *
	 * @return the group local service
	 */
	public com.liferay.portal.service.GroupLocalService getGroupLocalService() {
		return groupLocalService;
	}

	/**
	 * Sets the group local service.
	 *
	 * @param groupLocalService the group local service
	 */
	public void setGroupLocalService(
		com.liferay.portal.service.GroupLocalService groupLocalService) {
		this.groupLocalService = groupLocalService;
	}

	/**
	 * Returns the group remote service.
	 *
	 * @return the group remote service
	 */
	public com.liferay.portal.service.GroupService getGroupService() {
		return groupService;
	}

	/**
	 * Sets the group remote service.
	 *
	 * @param groupService the group remote service
	 */
	public void setGroupService(
		com.liferay.portal.service.GroupService groupService) {
		this.groupService = groupService;
	}

	/**
	 * Returns the group persistence.
	 *
	 * @return the group persistence
	 */
	public GroupPersistence getGroupPersistence() {
		return groupPersistence;
	}

	/**
	 * Sets the group persistence.
	 *
	 * @param groupPersistence the group persistence
	 */
	public void setGroupPersistence(GroupPersistence groupPersistence) {
		this.groupPersistence = groupPersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.dynamic.data.mapping.model.DDMDataProvider",
			ddmDataProviderLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.dynamic.data.mapping.model.DDMDataProvider");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DDMDataProviderLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return DDMDataProvider.class;
	}

	protected String getModelClassName() {
		return DDMDataProvider.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = ddmDataProviderPersistence.getDataSource();

			DB db = DBFactoryUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.dynamic.data.mapping.service.DDMDataProviderLocalService.class)
	protected DDMDataProviderLocalService ddmDataProviderLocalService;
	@BeanReference(type = DDMDataProviderPersistence.class)
	protected DDMDataProviderPersistence ddmDataProviderPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.GroupLocalService.class)
	protected com.liferay.portal.service.GroupLocalService groupLocalService;
	@BeanReference(type = com.liferay.portal.service.GroupService.class)
	protected com.liferay.portal.service.GroupService groupService;
	@BeanReference(type = GroupPersistence.class)
	protected GroupPersistence groupPersistence;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}