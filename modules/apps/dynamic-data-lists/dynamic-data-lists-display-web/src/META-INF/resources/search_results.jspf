<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
DisplayTerms displayTerms = searchContainer.getDisplayTerms();

if (Validator.isNull(displayTerms.getKeywords())) {
	total = DDLRecordLocalServiceUtil.getRecordsCount(ddlDisplayContext.getRecordSetId(), WorkflowConstants.STATUS_APPROVED);

	searchContainer.setTotal(total);

	results = DDLRecordLocalServiceUtil.getRecords(recordSet.getRecordSetId(), WorkflowConstants.STATUS_APPROVED, searchContainer.getStart(), searchContainer.getEnd(), searchContainer.getOrderByComparator());
}
else {
	SearchContext searchContext = SearchContextFactory.getInstance(request);

	searchContext.setAttribute("recordSetId", ddlDisplayContext.getRecordSetId());
	searchContext.setAttribute(Field.STATUS, WorkflowConstants.STATUS_APPROVED);
	searchContext.setEnd(searchContainer.getEnd());
	searchContext.setKeywords(displayTerms.getKeywords());
	searchContext.setStart(searchContainer.getStart());

	BaseModelSearchResult<DDLRecord> baseModelSearchResult = DDLRecordLocalServiceUtil.searchDDLRecords(searchContext);

	results = baseModelSearchResult.getBaseModels();

	total = baseModelSearchResult.getLength();

	searchContainer.setTotal(total);
}

searchContainer.setResults(results);
%>