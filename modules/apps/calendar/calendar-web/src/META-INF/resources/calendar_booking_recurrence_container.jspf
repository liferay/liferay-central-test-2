<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
int count = 0;
String exceptionDatesString = StringPool.BLANK;
Frequency frequency = null;
int interval = 0;
PositionalWeekday positionalWeekday = new PositionalWeekday(Weekday.getWeekday(startTimeJCalendar), JCalendarUtil.getWeekdayPosition(startTimeJCalendar));
java.util.Calendar untilJCalendar = startTimeJCalendar;
List<Weekday> weekdays = new ArrayList<Weekday>();

boolean afterChecked = false;
boolean onChecked = false;

if (recurrence != null) {
	count = recurrence.getCount();
	frequency = recurrence.getFrequency();
	interval = recurrence.getInterval();

	if (recurrence.getUntilJCalendar() != null) {
		untilJCalendar = recurrence.getUntilJCalendar();
	}

	for (PositionalWeekday curPositionalWeekday : recurrence.getPositionalWeekdays()) {
		weekdays.add(curPositionalWeekday.getWeekday());

		positionalWeekday = curPositionalWeekday;
	}

	if (count > 0) {
		afterChecked = true;
	}

	if (recurrence.getUntilJCalendar() != null) {
		onChecked = true;
	}

	StringBundler sb = new StringBundler();

	List<java.util.Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars();

	Iterator<java.util.Calendar> iterator = exceptionJCalendars.iterator();

	while (iterator.hasNext()) {
		java.util.Calendar exceptionJCalendar = iterator.next();

		sb.append(exceptionJCalendar.getTimeInMillis());

		if (iterator.hasNext()) {
			sb.append(StringPool.COMMA);
		}
	}

	exceptionDatesString = sb.toString();
}
%>

<div class="calendar-portlet-recurrence-container hide" id="<portlet:namespace />recurrenceContainer">
	<table>
		<aui:input name="exceptionDates" type="hidden" value="<%= exceptionDatesString %>" />

		<tbody>
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeats" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<aui:select label="" name="frequency">

						<%
						for (Frequency curFrequency : Frequency.values()) {
						%>

							<aui:option selected="<%= (frequency == curFrequency) %>" value="<%= curFrequency.getValue() %>"><%= LanguageUtil.get(request, StringUtil.toLowerCase(curFrequency.getValue())) %></aui:option>

						<%
						}
						%>

					</aui:select>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view" id="<portlet:namespace />intervalContainer">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeat-every" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<aui:select label="" name="interval">

						<%
						for (int i = 1; i <= 30; i++) {
						%>

							<aui:option selected="<%= (interval == i) %>" value="<%= i %>"><%= i %></aui:option>

						<%
						}
						%>

					</aui:select>

					<span id="<portlet:namespace />intervalLabel"></span>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view <%= (frequency == Frequency.WEEKLY) ? "" : "hide" %>" id="<portlet:namespace />view<%= Frequency.WEEKLY %>">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeat-on" />:
				</th>
				<td class="calendar-portlet-recurrence-content calendar-recurrence-weekday-checkbox">

					<%
					Weekday[] weekdaysArray = Weekday.values();

					Collections.rotate(Arrays.asList(weekdaysArray), -weekStartsOn);
					%>

					<aui:field-wrapper inlineField="<%= true %>" label="">

						<%
						for (Weekday weekday : weekdaysArray) {
						%>

							<aui:input checked="<%= weekdays.contains(weekday) %>" data-weekday='<%= LanguageUtil.get(request, "weekday." + weekday.getValue()) %>' label="<%= weekday.getValue() %>" name="<%= weekday.getValue() %>" type="checkbox" />

						<%
						}
						%>

					</aui:field-wrapper>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view <%= ((frequency == Frequency.MONTHLY) || (frequency == Frequency.YEARLY)) ? "" : "hide" %>" id="<portlet:namespace />viewPositionInMonth">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeat-on" />:
				</th>
				<td class="calendar-portlet-recurrence-content calendar-recurrence-month-radio">
					<aui:input checked="<%= ListUtil.isEmpty(weekdays) %>" inlineField="<%= true %>" label="day-of-the-month" name="repeatOnWeekday" type="radio" value="false" />

					<aui:input checked="<%= ListUtil.isNotEmpty(weekdays) %>" inlineField="<%= true %>" label="day-of-the-week" name="repeatOnWeekday" type="radio" value="true" />

					<div class='<%= ListUtil.isEmpty(weekdays) ? "hide" : StringPool.BLANK %>' id="<portlet:namespace />viewPositionalWeekday">
						<aui:select inlineField="<%= true %>" label="" name="position">
							<aui:option label="position.first" selected="<%= positionalWeekday.getPosition() == 1 %>" value="1" />
							<aui:option label="position.second" selected="<%= positionalWeekday.getPosition() == 2 %>" value="2" />
							<aui:option label="position.third" selected="<%= positionalWeekday.getPosition() == 3 %>" value="3" />
							<aui:option label="position.fourth" selected="<%= positionalWeekday.getPosition() == 4 %>" value="4" />
							<aui:option label="position.last" selected="<%= positionalWeekday.getPosition() == -1 %>" value="-1" />
						</aui:select>

						<aui:select inlineField="<%= true %>" label="" name="weekday">

							<%
							for (Weekday weekday : weekdaysArray) {
							%>

								<aui:option label='<%= "weekday." + weekday.getValue() %>' selected="<%= weekday == positionalWeekday.getWeekday() %>" value="<%= weekday.getValue() %>" />

							<%
							}
							%>

						</aui:select>
					</div>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="ends" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit" label="">
						<aui:input checked="<%= !afterChecked && !onChecked %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="never" />

						<label><liferay-ui:message key="never" /></label>
					</aui:field-wrapper>

					<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit" label="">
						<aui:input checked="<%= afterChecked %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="after" />

						<label><liferay-ui:message key="after" /></label>

						<aui:input disabled="<%= !afterChecked %>" label="<%= StringPool.BLANK %>"  name="count" size="5" type="text" value="<%= afterChecked ? count : StringPool.BLANK %>" />

						<label><liferay-ui:message key="occurrences" /></label>
					</aui:field-wrapper>

					<aui:field-wrapper cssClass="calendar-portlet-field-date calendar-portlet-recurrence-limit" label="">
						<aui:input checked="<%= onChecked %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="on" />

						<div class="calendar-portlet-field-datepicker clearfix">
							<label><liferay-ui:message key="on" /></label>

							<liferay-ui:input-date
								dayParam="untilDateDay"
								dayValue="<%= untilJCalendar.get(java.util.Calendar.DATE) %>"
								disabled="<%= !onChecked %>"
								monthParam="untilDateMonth"
								monthValue="<%= untilJCalendar.get(java.util.Calendar.MONTH) %>"
								name="untilDate"
								yearParam="untilDateYear"
								yearValue="<%= untilJCalendar.get(java.util.Calendar.YEAR) %>"
							/>
						</div>
					</aui:field-wrapper>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="summary" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<span class="calendar-portlet-recurrence-summary" id="<portlet:namespace />summaryPreview">
						<liferay-ui:message key="none" />
					</span>
				</td>
			</tr>
		</tbody>
	</table>
</div>

<aui:script use="liferay-util-window">
	var countNode = A.one('#<portlet:namespace />count');
	var endsRadioNodes = A.all('[name=<portlet:namespace />ends]');
	var frequencyNode = A.one('#<portlet:namespace />frequency');
	var positionInMonthNode = A.one('#<portlet:namespace />viewPositionInMonth');
	var recurrenceContainerNode = A.one('#<portlet:namespace />recurrenceContainer');
	var repeatCheckboxNode = A.one('#<portlet:namespace />repeat');
	var summaryNode = A.one('#<portlet:namespace />summary');

	var untilDateDatePicker = Liferay.component('<%= renderResponse.getNamespace() + HtmlUtil.getAUICompatibleId("untilDateDatePicker") %>');

	var getRecurrenceDialogTitle = function() {
		var summary = window.<portlet:namespace />getSummary();

		return '<liferay-ui:message key="repeat" /> ' + (summary[0].toLowerCase() + summary.slice(1));
	};

	window.<portlet:namespace />openRecurrenceDialog = function(visible) {
		recurrenceContainerNode.toggle(visible);

		window.<portlet:namespace />recurrenceDialog = Liferay.Util.Window.getWindow(
			{
				dialog: {
					after: {
						visibleChange: function(event) {
							recurrenceContainerNode.toggle(event.newVal);

							window.<portlet:namespace />updateSummaries();
						}
					},
					bodyContent: recurrenceContainerNode,
					centered: true,
					height: 600,
					id: '<portlet:namespace />recurrenceDialog',
					modal: true,
					render: '#<portlet:namespace />fm',
					toolbars: {
						footer: [
							{
								label: '<liferay-ui:message key="done" />',
								on: {
									click: function() {
										window.<portlet:namespace />recurrenceDialog.hide();
									}
								}
							}
						]
					},
					visible: visible,
					width: 600
				},
				title: getRecurrenceDialogTitle()
			}
		);
	};

	var onInputChange = function(event) {
		var target = event.target;

		var value = target.val();

		if (target.test('#<portlet:namespace />frequency')) {
			window.<portlet:namespace />toggleView('<%= Frequency.WEEKLY %>', value == '<%= Frequency.WEEKLY %>');
			window.<portlet:namespace />toggleView('PositionInMonth', value === '<%= Frequency.MONTHLY %>' || value === '<%= Frequency.YEARLY %>');
		}

		if (target.get('name') == '<portlet:namespace />repeatOnWeekday') {
			window.<portlet:namespace />toggleView('PositionalWeekday', value === 'true');
		}

		var endValue = endsRadioNodes.filter(':checked').val()[0];

		if ((endValue == 'never') || (endValue == 'on')) {
			countNode.set('disabled', true);
		}
		else {
			countNode.set('disabled', false);
		}

		countNode.selectText();

		if ((endValue == 'never') || (endValue == 'after')) {
			untilDateDatePicker.set('disabled', true);
		}
		else {
			untilDateDatePicker.set('disabled', false);
		}

		window.<portlet:namespace />updateSummaries();
	};

	recurrenceContainerNode.delegate('change', onInputChange, 'select,input');
	recurrenceContainerNode.delegate('keypress', onInputChange, 'select');

	repeatCheckboxNode.on(
		'change',
		function(event) {
			var checked = event.currentTarget.get('checked');

			if (!checked) {
				summaryNode.empty();
			}

			<portlet:namespace />openRecurrenceDialog(checked);
		}
	);

	summaryNode.on(
		'click',
		function(event) {
			<portlet:namespace />openRecurrenceDialog(true);

			event.halt();
		}
	);

	untilDateDatePicker.after(
		'selectionChange',
		function(event) {
			window.<portlet:namespace />updateSummaries();
		}
	);

	Liferay.RecurrenceUtil.INTERVAL_UNITS = {
		DAILY: 'days',
		MONTHLY: 'months',
		WEEKLY: 'weeks',
		YEARLY: 'years'
	};

	Liferay.RecurrenceUtil.MONTH_LABELS = [
		'<liferay-ui:message key="january" />',
		'<liferay-ui:message key="february" />',
		'<liferay-ui:message key="march" />',
		'<liferay-ui:message key="april" />',
		'<liferay-ui:message key="may" />',
		'<liferay-ui:message key="june" />',
		'<liferay-ui:message key="july" />',
		'<liferay-ui:message key="august" />',
		'<liferay-ui:message key="september" />',
		'<liferay-ui:message key="october" />',
		'<liferay-ui:message key="november" />',
		'<liferay-ui:message key="december" />'
	];

	Liferay.RecurrenceUtil.POSITION_LABELS = {
		'-1': '<liferay-ui:message key="position.last" />',
		'1': '<liferay-ui:message key="position.first" />',
		'2': '<liferay-ui:message key="position.second" />',
		'3': '<liferay-ui:message key="position.third" />',
		'4': '<liferay-ui:message key="position.fourth" />'
	};

	Liferay.RecurrenceUtil.RECURRENCE_SUMMARIES = {
		'daily': '<liferay-ui:message key="daily" />',
		'daily-until-x-x-x': '<liferay-ui:message key="daily-until-x-x-x" />',
		'daily-x-times': '<liferay-ui:message key="daily-x-times" />',
		'every-mon-wed-fri': '<liferay-ui:message key="every-mon-wed-fri" />',
		'every-tues-thurs': '<liferay-ui:message key="every-tues-thurs" />',
		'every-x-days': '<liferay-ui:message key="every-x-days" />',
		'every-x-days-until-x-x-x': '<liferay-ui:message key="every-x-days-until-x-x-x" />',
		'every-x-days-x-times': '<liferay-ui:message key="every-x-days-x-times" />',
		'every-x-months': '<liferay-ui:message key="every-x-months" />',
		'every-x-months-on-x-x': '<liferay-ui:message key="every-x-months-on-x-x" />',
		'every-x-months-on-x-x-until-x-x-x': '<liferay-ui:message key="every-x-months-on-x-x-until-x-x-x" />',
		'every-x-months-on-x-x-x-times': '<liferay-ui:message key="every-x-months-on-x-x-x-times" />',
		'every-x-months-until-x-x-x': '<liferay-ui:message key="every-x-months-until-x-x-x" />',
		'every-x-months-x-times': '<liferay-ui:message key="every-x-months-x-times" />',
		'every-x-weeks': '<liferay-ui:message key="every-x-weeks" />',
		'every-x-weeks-on-x': '<liferay-ui:message key="every-x-weeks-on-x" />',
		'every-x-weeks-on-x-until-x-x-x': '<liferay-ui:message key="every-x-weeks-on-x-until-x-x-x" />',
		'every-x-weeks-on-x-x-times': '<liferay-ui:message key="every-x-weeks-on-x-x-times" />',
		'every-x-weeks-until-x-x-x': '<liferay-ui:message key="every-x-weeks-until-x-x-x" />',
		'every-x-weeks-x-times': '<liferay-ui:message key="every-x-weeks-x-times" />',
		'every-x-years': '<liferay-ui:message key="every-x-years" />',
		'every-x-years-on-x-x-of-x': '<liferay-ui:message key="every-x-years-on-x-x-of-x" />',
		'every-x-years-on-x-x-of-x-until-x-x-x': '<liferay-ui:message key="every-x-years-on-x-x-of-x-until-x-x-x" />',
		'every-x-years-on-x-x-of-x-x-times': '<liferay-ui:message key="every-x-years-on-x-x-of-x-x-times" />',
		'every-x-years-until-x-x-x': '<liferay-ui:message key="every-x-years-until-x-x-x" />',
		'every-x-years-x-times': '<liferay-ui:message key="every-x-years-x-times" />',
		'monthly': '<liferay-ui:message key="monthly" />',
		'monthly-on-x-x': '<liferay-ui:message key="monthly-on-x-x" />',
		'monthly-on-x-x-until-x-x-x': '<liferay-ui:message key="monthly-on-x-x-until-x-x-x" />',
		'monthly-on-x-x-x-times': '<liferay-ui:message key="monthly-on-x-x-x-times" />',
		'monthly-until-x-x-x': '<liferay-ui:message key="monthly-until-x-x-x" />',
		'monthly-x-times': '<liferay-ui:message key="monthly-x-times" />',
		'position.first': '<liferay-ui:message key="position.first" />',
		'position.fourth': '<liferay-ui:message key="position.fourth" />',
		'position.last': '<liferay-ui:message key="position.last" />',
		'position.second': '<liferay-ui:message key="position.second" />',
		'position.third': '<liferay-ui:message key="position.third" />',
		'weekly': '<liferay-ui:message key="weekly" />',
		'weekly-on-x': '<liferay-ui:message key="weekly-on-x" />',
		'weekly-on-x-until-x-x-x': '<liferay-ui:message key="weekly-on-x-until-x-x-x" />',
		'weekly-on-x-x-times': '<liferay-ui:message key="weekly-on-x-x-times" />',
		'weekly-until-x-x-x': '<liferay-ui:message key="weekly-until-x-x-x" />',
		'weekly-x-times': '<liferay-ui:message key="weekly-x-times" />',
		'yearly': '<liferay-ui:message key="yearly" />',
		'yearly-on-x-x-of-x': '<liferay-ui:message key="yearly-on-x-x-of-x" />',
		'yearly-on-x-x-of-x-until-x-x-x': '<liferay-ui:message key="yearly-on-x-x-of-x-until-x-x-x" />',
		'yearly-on-x-x-of-x-x-times': '<liferay-ui:message key="yearly-on-x-x-of-x-x-times" />',
		'yearly-until-x-x-x': '<liferay-ui:message key="yearly-until-x-x-x" />',
		'yearly-x-times': '<liferay-ui:message key="yearly-x-times" />',
		'you-are-about-to-make-changes-that-will-only-effect-your-calendar-x': '<liferay-ui:message key="you-are-about-to-make-changes-that-will-only-effect-your-calendar-x" />'
	};

	Liferay.RecurrenceUtil.WEEKDAY_LABELS = {
		FR: '<liferay-ui:message key="weekday.FR" />',
		MO: '<liferay-ui:message key="weekday.MO" />',
		SA: '<liferay-ui:message key="weekday.SA" />',
		SU: '<liferay-ui:message key="weekday.SU" />',
		TH: '<liferay-ui:message key="weekday.TH" />',
		TU: '<liferay-ui:message key="weekday.TU" />',
		WE: '<liferay-ui:message key="weekday.WE" />'
	};

	window.<portlet:namespace />getSummary = function() {
		var frequency = frequencyNode.val();
		var intervalNode = A.one('#<portlet:namespace />interval');
		var weekdays = A.all('#<portlet:namespace />view<%= Frequency.WEEKLY %> input:checked');

		var selectedWeekdays = [];

		if (weekdays.size()) {
			selectedWeekdays = weekdays.getAttribute('data-weekday');
		}

		var positionalWeekday = null;

		if ((frequency == '<%= Frequency.MONTHLY %>') || (frequency == '<%= Frequency.YEARLY %>')) {
			if (positionInMonthNode.one('input:checked').val() == 'true') {
				positionalWeekday = {
					month: parseInt(A.one('#<portlet:namespace />startTimeMonth').val(), 10),
					position: A.one('#<portlet:namespace />position').val(),
					weekday: A.one('#<portlet:namespace />weekday').val()
				};
			}
		}

		var endValue = endsRadioNodes.filter(':checked').val()[0];

		var recurrence = {
			count: countNode.val(),
			endValue: endValue,
			frequency: frequency,
			interval: intervalNode.val(),
			positionalWeekday: positionalWeekday,
			untilDate: untilDateDatePicker.getDate(),
			weekdays: selectedWeekdays
		};

		return Liferay.RecurrenceUtil.getSummary(recurrence);
	};

	window.<portlet:namespace />toggleView = function(viewName, show) {
		var viewNode = A.one('#<portlet:namespace />view' + viewName);

		if (viewNode) {
			viewNode.toggle(show);
		}
	};

	window.<portlet:namespace />updateSummary = function(element) {
		var previewNode = A.one(element);

		if (previewNode) {
			previewNode.html(window.<portlet:namespace />getSummary());
		}
	};

	window.<portlet:namespace />updateSummaries = function() {
		window.<portlet:namespace />updateSummary(summaryNode);
		window.<portlet:namespace />updateSummary('#<portlet:namespace />summaryPreview');

		if (window.<portlet:namespace />recurrenceDialog) {
			window.<portlet:namespace />recurrenceDialog.titleNode.html(getRecurrenceDialogTitle());

			window.<portlet:namespace />recurrenceDialog.fillHeight(window.<portlet:namespace />recurrenceDialog.bodyNode);
		}
	};

	<c:if test="<%= recurring %>">
		window.<portlet:namespace />updateSummaries();
	</c:if>
</aui:script>