import com.liferay.gradle.util.FileUtil

buildscript {
	apply from: rootProject.file("build-buildscript.gradle"), to: buildscript
}

buildDir = new File(rootDir.parentFile, "build")

gradle.beforeProject {
	Project project ->

	if (!project.parent) {
		return
	}

	configure(project) {
		if (project.path.startsWith(":apps:foundation:frontend-theme:") && FileUtil.exists(project, "gulpfile.js")) {
			apply from: rootProject.file("build-theme.gradle")
		}
		else if (FileUtil.exists(project, "bnd.bnd") && FileUtil.exists(project, "build.gradle")) {
			apply from: rootProject.file("build-module.gradle")
			apply plugin: "pmd"

			configurations {
				xmltask
			}

			dependencies {
				pmd group: "com.liferay", name: "com.liferay.pmd", version: "1.0.1"
				xmltask rootProject.files("../lib/development/xmltask.jar")
			}

			pmd {
				ruleSetFiles = rootProject.files("../tools/sdk/dependencies/net.sourceforge.pmd/rulesets/java/standard-rules.xml")
				ruleSets = []
			}

			testIntegration {
				doLast {
					String databaseType = System.properties["database.type"]

					if (!databaseType) {
						return
					}

					FileTree fileTree = fileTree(dir: reports.junitXml.destination, exclude: "TEST-*-*.xml", include: "TEST-*.xml")

					ant.taskdef classname: "com.oopsconsultancy.xmltask.ant.XmlTask", classpath: configurations.xmltask.asPath, name: "xmltask"

					fileTree.each {
						File file ->

						String fileTitle = FileUtil.stripExtension(file.name)

						ant.xmltask(dest: new File(file.parentFile, "${fileTitle}-${databaseType}.xml"), source: file) {
							replace path: "/testsuite/@name", withText: "${fileTitle}-${databaseType}"
						}

						delete file
					}
				}
			}

			tasks.withType(Pmd) {
				classpath = null
			}

			if (gradle.hasProperty("testClassGroupIndex")) {
				configure([test, testIntegration]) {
					include gradle.testClasses

					jvmArgs "-Dtest.class.group.index=" + gradle.testClassGroupIndex
					jvmArgs "-Dtest.class.groups=" + gradle.testClassGroups
				}
			}

			if (System.getenv("JENKINS_HOME")) {
				buildCSS {
					jvmArgs "-Xss4m"
				}

				startTestableTomcat {
					deleteLiferayHome = false
				}
			}
		}

		if (System.getenv("JENKINS_HOME")) {
			pluginManager.withPlugin("com.liferay.node") {
				downloadNode {
					doFirst {
						throw new GradleException("Unable to use Node.js on CI, please configure com.liferay.cache or update the cache")
					}
				}
			}
		}
	}
}

gradle.taskGraph.useFilter {
	Task task ->

	if (task.name == "compileJSP") {
		FileTree jspFileTree = fileTree(dir: task.project.projectDir, excludes: ["**/custom_jsps/**/*", "**/dependencies/**/*"], includes: ["docroot/**/*.jsp", "src/main/resources/META-INF/resources/**/*.jsp"])

		if (jspFileTree.empty) {
			return false
		}
	}
	else if (task.name == "test") {
		if (!_hasTestClasses(task.project, "src/test/java")) {
			return false
		}
	}
	else if (task.name == "testIntegration") {
		if (!_hasTestClasses(task.project, "src/testIntegration/java")) {
			return false
		}
	}

	return true
}

private boolean _hasTestClasses(Project project, String testClassesDirName) {
	File testClassesDir = project.file(testClassesDirName)

	if (!testClassesDir.exists()) {
		return false
	}

	if (project.gradle.hasProperty("testClassGroupIndex")) {
		List<String> testJavaClasses = project.gradle.testClasses.collect {
			it.replace ".class", ".java"
		}

		FileTree testJavaClassesFileTree = project.fileTree(dir: testClassesDir, includes: testJavaClasses)

		if (testJavaClassesFileTree.empty) {
			return false
		}
	}

	return true
}