import com.liferay.gradle.util.copy.RenameDependencyClosure

import org.dm.gradle.plugins.bundle.JarBuilder

task copySystemPackagesExtraLibs(type: Copy)
task copySystemPackagesExtraManifest(type: Copy)

String buildProfile = System.properties["build.profile"]

File systemPackagesExtraManifestFile = file("system.packages.extra.mf")

if (!System.getenv("JENKINS_HOME") || !systemPackagesExtraManifestFile.exists()) {
	systemPackagesExtraManifestFile = new File(buildDir, "system.packages.extra.mf")

	task buildSystemPackagesExtraManifest

	buildSystemPackagesExtraManifest {
		dependsOn classes
		dependsOn copySystemPackagesExtraLibs

		doLast {
			Clock clock = new Clock()

			JarBuilder jarBuilder = bundle.jarBuilderFactory.create()

			jarBuilder.withBase projectDir

			Map<String, String> properties = liferayOSGi.bundleDefaultInstructions

			properties["-check"] = "imports"
			properties["-fixupmessages"] = '"Classpath is empty. Private-Package ...";is:=ignore'
			properties["-include"] = "system.packages.extra.bnd"

			jarBuilder.withClasspath new File[0]
			jarBuilder.withFailOnError true
			jarBuilder.withName "system.packages.extra"
			jarBuilder.withProperties properties
			jarBuilder.withResources new File[0]

			jarBuilder.withSourcepath sourceSets.main.allSource.srcDirs.findAll {
				it.directory
			}

			jarBuilder.withTrace false
			jarBuilder.withVersion project.version

			systemPackagesExtraManifestFile.parentFile.mkdirs()

			systemPackagesExtraManifestFile.withOutputStream {
				jarBuilder.writeManifestTo it
			}

			logger.lifecycle "Building the system.packages.extra.mf file took {}.", clock.time
		}
	}

	jar {
		dependsOn buildSystemPackagesExtraManifest
	}
}
else {
	logger.lifecycle "Reusing file {}.", systemPackagesExtraManifestFile.absolutePath
}

bundle {
	instruction "system.packages.extra.manifest.file", relativePath(systemPackagesExtraManifestFile)
}

copySystemPackagesExtraLibs {
	from configurations.provided
	into "lib"
	rename new RenameDependencyClosure(project, configurations.provided.name)
}

dependencies {
	provided group: "biz.aQute.bnd", name: "biz.aQute.bndlib", version: "3.1.0"
	provided group: "com.liferay", name: "com.liferay.osgi.felix.util", version: "1.0.0"
	provided group: "com.liferay", name: "com.liferay.osgi.service.tracker.collections", version: "2.0.0"
	provided group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "default"
	provided group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "default"
	provided group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	provided group: "org.osgi", name: "org.osgi.core", version: "6.0.0"
	provided group: "org.springframework", name: "spring-beans", version: "4.1.9.RELEASE"
	provided group: "org.springframework", name: "spring-context", version: "4.1.9.RELEASE"
	provided group: "org.springframework", name: "spring-core", version: "4.1.9.RELEASE"
	provided project(":core:jaxws-osgi-bridge")
	provided project(":core:portal-app-license-api")
	provided project(":core:registry-api")
	provided project(":core:registry-impl")
}

if (buildProfile != "slim") {
	dependencies {
	}
}

liferay {
	deployDir = file("${liferayHome}/osgi/core")
}