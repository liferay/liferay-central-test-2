package com.liferay.tools.jsc.libsass;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/math.h:192</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class __exception extends Structure<__exception, __exception.ByValue, __exception.ByReference > {
	public int type;
	/// C type : char*
	public Pointer name;
	public double arg1;
	public double arg2;
	public double retval;
	public __exception() {
		super();
	}
	@SuppressWarnings("rawtypes")
	@Override
	protected List getFieldOrder() {
		return Arrays.asList(new String[]{"type", "name", "arg1", "arg2", "retval"});
	}
	/// @param name C type : char*
	public __exception(int type, Pointer name, double arg1, double arg2, double retval) {
		super();
		this.type = type;
		this.name = name;
		this.arg1 = arg1;
		this.arg2 = arg2;
		this.retval = retval;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected __exception newInstance() { return new __exception(); }
	public static __exception[] newArray(int arrayLength) {
		return Structure.newArray(__exception.class, arrayLength);
	}
	public static class ByReference extends __exception implements Structure.ByReference {

	};
	public static class ByValue extends __exception implements Structure.ByValue {

	};
}
