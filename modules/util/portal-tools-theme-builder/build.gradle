apply plugin: "com.liferay.maven.plugin.builder"

task writeParentThemeDependencies
task writeTestThemeDependencies

buildPluginDescriptor {
	ext {
		autoClean = false
	}

	finalizedBy formatSource
	finalizedBy formatXML

	goalPrefix = "liferay"
}

configurations {
	parentThemes
	testThemes
}

dependencies {
	parentThemes project(":apps:foundation:frontend-theme:frontend-theme-styled")
	parentThemes project(":apps:foundation:frontend-theme:frontend-theme-unstyled")

	provided group: "commons-cli", name: "commons-cli", transitive: false, version: "1.3.1"
	provided group: "net.coobird", name: "thumbnailator", transitive: false, version: "0.4.8"
	provided group: "org.apache.ant", name: "ant", transitive: false, version: "1.9.4"
	provided group: "org.apache.maven", name: "maven-plugin-api", transitive: false, version: "3.0.4"

	testCompile group: "com.googlecode.json-simple", name: "json-simple", version: "1.1"

	testThemes project(":apps:foundation:frontend-theme:frontend-theme-user-dashboard")
	testThemes project(":apps:foundation:frontend-theme:frontend-theme-user-profile")
	testThemes project(":apps:frontend-theme-fjord:frontend-theme-fjord")
	testThemes project(":apps:frontend-theme-westeros-bank:frontend-theme-westeros-bank")
}

formatSource {
	mustRunAfter formatXML
}

liferay {
	deployDir = "../../../tools/sdk/dependencies/com.liferay.portal.tools.theme.builder/lib"
}

test {
	dependsOn writeParentThemeDependencies
	dependsOn writeTestThemeDependencies
}

writeParentThemeDependencies {
	configurations.parentThemes.dependencies.withType(ProjectDependency) {
		dependsOn "${dependencyProject.path}:jar"
	}

	doLast {
		File parentThemeDependenciesFile = new File(buildDir, "parent-theme-dependencies.txt")

		parentThemeDependenciesFile.parentFile.mkdirs()

		parentThemeDependenciesFile.text = configurations.parentThemes.join(System.lineSeparator())
	}
}

writeTestThemeDependencies {
	configurations.testThemes.dependencies.withType(ProjectDependency) {
		dependsOn "${dependencyProject.path}:assemble"
	}

	doLast {
		Properties properties = new Properties()

		for (ProjectDependency projectDependency in configurations.testThemes.dependencies.withType(ProjectDependency)) {
			Project themeProject = projectDependency.dependencyProject

			properties.setProperty themeProject.projectDir.absolutePath, themeProject.configurations.archives.artifacts.files.singleFile.absolutePath
		}

		File testThemeDependenciesFile = new File(buildDir, "test-theme-dependencies.properties")

		testThemeDependenciesFile.parentFile.mkdirs()

		testThemeDependenciesFile.withOutputStream {
			properties.store it, null
		}
	}
}