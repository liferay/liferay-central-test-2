import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.ReplaceLeadingPathAction
import com.liferay.gradle.util.copy.StripPathSegmentsAction

dependencies {
	compile group: "org.osgi", name: "org.osgi.compendium", version: "5.0.0"
	compile group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
}

ext {
	alloyBootstrapVersion = "3.2.0-2"
	alloyFontAwesomeVersion = "2.0.0"
	alloyVersion = "3.0.1"
	lexiconVersion = "0.1.16"
}

liferay {
	deployDir = file("${liferayHome}/osgi/modules")
}

File themesDestinationDir = file("src/META-INF/resources");
File thirdPartyDir = file("../../../../portal-web/third-party")

task buildAlloyBootstrapTheme(type: Copy)
task buildAlloyFontAwesome(type: Copy)
task buildAlloyTheme(type: Copy)
task buildLexicon(type: Copy)
task buildTheme

buildAlloyBootstrapTheme {
	File alloyBootstrapDestinationDir = new File(themesDestinationDir, "_unstyled/css/aui")
	File bootstrapSassZipFile = new File(thirdPartyDir, "bootstrap-sass-${alloyBootstrapVersion}.zip")

	doFirst {
		delete alloyBootstrapDestinationDir
	}

	eachFile new ReplaceLeadingPathAction("bootstrap-sass-${alloyBootstrapVersion}/assets/fonts/bootstrap": "glyphicons/font", "bootstrap-sass-${alloyBootstrapVersion}/assets/stylesheets": "")
	exclude "bootstrap-sass-${alloyBootstrapVersion}/assets/stylesheets/_bootstrap-*.scss"
	from zipTree(bootstrapSassZipFile)
	includeEmptyDirs = false
	into alloyBootstrapDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, bootstrapSassZipFile, alloyBootstrapDestinationDir)
	}
}

buildAlloyFontAwesome {
	File alloyFontAwesomeDestinationDir = new File(themesDestinationDir, "_unstyled/css/aui/alloy-font-awesome")
	File alloyFontAwesomeZipFile = new File(thirdPartyDir, "alloy-font-awesome-${alloyFontAwesomeVersion}.zip")

	dependsOn buildAlloyBootstrapTheme

	doFirst {
		delete alloyFontAwesomeDestinationDir
	}

	eachFile new StripPathSegmentsAction(1)

	exclude "alloy-font-awesome/css/**"
	exclude "alloy-font-awesome/less/**"

	from zipTree(alloyFontAwesomeZipFile)
	includeEmptyDirs = false
	into alloyFontAwesomeDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, alloyFontAwesomeZipFile, alloyFontAwesomeDestinationDir)
	}
}

buildAlloyTheme {
	File alloyThemeDestinationDir = new File(themesDestinationDir, "_unstyled/images/aui")
	File alloyZipFile = new File(thirdPartyDir, "alloy-${alloyVersion}.zip")

	doFirst {
		delete alloyThemeDestinationDir
	}

	filesMatching "build/aui-*/assets/skins/sam/**", new StripPathSegmentsAction(5)
	filesMatching "build/aui-skin-deprecated/images/**", new StripPathSegmentsAction(3)

	from zipTree(alloyZipFile)

	include "build/aui-*/assets/skins/sam/**.gif", "build/aui-*/assets/skins/sam/**.jpg", "build/aui-*/assets/skins/sam/**.png"
	include "build/aui-skin-deprecated/images/**"

	includeEmptyDirs = false
	into alloyThemeDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, alloyZipFile, alloyThemeDestinationDir)
	}
}

buildCSS {
	dependsOn buildTheme
}

buildLexicon {
	File lexiconDestinationDir = new File(themesDestinationDir, "_unstyled/css/aui/lexicon")
	File lexiconZipFile = new File(thirdPartyDir, "lexicon-${lexiconVersion}.zip")

	dependsOn buildAlloyBootstrapTheme

	doFirst {
		delete lexiconDestinationDir
	}

	eachFile new StripPathSegmentsAction(1)

	eachFile {
		if (path in ["atlas.scss", "bootstrap.scss", "lexicon-base.scss"]) {
			filter {
				String line ->

				if (line == "// INSERT CUSTOM EXTENSIONS") {
					line = """\
@import \"../../liferay_variables_custom\";
@import \"../../liferay_variables\";
@import \"../../aui_custom\";
@import \"../../liferay_custom\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import \"../../aui_variables\";
@import \"../alloy-font-awesome/scss/font-awesome\";"""
				}

				return line
			}
		}
	}

	eachFile {
		if (path in ["atlas-variables.scss", "lexicon-base-variables.scss"]) {
			filter {
				String line ->

				if (line == "// INSERT CUSTOM BASE VARS") {
					line = """\
@import \"../../aui_variables\";
@import \"../alloy-font-awesome/scss/font-awesome\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import \"../../liferay_variables_custom\";
@import \"../../liferay_variables\";"""
				}

				return line
			}
		}
	}

	from zipTree(lexiconZipFile)
	include "scss/**"
	includeEmptyDirs = false
	into lexiconDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, lexiconZipFile, lexiconDestinationDir)
	}
}

buildTheme {
	dependsOn buildAlloyBootstrapTheme, buildAlloyFontAwesome, buildAlloyTheme, buildLexicon
	mustRunAfter buildAlloyBootstrapTheme, buildAlloyFontAwesome, buildAlloyTheme, buildLexicon
}

classes {
	dependsOn buildTheme
}