import com.liferay.gradle.plugins.node.tasks.DownloadNodeModuleTask
import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.ReplaceLeadingPathAction
import com.liferay.gradle.util.copy.StripPathSegmentsAction

apply plugin: "com.liferay.cache"

task buildAlloy(type: Copy)
task buildJQueryPluginsForm
task buildLexicon(type: Copy)
task buildLfrAMDLoader(type: Copy)
task buildSvg4everybody
task downloadLfrAMDLoader(type: DownloadNodeModuleTask)

String alloyVersion = "3.0.1"
String jqueryPluginsFormVersion = "3.51"
String lexiconVersion = "0.1.20"
String lfrAMDLoaderVersion = "1.3.5"
String svg4everybodyVersion = "2.0.0"

File jsDestinationDir = file("tmp/META-INF/resources")
File thirdPartyDir = file("../../../portal-web/third-party")

buildAlloy {
	File alloyDestinationDir = new File(jsDestinationDir, "aui")
	File alloyZipFile = new File(thirdPartyDir, "alloy-${alloyVersion}.zip")

	doFirst {
		delete alloyDestinationDir
	}

	doLast {
		File auiDeprecatedCssFile = new File(alloyDestinationDir, "aui_deprecated.css")

		File auiSkinDeprecatedCssFile = new File(alloyDestinationDir, "aui-skin-deprecated/css/aui-skin-deprecated.css")
		FileTree cssFileTree = fileTree(dir: alloyDestinationDir, include: "*-deprecated/assets/skins/sam/*-deprecated.css")

		FileUtil.concatenate(auiDeprecatedCssFile, files(auiSkinDeprecatedCssFile, cssFileTree))

		ant.replaceregexp(file: auiDeprecatedCssFile, flags: "g", match: "url\\(([^)]+)\\)", replace: "url(@theme_image_path@/aui/\\1)")

		ant.replace(file: auiDeprecatedCssFile) {
			replacefilter token: "../images/", value: ""
			replacefilter token: "../../../../../build/aui-skin-base/images/", value: ""
			replacefilter token: "../../../../../build/aui-skin-classic/images/", value: ""
			replacefilter token: "../../../../../build/aui-skin-deprecated/images/", value: ""
		}
	}

	eachFile new StripPathSegmentsAction(1)
	from zipTree(alloyZipFile)
	include "build/**"
	includeEmptyDirs = false
	into alloyDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, alloyZipFile, alloyDestinationDir)
	}
}

buildJQueryPluginsForm {
	File jQueryPluginsFormJsFile = file("src/main/resources/META-INF/resources/jquery/form.js")

	doLast {
		FileUtil.get(project, "https://raw.githubusercontent.com/malsup/form/${jqueryPluginsFormVersion}/jquery.form.js", jQueryPluginsFormJsFile)

		String text = jQueryPluginsFormJsFile.text

		text = text.replace("typeof define === 'function'", "false && typeof define === 'function'")

		text = ";(function(jQuery){" + System.getProperty("line.separator") + text + '})(AUI.$);'

		jQueryPluginsFormJsFile.text = text
	}

	onlyIf {
		!jQueryPluginsFormJsFile.exists()
	}
}

buildLexicon {
	File lexiconDestinationDir = new File(jsDestinationDir, "lexicon")
	File lexiconZipFile = new File(thirdPartyDir, "lexicon-${lexiconVersion}.zip")

	doFirst {
		delete lexiconDestinationDir
	}

	eachFile new ReplaceLeadingPathAction("js": lexiconDestinationDir.name)
	from zipTree(lexiconZipFile)
	includeEmptyDirs = false
	into jsDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, lexiconZipFile, lexiconDestinationDir)
	}
}

buildLfrAMDLoader {
	dependsOn downloadLfrAMDLoader
	from new File(node.nodeDir, "node_modules/lfr-amd-loader/dist/loader.js")
	into new File(jsDestinationDir, "loader")
}

buildSvg4everybody {
	File svg4everybodyJsFile = file("src/main/resources/META-INF/resources/misc/svg4everybody.js")

	doLast {
		FileUtil.get(project, "https://raw.githubusercontent.com/jonathantneal/svg4everybody/v${svg4everybodyVersion}/dist/svg4everybody.js", svg4everybodyJsFile)

		String text = svg4everybodyJsFile.text

		text = text.replace('"function" == typeof define', 'false && "function" == typeof define')

		svg4everybodyJsFile.text = text
	}

	onlyIf {
		!svg4everybodyJsFile.exists()
	}
}

cache {
	task(buildLfrAMDLoader) {
		baseDir = buildLfrAMDLoader.destinationDir
		cacheDir = ".task-cache"
		include "loader.js"
		testFile "build.gradle"
	}
}

classes {
	dependsOn buildAlloy
	dependsOn buildJQueryPluginsForm
	dependsOn buildLexicon
	dependsOn buildLfrAMDLoader
	dependsOn buildSvg4everybody
}

dependencies {
	compile group: "com.liferay.portal", name: "portal-service", version: liferay.portalVersion
	compile group: "com.liferay.portal", name: "util-taglib", version: liferay.portalVersion
	compile group: "javax.portlet", name: "portlet-api", version: "2.0"
	compile group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	compile group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"
	compile group: "org.osgi", name: "org.osgi.compendium", version: "5.0.0"
	compile group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
}

downloadLfrAMDLoader {
	moduleName = "lfr-amd-loader"
	moduleVersion = lfrAMDLoaderVersion
}

liferay {
	deployDir = file("${liferayHome}/osgi/modules")
}