<?xml version="1.0"?>
<!DOCTYPE project>

<project>
	<property name="alloy.bootstrap.version" value="3.2.0-2" />
	<property name="alloy.version" value="3.0.1" />
	<property name="lexicon.version" value="0.1.6" />
	<property name="third.party.dir" value="../../../portal-web/third-party" />

	<import file="../../../tools/sdk/build-common-osgi-plugin.xml" />

	<property name="auto.deploy.dir" value="${liferay.home}/osgi/portal" />

	<macrodef name="build-alloy">
		<sequential>
			<path id="alloy.zip.path">
				<fileset dir="${third.party.dir}">
					<include name="alloy-${alloy.version}*.zip" />
				</fileset>
			</path>

			<property name="alloy.zip.path" refid="alloy.zip.path" />

			<basename file="${alloy.zip.path}" property="alloy.file" />

			<if>
				<not>
					<uptodate
						srcfile="${third.party.dir}/${alloy.file}"
						targetfile="tmp/META-INF/resources/html/js/aui"
					/>
				</not>
				<then>

					<!-- Prepare -->

					<delete dir="tmp/META-INF/resources/html/js/aui" />

					<echo>${alloy.file}</echo>

					<tstamp>
						<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
					</tstamp>

					<unzip dest="${tstamp.value}" src="${third.party.dir}/${alloy.file}" />

					<!-- CSS -->

					<property name="alloy.build.dir" value="${tstamp.value}/build" />
					<property name="alloy.temp.dir" value="${tstamp.value}/temp" />

					<concat destfile="${alloy.temp.dir}/aui_deprecated.css">
						<filelist
							dir="${alloy.build.dir}/aui-skin-deprecated/css"
							files="aui-skin-deprecated.css"
						/>
					</concat>

					<for param="aui.dir">
						<path>
							<dirset
								dir="${alloy.build.dir}"
								includes="aui-*"
							/>
						</path>
						<sequential>
							<basename property="aui.dir.name" file="@{aui.dir}" />

							<if>
								<and>
									<available file="${alloy.build.dir}/${aui.dir.name}/assets/skins/sam/${aui.dir.name}.css" />
									<matches pattern="-deprecated" string="${aui.dir.name}" />
								</and>
								<then>
									<concat append="true" destfile="${alloy.temp.dir}/aui_deprecated.css">
										<filelist
											dir="${alloy.build.dir}/${aui.dir.name}/assets/skins/sam"
											files="${aui.dir.name}.css"
										/>
									</concat>
								</then>
							</if>

							<var name="aui.dir.name" unset="true" />
						</sequential>
					</for>

					<replaceregexp match="url\(([^)]+)\)" replace="url(@theme_image_path@/aui/\1)" flags="g" byline="false">
						<fileset
							dir="${alloy.temp.dir}"
							includes="aui_deprecated.css"
						/>
					</replaceregexp>

					<replace file="${alloy.temp.dir}/aui_deprecated.css">
						<replacefilter token="../images/" value="" />
					</replace>

					<replace file="${alloy.temp.dir}/aui_deprecated.css">
						<replacefilter token="../../../../../build/aui-skin-base/images/" value="" />
					</replace>

					<replace file="${alloy.temp.dir}/aui_deprecated.css">
						<replacefilter token="../../../../../build/aui-skin-classic/images/" value="" />
					</replace>

					<replace file="${alloy.temp.dir}/aui_deprecated.css">
						<replacefilter token="../../../../../build/aui-skin-deprecated/images/" value="" />
					</replace>

					<copy
						file="${alloy.temp.dir}/aui_deprecated.css"
						tofile="tmp/META-INF/resources/html/js/aui/aui_deprecated.css"
						overwrite="true"
					/>

					<!-- JavaScript -->

					<copy todir="tmp/META-INF/resources/html/js/aui" overwrite="true" preservelastmodified="true">
						<fileset dir="${alloy.build.dir}/" />
					</copy>

					<!-- Clean up -->

					<delete dir="${tstamp.value}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="build-alloy-bootstrap">
		<sequential>
			<path id="alloy.bootstrap.zip.path">
				<fileset dir="${third.party.dir}">
					<include name="bootstrap-sass-${alloy.bootstrap.version}*.zip" />
				</fileset>
			</path>

			<property name="alloy.bootstrap.zip.path" refid="alloy.bootstrap.zip.path" />

			<basename file="${alloy.bootstrap.zip.path}" property="alloy.bootstrap.file" />

			<if>
				<not>
					<uptodate
						srcfile="${third.party.dir}/${alloy.bootstrap.file}"
						targetfile="tmp/META-INF/resources/html/js/bootstrap"
					/>
				</not>
				<then>

					<!-- Prepare -->

					<delete dir="tmp/META-INF/resources/html/bootstrap-assets" />
					<delete dir="tmp/META-INF/resources/html/js/bootstrap" />

					<echo>${alloy.bootstrap.file}</echo>

					<tstamp>
						<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
					</tstamp>

					<unzip dest="${tstamp.value}" src="${third.party.dir}/${alloy.bootstrap.file}" />

					<property name="alloy.bootstrap.assets.dir" value="${tstamp.value}/bootstrap-sass-${alloy.bootstrap.version}/assets" />

					<!-- JavaScript -->

					<delete failonerror="false" includeemptydirs="true" quiet="true">
						<fileset
							dir="${alloy.bootstrap.assets.dir}/javascripts"
							includes="bootstrap-*.js"
						/>
					</delete>

					<copy todir="tmp/META-INF/resources/html/js/bootstrap" overwrite="true" preservelastmodified="true">
						<fileset dir="${alloy.bootstrap.assets.dir}/javascripts/" />
					</copy>

					<delete dir="${alloy.bootstrap.assets.dir}/javascripts" />

					<!-- Assets -->

					<copy todir="tmp/META-INF/resources/html/bootstrap-assets" overwrite="true" preservelastmodified="true">
						<fileset dir="${alloy.bootstrap.assets.dir}/" />
					</copy>

					<!-- Clean up -->

					<delete dir="${tstamp.value}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="build-lexicon">
		<sequential>
			<path id="lexicon.zip.path">
				<fileset dir="${third.party.dir}">
					<include name="lexicon*.zip" />
				</fileset>
			</path>

			<property name="lexicon.zip.path" refid="lexicon.zip.path" />

			<basename file="${lexicon.zip.path}" property="lexicon.file" />

			<if>
				<not>
					<uptodate
						srcfile="${third.party.dir}/${lexicon.file}"
						targetfile="tmp/META-INF/resources/html/js/lexicon"
					/>
				</not>
				<then>

					<!-- Prepare -->

					<delete dir="tmp/META-INF/resources/html/lexicon-assets" />
					<delete dir="tmp/META-INF/resources/html/js/lexicon" />

					<echo>${lexicon.file}</echo>

					<tstamp>
						<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
					</tstamp>

					<unzip dest="${tstamp.value}" src="${third.party.dir}/${lexicon.file}" />

					<property name="lexicon.assets.dir" value="${tstamp.value}/bootstrap-sass-${lexicon.version}/assets" />

					<!-- JavaScript -->

					<copy todir="tmp/META-INF/resources/html/js/lexicon" overwrite="true" preservelastmodified="true">
						<fileset dir="${tstamp.value}/js/" />
					</copy>

					<delete dir="${tstamp.value}/js" />

					<!-- Assets -->

					<copy todir="tmp/META-INF/resources/html/lexicon-assets" overwrite="true" preservelastmodified="true">
						<fileset dir="${tstamp.value}/" />
					</copy>

					<!-- Clean up -->

					<delete dir="${tstamp.value}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="build-lfr-amd-loader">
		<sequential>
			<download-node-module
				node.module.name="lfr-amd-loader"
				node.module.version="${nodejs.modules.version[lfr-amd-loader]}"
			/>

			<copy
				file="${sdk.tools.dir}/node-v${nodejs.version}/node_modules/lfr-amd-loader/dist/loader.js"
				todir="tmp/META-INF/resources/html/js/loader"
			/>
		</sequential>
	</macrodef>

	<target name="build-alloy">
		<build-alloy />
	</target>

	<target name="build-alloy-bootstrap">
		<build-alloy-bootstrap />
	</target>

	<target name="build-lexicon">
		<build-lexicon />
	</target>

	<target name="compile">
		<compile
			module.dir="${basedir}"
		/>

		<build-alloy-bootstrap />

		<build-alloy />

		<build-lexicon />

		<build-lfr-amd-loader />
	</target>
</project>