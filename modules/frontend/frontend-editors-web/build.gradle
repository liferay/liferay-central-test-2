import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.StripPathSegmentsAction
import com.liferay.gradle.util.tasks.ConcatenateTask

dependencies {
	compile group: "org.osgi", name: "org.osgi.compendium", version: "5.0.0"
	compile group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
	compile project(":apps:item-selector:item-selector-api")
	compile project(":apps:item-selector:item-selector-criteria-api")
}

ext {
	alloyEditorVersion = "0.2.7"
	ckEditorVersion = "4.4.5"
	tinyMCEVersion = "4.1.7"

	ckEditorScaytUrl = "http://download.ckeditor.com/scayt/releases/scayt_${ckEditorVersion}.zip"
	ckEditorWscUrl = "http://download.ckeditor.com/wsc/releases/wsc_${ckEditorVersion}.zip"
}

liferay {
	deployDir = file("${liferayHome}/osgi/modules")
}

File editorsDestinationDir = file("tmp/META-INF/resources/html/editors")
File editorsSrcDir = file("src/META-INF/resources/html/editors")
File thirdPartyDir = file("../../../portal-web/third-party")

task buildAlloyEditor(type: Copy)
task buildCKEditorBBCode(type: ConcatenateTask)
task buildCKEditor(type: Copy)
task buildCKEditorScayt(type: Copy)
task buildCKEditorWsc(type: Copy)
task buildTinyMCE(type: Copy)

buildAlloyEditor {
	File alloyEditorDestinationDir = new File(editorsDestinationDir, "alloyeditor")
	File alloyEditorSrcDir = new File(editorsSrcDir, "alloyeditor_diffs")
	File alloyEditorZipFile = new File(thirdPartyDir, "alloy-editor-${alloyEditorVersion}.zip")

	doFirst {
		delete alloyEditorDestinationDir
	}

	doLast {
		FileTree alloyEditorJsFileTree = fileTree(dir: alloyEditorDestinationDir, include : "alloy-editor*.js")
		FileTree buttonsJsFileTree = fileTree(dir: new File(alloyEditorSrcDir, "buttons"), include: "**/*.js")

		alloyEditorJsFileTree.each {
			File alloyEditorJsFile ->

			File liferayAlloyEditorJsFile = new File(alloyEditorDestinationDir, "liferay-" + alloyEditorJsFile.name)

			FileUtil.concatenate(liferayAlloyEditorJsFile, files(alloyEditorJsFile, buttonsJsFileTree))
		}
	}

	duplicatesStrategy = "exclude"

	from(zipTree(alloyEditorZipFile)) {
		eachFile new StripPathSegmentsAction(2)
		include "alloy-editor-${alloyEditorVersion}/alloy-editor/**"
	}

	from alloyEditorSrcDir
	includeEmptyDirs = false
	into alloyEditorDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, alloyEditorZipFile, alloyEditorDestinationDir)
	}
}

buildCKEditor {
	File ckEditorDestinationDir = new File(editorsDestinationDir, "ckeditor")
	File ckEditorZipFile = new File(thirdPartyDir, "ckeditor_${ckEditorVersion}_liferay.zip")

	dependsOn buildCKEditorBBCode

	doFirst {
		delete ckEditorDestinationDir
	}

	duplicatesStrategy = "exclude"

	from(zipTree(ckEditorZipFile)) {
		eachFile new StripPathSegmentsAction(1)

		include "ckeditor/**"
	}

	from new File(editorsSrcDir, "ckeditor_diffs")
	includeEmptyDirs = false
	into ckEditorDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, ckEditorZipFile, ckEditorDestinationDir)
	}
}

buildCKEditorBBCode {
	File bbCodeDir = new File(editorsSrcDir, "ckeditor_diffs/plugins/bbcode")

	destinationFile = new File(bbCodeDir, "bbcode_parser.js")

	ext {
		autoClean = false
	}

	sourceFiles new File(bbCodeDir, "bbcode_utils.js")
	sourceFiles new File(bbCodeDir, "lexer.js")
	sourceFiles new File(bbCodeDir, "parser.js")
	sourceFiles new File(bbCodeDir, "converter.js")
}

buildCKEditorScayt {
	dependsOn buildCKEditor

	from zipTree(
		{
			File ckEditorScaytFile = new File(thirdPartyDir, "scayt_${ckEditorVersion}.zip")

			if (!ckEditorScaytFile.exists()) {
				FileUtil.get(project, ckEditorScaytUrl, ckEditorScaytFile)
			}

			ckEditorScaytFile
		})

	into new File(editorsDestinationDir, "ckeditor/plugins")
}

buildCKEditorWsc {
	dependsOn buildCKEditor

	from zipTree(
		{
			File ckEditorWscFile = new File(thirdPartyDir, "wsc_${ckEditorVersion}.zip")

			if (!ckEditorWscFile.exists()) {
				FileUtil.get(project, ckEditorWscUrl, ckEditorWscFile)
			}

			ckEditorWscFile
		})

	into new File(editorsDestinationDir, "ckeditor/plugins")
}

buildTinyMCE {
	File tinyMCEDestinationDir = new File(editorsDestinationDir, "tiny_mce")
	File tinyMCEZipFile = new File(thirdPartyDir, "tinymce_${tinyMCEVersion}.zip")

	doFirst {
		delete tinyMCEDestinationDir
	}

	duplicatesStrategy = "exclude"

	from new File(editorsSrcDir, "tiny_mce_diffs")

	from(zipTree(tinyMCEZipFile)) {
		eachFile new StripPathSegmentsAction(3)

		include "tinymce/js/tinymce/**"
	}

	includeEmptyDirs = false
	into tinyMCEDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, tinyMCEZipFile, tinyMCEDestinationDir)
	}
}

classes {
	dependsOn buildAlloyEditor
	dependsOn buildCKEditor, buildCKEditorScayt, buildCKEditorWsc
	dependsOn buildTinyMCE
}