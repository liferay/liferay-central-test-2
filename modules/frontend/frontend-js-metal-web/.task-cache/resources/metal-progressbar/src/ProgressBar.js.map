{"version":3,"sources":["ProgressBar.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAyKE,WAAW","file":"bower_components/metal-progressbar/src/ProgressBar.js","sourcesContent":["'use strict';\n\nimport core from 'bower:metal/src/core';\nimport dom from 'bower:metal/src/dom/dom';\nimport ProgressBarBase from './ProgressBar.soy';\n\n/**\n * UI Component that renders a progress bar.\n */\nclass ProgressBar extends ProgressBarBase {\n\t/**\n\t * Get the inner element that represents the bar.\n\t * @return {!Element}\n\t */\n\tgetBarElement() {\n\t\tif (!this.barElement_) {\n\t\t\tthis.barElement_ = this.element.childNodes[0];\n\t\t}\n\t\treturn this.barElement_;\n\t}\n\n\t/**\n\t * Setter function for the `value` attribute. Makes sure the value\n\t * is between the current `min` and `max` attributes.\n\t * @param {number} value\n\t * @return {number}\n\t * @protected\n\t */\n\tsetterValueFn_(value) {\n\t\tif (value < this.min) {\n\t\t\tvalue = this.min;\n\t\t}\n\t\tif (value > this.max) {\n\t\t\tvalue = this.max;\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Synchronization logic for the `barClass` attribute.\n\t * @param {string} barClass\n\t * @param {string} prevBarClass\n\t */\n\tsyncBarClass(barClass, prevBarClass) {\n\t\tvar barElement = this.getBarElement();\n\t\tdom.removeClasses(barElement, prevBarClass);\n\t\tdom.addClasses(barElement, barClass);\n\t}\n\n\t/**\n\t * Synchronization logic for the `label` attribute.\n\t */\n\tsyncLabel() {\n\t\tvar barElement = this.getBarElement();\n\t\tdom.removeChildren(barElement);\n\t\tif (this.label) {\n\t\t\tdom.append(barElement, this.label);\n\t\t}\n\t}\n\n\t/**\n\t * Synchronization logic for the `max` attribute.\n\t * @param {number} max\n\t */\n\tsyncMax(max) {\n\t\tif (max < this.value) {\n\t\t\tthis.value = max;\n\t\t} else {\n\t\t\tthis.updateBar_();\n\t\t}\n\t\tthis.element.setAttribute('aria-valuemax', this.max);\n\t}\n\n\t/**\n\t * Synchronization logic for the `min` attribute.\n\t * @param {number} min\n\t */\n\tsyncMin(min) {\n\t\tif (min > this.value) {\n\t\t\tthis.value = min;\n\t\t} else {\n\t\t\tthis.updateBar_();\n\t\t}\n\t\tthis.element.setAttribute('aria-valuemin', this.min);\n\t}\n\n\t/**\n\t * Synchronization logic for the `value` attribute.\n\t * @param {number} value\n\t */\n\tsyncValue() {\n\t\tthis.updateBar_();\n\t\tthis.element.setAttribute('aria-valuenow', this.value);\n\t}\n\n\t/**\n\t * Updates the bar according to the `min`, `max` and `value` attributes.\n\t * @protected\n\t */\n\tupdateBar_() {\n\t\tvar barElement = this.getBarElement();\n\t\tvar percentage = Math.floor(((this.value - this.min) * 100) / (this.max - this.min));\n\t\tbarElement.style.width = percentage + '%';\n\t}\n}\n\n/**\n * Attributes definition.\n * @type {!Object}\n * @static\n */\nProgressBar.ATTRS = {\n\t/**\n\t * Optional CSS classes to be added to the inner progress bar element,\n\t * like 'progress-bar-danger'.\n\t * @type {string}\n\t */\n\tbarClass: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * An optional label to be rendered inside the progress bar.\n\t * @type {string}\n\t */\n\tlabel: {\n\t\tvalidator: label => {\n\t\t\treturn !core.isDefAndNotNull(label) || core.isString(label);\n\t\t}\n\t},\n\n\t/**\n\t * The maximum value of the progress bar. When the value is at its\n\t * max, the bar will be fully extended.\n\t * @type {number}\n\t */\n\tmax: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 100\n\t},\n\n\t/**\n\t * The minimum value of the progress bar. When the value is at its\n\t * max, the bar will be fully collapsed.\n\t * @type {number}\n\t */\n\tmin: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * The current value of the progress bar.\n\t * @type {number}\n\t */\n\tvalue: {\n\t\tsetter: 'setterValueFn_',\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0\n\t}\n};\n\n/**\n * Default modal elementClasses.\n * @type {string}\n * @static\n */\nProgressBar.ELEMENT_CLASSES = 'progress';\n\nexport default ProgressBar;\nimport JQueryAdapter from 'bower:metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('progressBar', ProgressBar)"],"sourceRoot":"/source/"}