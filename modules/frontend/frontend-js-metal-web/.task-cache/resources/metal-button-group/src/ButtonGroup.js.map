{"version":3,"sources":["/source/ButtonGroup.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAiJe","sourcesContent":["'use strict';\n\nimport core from 'metal/src/core';\nimport dom from 'metal/src/dom/dom';\nimport ButtonGroupBase from './ButtonGroup.soy';\n\n/**\n * Responsible for handling groups of buttons.\n */\nclass ButtonGroup extends ButtonGroupBase {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.buttonElements_ = null;\n\n\t\tthis.on('selectedChanged', this.defaultSelectedChanged_, true);\n\t}\n\n\t/**\n\t * The default behavior of the `selectedChanged` event. Adds or removes the CSS\n\t * class defined by `ButtonGroup.SELECTED_CLASS` to each button.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tdefaultSelectedChanged_(event) {\n\t\tfor (var i = 0; i < this.buttonElements_.length; i++) {\n\t\t\tif (event.newVal.indexOf(this.buttons[i].label) !== -1) {\n\t\t\t\tdom.addClasses(this.buttonElements_[i], ButtonGroup.SELECTED_CLASS);\n\t\t\t} else {\n\t\t\t\tdom.removeClasses(this.buttonElements_[i], ButtonGroup.SELECTED_CLASS);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `click` event fired on one of the buttons. Appropriately selects\n\t * or deselects the clicked button.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleClick_(event) {\n\t\tvar button = event.delegateTarget;\n\t\tvar index = button.getAttribute('data-index');\n\t\tvar selectedIndex = this.selected.indexOf(this.buttons[index].label);\n\t\tif (selectedIndex === -1) {\n\t\t\tthis.selected.push(this.buttons[index].label);\n\t\t\tthis.selected = this.selected;\n\t\t} else if (this.selected.length > this.minSelected) {\n\t\t\tthis.selected.splice(selectedIndex, 1);\n\t\t\tthis.selected = this.selected;\n\t\t}\n\t}\n\n\t/**\n\t * Setter function for the `selected` attribute. Checks if the minimum number\n\t * of buttons is selected. If not, the remaining number of buttons needed to\n\t * reach the minimum will be selected.\n\t * @param {!Object<number, boolean>|!Array<string>} selected\n\t * @return {!Object<number, boolean>}\n\t * @protected\n\t */\n\tsetterSelectedFn_(selected) {\n\t\tvar minSelected = Math.min(this.minSelected, this.buttons.length);\n\t\tvar i = 0;\n\t\twhile (selected.length < minSelected) {\n\t\t\tif (selected.indexOf(this.buttons[i].label) === -1) {\n\t\t\t\tselected.push(this.buttons[i].label);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn selected;\n\t}\n\n\t/**\n\t * Called whenever the `buttons` attr changes, as well as on the first\n\t * render. This just stores the new button elements for later use.\n\t */\n\tsyncButtons() {\n\t\tthis.buttonElements_ = this.element.querySelectorAll('button');\n\t}\n}\n\n/**\n * Attributes definition.\n * @type {!Object}\n * @static\n */\nButtonGroup.ATTRS = {\n\t/**\n\t * Configuration for the buttons that should be rendered in this group.\n\t * Each button config should be given as an object. Supported options are:\n\t * label, type and cssClass.\n\t * @type {!Array<!Object>}\n\t * @default []\n\t */\n\tbuttons: {\n\t\tvalidator: val => val instanceof Array,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t/**\n\t * The minimum number of buttons that need to be selected at a time. If the\n\t * minimum number of buttons is not already initially selected, this will\n\t * automaticaly select the first `minSelected` buttons.\n\t * @type {number}\n\t * @default 0\n\t */\n\tminSelected: {\n\t\tvalidator: core.isNumber,\n\t\tvalue: 0,\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * An array with the labels of the buttons that should be selected.\n\t * @type {!Array<string>}\n\t */\n\tselected: {\n\t\tsetter: 'setterSelectedFn_',\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\n/**\n * Default element classes.\n * @type {string}\n * @static\n */\nButtonGroup.ELEMENT_CLASSES = 'btn-group';\n\n/**\n * The CSS class added to selected buttons.\n * @type {string}\n * @static\n */\nButtonGroup.SELECTED_CLASS = 'btn-group-selected';\n\nexport default ButtonGroup;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('buttonGroup', ButtonGroup);"]}