{"version":3,"sources":["/source/html.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport { core, string } from 'metal';\n\nclass html {\n\t/**\n\t * Minifies given HTML source by removing extra white spaces, comments and\n\t * other unneeded characters without breaking the content structure. As a\n\t * result HTML become smaller in size.\n\t * - Contents within <code>, <pre>, <script>, <style>, <textarea> and\n\t *   conditional comments tags are preserved.\n\t * - Comments are removed.\n\t * - Conditional comments are preserved.\n\t * - Breaking spaces are collapsed into a single space.\n\t * - Unneeded spaces inside tags (around = and before />) are removed.\n\t * - Spaces between tags are removed, even from inline-block elements.\n\t * - Spaces surrounding tags are removed.\n\t * - DOCTYPE declaration is simplified to <!DOCTYPE html>.\n\t * - Does not remove default attributes from <script>, <style>, <link>,\n\t *   <form>, <input>.\n\t * - Does not remove values from boolean tag attributes.\n\t * - Does not remove \"javascript:\" from in-line event handlers.\n\t * - Does not remove http:// and https:// protocols.\n\t * @param {string} htmlString Input HTML to be compressed.\n\t * @return {string} Compressed version of the HTML.\n\t */\n\tstatic compress(htmlString) {\n\t\tvar preserved = {};\n\t\thtmlString = html.preserveBlocks_(htmlString, preserved);\n\t\thtmlString = html.simplifyDoctype_(htmlString);\n\t\thtmlString = html.removeComments_(htmlString);\n\t\thtmlString = html.removeIntertagSpaces_(htmlString);\n\t\thtmlString = html.collapseBreakingSpaces_(htmlString);\n\t\thtmlString = html.removeSpacesInsideTags_(htmlString);\n\t\thtmlString = html.removeSurroundingSpaces_(htmlString);\n\t\thtmlString = html.returnBlocks_(htmlString, preserved);\n\t\treturn htmlString.trim();\n\t}\n\n\t/**\n\t * Collapses breaking spaces into a single space.\n\t * @param {string} htmlString\n\t * @return {string}\n\t * @protected\n\t */\n\tstatic collapseBreakingSpaces_(htmlString) {\n\t\treturn string.collapseBreakingSpaces(htmlString);\n\t}\n\n\t/**\n\t * Searches for first occurrence of the specified open tag string pattern\n\t * and from that point finds next \">\" position, identified as possible tag\n\t * end position.\n\t * @param {string} htmlString\n\t * @param {string} openTag Open tag string pattern without open tag ending\n\t *     character, e.g. \"<textarea\" or \"<code\".\n\t * @return {string}\n\t * @protected\n\t */\n\tstatic lookupPossibleTagBoundary_(htmlString, openTag) {\n\t\tvar tagPos = htmlString.indexOf(openTag);\n\t\tif (tagPos > -1) {\n\t\t\ttagPos += htmlString.substring(tagPos).indexOf('>') + 1;\n\t\t}\n\t\treturn tagPos;\n\t}\n\n\t/**\n\t * Preserves contents inside any <code>, <pre>, <script>, <style>,\n\t * <textarea> and conditional comment tags. When preserved, original content\n\t * are replaced with an unique generated block id and stored into\n\t * `preserved` map.\n\t * @param {string} htmlString\n\t * @param {Object} preserved Object to preserve the content indexed by an\n\t *     unique generated block id.\n\t * @return {html} The preserved HTML.\n\t * @protected\n\t */\n\tstatic preserveBlocks_(htmlString, preserved) {\n\t\thtmlString = html.preserveOuterHtml_(htmlString, '<!--[if', '<![endif]-->', preserved);\n\t\thtmlString = html.preserveInnerHtml_(htmlString, '<code', '</code', preserved);\n\t\thtmlString = html.preserveInnerHtml_(htmlString, '<pre', '</pre', preserved);\n\t\thtmlString = html.preserveInnerHtml_(htmlString, '<script', '</script', preserved);\n\t\thtmlString = html.preserveInnerHtml_(htmlString, '<style', '</style', preserved);\n\t\thtmlString = html.preserveInnerHtml_(htmlString, '<textarea', '</textarea', preserved);\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Preserves inner contents inside the specified tag. When preserved,\n\t * original content are replaced with an unique generated block id and\n\t * stored into `preserved` map.\n\t * @param {string} htmlString\n\t * @param {string} openTag Open tag string pattern without open tag ending\n\t *     character, e.g. \"<textarea\" or \"<code\".\n\t * @param {string} closeTag Close tag string pattern without close tag\n\t *     ending character, e.g. \"</textarea\" or \"</code\".\n\t * @param {Object} preserved Object to preserve the content indexed by an\n\t *     unique generated block id.\n\t * @return {html} The preserved HTML.\n\t * @protected\n\t */\n\tstatic preserveInnerHtml_(htmlString, openTag, closeTag, preserved) {\n\t\tvar tagPosEnd = html.lookupPossibleTagBoundary_(htmlString, openTag);\n\t\twhile (tagPosEnd > -1) {\n\t\t\tvar tagEndPos = htmlString.indexOf(closeTag);\n\t\t\thtmlString = html.preserveInterval_(htmlString, tagPosEnd, tagEndPos, preserved);\n\t\t\thtmlString = htmlString.replace(openTag, '%%%~1~%%%');\n\t\t\thtmlString = htmlString.replace(closeTag, '%%%~2~%%%');\n\t\t\ttagPosEnd = html.lookupPossibleTagBoundary_(htmlString, openTag);\n\t\t}\n\t\thtmlString = htmlString.replace(/%%%~1~%%%/g, openTag);\n\t\thtmlString = htmlString.replace(/%%%~2~%%%/g, closeTag);\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Preserves interval of the specified HTML into the preserved map replacing\n\t * original contents with an unique generated id.\n\t * @param {string} htmlString\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {Object} preserved Object to preserve the content indexed by an\n\t *     unique generated block id.\n\t * @return {string} The HTML with replaced interval.\n\t * @protected\n\t */\n\tstatic preserveInterval_(htmlString, start, end, preserved) {\n\t\tvar blockId = '%%%~BLOCK~' + core.getUid() + '~%%%';\n\t\tpreserved[blockId] = htmlString.substring(start, end);\n\t\treturn string.replaceInterval(htmlString, start, end, blockId);\n\t}\n\n\t/**\n\t * Preserves outer contents inside the specified tag. When preserved,\n\t * original content are replaced with an unique generated block id and\n\t * stored into `preserved` map.\n\t * @param {string} htmlString\n\t * @param {string} openTag Open tag string pattern without open tag ending\n\t *     character, e.g. \"<textarea\" or \"<code\".\n\t * @param {string} closeTag Close tag string pattern without close tag\n\t *     ending character, e.g. \"</textarea\" or \"</code\".\n\t * @param {Object} preserved Object to preserve the content indexed by an\n\t *     unique generated block id.\n\t * @return {html} The preserved HTML.\n\t * @protected\n\t */\n\tstatic preserveOuterHtml_(htmlString, openTag, closeTag, preserved) {\n\t\tvar tagPos = htmlString.indexOf(openTag);\n\t\twhile (tagPos > -1) {\n\t\t\tvar tagEndPos = htmlString.indexOf(closeTag) + closeTag.length;\n\t\t\thtmlString = html.preserveInterval_(htmlString, tagPos, tagEndPos, preserved);\n\t\t\ttagPos = htmlString.indexOf(openTag);\n\t\t}\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Removes all comments of the HTML. Including conditional comments and\n\t * \"<![CDATA[\" blocks.\n\t * @param {string} htmlString\n\t * @return {string} The HTML without comments.\n\t * @protected\n\t */\n\tstatic removeComments_(htmlString) {\n\t\tvar preserved = {};\n\t\thtmlString = html.preserveOuterHtml_(htmlString, '<![CDATA[', ']]>', preserved);\n\t\thtmlString = html.preserveOuterHtml_(htmlString, '<!--', '-->', preserved);\n\t\thtmlString = html.replacePreservedBlocks_(htmlString, preserved, '');\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Removes spaces between tags, even from inline-block elements.\n\t * @param {string} htmlString\n\t * @return {string} The HTML without spaces between tags.\n\t * @protected\n\t */\n\tstatic removeIntertagSpaces_(htmlString) {\n\t\thtmlString = htmlString.replace(html.Patterns.INTERTAG_CUSTOM_CUSTOM, '~%%%%%%~');\n\t\thtmlString = htmlString.replace(html.Patterns.INTERTAG_CUSTOM_TAG, '~%%%<');\n\t\thtmlString = htmlString.replace(html.Patterns.INTERTAG_TAG, '><');\n\t\thtmlString = htmlString.replace(html.Patterns.INTERTAG_TAG_CUSTOM, '>%%%~');\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Removes spaces inside tags.\n\t * @param {string} htmlString\n\t * @return {string} The HTML without spaces inside tags.\n\t * @protected\n\t */\n\tstatic removeSpacesInsideTags_(htmlString) {\n\t\thtmlString = htmlString.replace(html.Patterns.TAG_END_SPACES, '$1$2');\n\t\thtmlString = htmlString.replace(html.Patterns.TAG_QUOTE_SPACES, '=$1$2$3');\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Removes spaces surrounding tags.\n\t * @param {string} htmlString\n\t * @return {string} The HTML without spaces surrounding tags.\n\t * @protected\n\t */\n\tstatic removeSurroundingSpaces_(htmlString) {\n\t\treturn htmlString.replace(html.Patterns.SURROUNDING_SPACES, '$1');\n\t}\n\n\t/**\n\t * Restores preserved map keys inside the HTML. Note that the passed HTML\n\t * should contain the unique generated block ids to be replaced.\n\t * @param {string} htmlString\n\t * @param {Object} preserved Object to preserve the content indexed by an\n\t *     unique generated block id.\n\t * @param {string} replaceValue The value to replace any block id inside the\n\t * HTML.\n\t * @return {string}\n\t * @protected\n\t */\n\tstatic replacePreservedBlocks_(htmlString, preserved, replaceValue) {\n\t\tfor (var blockId in preserved) {\n\t\t\thtmlString = htmlString.replace(blockId, replaceValue);\n\t\t}\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Simplifies DOCTYPE declaration to <!DOCTYPE html>.\n\t * @param {string} htmlString\n\t * @return {string}\n\t * @protected\n\t */\n\tstatic simplifyDoctype_(htmlString) {\n\t\tvar preserved = {};\n\t\thtmlString = html.preserveOuterHtml_(htmlString, '<!DOCTYPE', '>', preserved);\n\t\thtmlString = html.replacePreservedBlocks_(htmlString, preserved, '<!DOCTYPE html>');\n\t\treturn htmlString;\n\t}\n\n\t/**\n\t * Restores preserved map original contents inside the HTML. Note that the\n\t * passed HTML should contain the unique generated block ids to be restored.\n\t * @param {string} htmlString\n\t * @param {Object} preserved Object to preserve the content indexed by an\n\t *     unique generated block id.\n\t * @return {string}\n\t * @protected\n\t */\n\tstatic returnBlocks_(htmlString, preserved) {\n\t\tfor (var blockId in preserved) {\n\t\t\thtmlString = htmlString.replace(blockId, preserved[blockId]);\n\t\t}\n\t\treturn htmlString;\n\t}\n}\n\n/**\n * HTML regex patterns.\n * @enum {RegExp}\n * @protected\n */\nhtml.Patterns = {\n\t/**\n\t * @type {RegExp}\n\t */\n\tINTERTAG_CUSTOM_CUSTOM: /~%%%\\s+%%%~/g,\n\n\t/**\n\t * @type {RegExp}\n\t */\n\tINTERTAG_TAG_CUSTOM: />\\s+%%%~/g,\n\n\t/**\n\t * @type {RegExp}\n\t */\n\tINTERTAG_CUSTOM_TAG: /~%%%\\s+</g,\n\n\t/**\n\t * @type {RegExp}\n\t */\n\tINTERTAG_TAG: />\\s+</g,\n\n\t/**\n\t * @type {RegExp}\n\t */\n\tSURROUNDING_SPACES: /\\s*(<[^>]+>)\\s*/g,\n\n\t/**\n\t * @type {RegExp}\n\t */\n\tTAG_END_SPACES: /(<(?:[^>]+?))(?:\\s+?)(\\/?>)/g,\n\n\t/**\n\t * @type {RegExp}\n\t */\n\tTAG_QUOTE_SPACES: /\\s*=\\s*([\"']?)\\s*(.*?)\\s*(\\1)/g\n};\n\nexport default html;\n"]}