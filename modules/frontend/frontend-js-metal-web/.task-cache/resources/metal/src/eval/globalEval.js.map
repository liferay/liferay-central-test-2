{"version":3,"sources":["/source/globalEval.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA4Fe","sourcesContent":["'use strict';\n\nimport dom from '../dom/dom';\n\n/**\n * Utility functions for running javascript code in the global scope.\n */\nclass globalEval {\n\t/**\n\t * Evaluates the given string in the global scope.\n\t * @param {string} text\n\t */\n\tstatic run(text) {\n\t\tvar script = document.createElement('script');\n\t\tscript.text = text;\n\t\tdocument.head.appendChild(script).parentNode.removeChild(script);\n\t}\n\n\t/**\n\t * Evaluates the given javascript file in the global scope.\n\t * @param {string} src The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t */\n\tstatic runFile(src, opt_callback) {\n\t\tvar script = document.createElement('script');\n\t\tscript.src = src;\n\n\t\tvar callback = function() {\n\t\t\tscript.parentNode.removeChild(script);\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tdom.on(script, 'load', callback);\n\t\tdom.on(script, 'error', callback);\n\t\tdocument.head.appendChild(script);\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given script element.\n\t * @param {!Element} script\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t */\n\tstatic runScript(script, opt_callback) {\n\t\tif (script.type && script.type !== 'text/javascript') {\n\t\t\topt_callback && opt_callback();\n\t\t\treturn;\n\t\t}\n\t\tif (script.parentNode) {\n\t\t\tscript.parentNode.removeChild(script);\n\t\t}\n\t\tif (script.src) {\n\t\t\tglobalEval.runFile(script.src, opt_callback);\n\t\t} else {\n\t\t\tglobalEval.run(script.text);\n\t\t\topt_callback && opt_callback();\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates any script tags present in the given element.\n\t * @params {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t */\n\tstatic runScriptsInElement(element, opt_callback) {\n\t\tvar scripts = element.querySelectorAll('script');\n\t\tif (scripts.length) {\n\t\t\tglobalEval.runScriptsInOrder(scripts, 0, opt_callback);\n\t\t} else if (opt_callback) {\n\t\t\topt_callback();\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given scripts elements in the order that they appear.\n\t * @param {!NodeList} scripts\n\t * @param {number} index\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t */\n\tstatic runScriptsInOrder(scripts, index, opt_callback) {\n\t\tglobalEval.runScript(scripts.item(index), function() {\n\t\t\tif (index < scripts.length - 1) {\n\t\t\t\tglobalEval.runScriptsInOrder(scripts, index + 1, opt_callback);\n\t\t\t} else if (opt_callback) {\n\t\t\t\topt_callback();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default globalEval;\n"]}