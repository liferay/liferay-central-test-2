{"version":3,"sources":["/source/JQueryAdapter.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Acts as a bridge between Metal.js and jQuery, allowing Metal.js components to\n * be used as jQuery plugins.\n * @type {!Object}\n */\nvar JQueryAdapter = {\n\t/**\n\t * Registers a Metal.js component as a jQuery plugin with the given name.\n\t * @param {string} name The name of the plugin that should be registered.\n\t * @param {!Function(Object)} Ctor The constructor of the Metal.js component.\n\t */\n\tregister(name, Ctor) {\n\t\tif (!$) {\n\t\t\tthrow new Error('jQuery needs to be included in the page for JQueryAdapter to work.');\n\t\t}\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new Error('The name string is required for registering a plugin');\n\t\t}\n\t\tif (typeof Ctor !== 'function') {\n\t\t\tthrow new Error('The constructor function is required for registering a plugin');\n\t\t}\n\n\t\t$.fn[name] = function(configOrMethodName) {\n\t\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\t\treturn handlePluginCall(name, Ctor, this, configOrMethodName, args);\n\t\t};\n\t}\n};\n\n/**\n * Calls a method on the plugin instance for the given element.\n * @param {string} name The name of the plugin.\n * @param {!jQuery} element A jQuery collection with a single element.\n * @param {string} methodName The name of the method to be called.\n * @param {Array} args The arguments to call the method with.\n * @return {*} The return value of the called method.\n */\nfunction callMethod(name, element, methodName, args) {\n\tvar fullName = getPluginFullName(name);\n\tvar instance = element.data(fullName);\n\tif (!instance) {\n\t\tthrow new Error('Tried to call method ' + methodName + ' on ' + name + ' plugin' +\n\t\t\t'without initialing it first.');\n\t}\n\tif (!isValidMethod(instance, methodName)) {\n\t\tthrow new Error('Plugin ' + name + ' has no method called ' + methodName);\n\t}\n\treturn instance[methodName].apply(instance, args);\n}\n\n/**\n * Creates an instace of a component for the given element, or updates it if one\n * already exists.\n * @param {string} name The name of the plugin.\n * @param {!Function(Object)} Ctor The constructor of the Metal.js component.\n * @param {!jQuery} element A jQuery collection with a single element.\n * @param {Object} config A config object to be passed to the component instance.\n */\nfunction createOrUpdateInstance(name, Ctor, element, config) {\n\tvar fullName = getPluginFullName(name);\n\tvar instance = element.data(fullName);\n\tconfig = $.extend({}, config, {\n\t\telement: element[0]\n\t});\n\tif (instance) {\n\t\tinstance.setAttrs(config);\n\t} else {\n\t\tinstance = new Ctor(config).render();\n\t\tinstance.on('*', onMetalEvent.bind(null, name, element));\n\t\telement.data(fullName, instance);\n\t}\n}\n\n/**\n * Gets the full name of the given plugin, by appending a prefix to it.\n * @param {string} name The name of the plugin.\n * @return {string}\n */\nfunction getPluginFullName(name) {\n\treturn 'metal-' + name;\n}\n\n/**\n * Handles calls to a registered plugin.\n * @param {string} name The name of the plugin.\n * @param {!Function(Object)} Ctor The constructor of the Metal.js component.\n * @param {!jQuery} collection A jQuery collection of elements to handle the plugin for.\n * @param {?(string|Object)} configOrMethodName If this is a string, a method with\n * that name will be called on the appropriate component instance. Otherwise, an\n * the instance (which will be created if it doesn't yet exist) will receive this\n * as its config object.\n * @param {Array} args All other arguments that were passed to the plugin call.\n */\nfunction handlePluginCall(name, Ctor, collection, configOrMethodName, args) {\n\tif (typeof configOrMethodName === 'string') {\n\t\treturn callMethod(name, $(collection[0]), configOrMethodName, args);\n\t} else {\n\t\tcollection.each(function() {\n\t\t\tcreateOrUpdateInstance(name, Ctor, $(this), configOrMethodName);\n\t\t});\n\t}\n\treturn collection;\n}\n\n/**\n * Checks if the given method is valid. A method is valid if it exists and isn't\n * private.\n * @param {!Object} instance The instance to check for the method.\n * @param {string} methodName The name of the method to check.\n * @return {boolean}\n */\nfunction isValidMethod(instance, methodName) {\n\treturn typeof instance[methodName] === 'function' &&\n\t\tmethodName[0] !== '_' &&\n\t\tmethodName[methodName.length - 1] !== '_';\n}\n\n/**\n * Called when an event is triggered on a Metal component that has been registered\n * as a jQuery plugin. Triggers a similar event on the jQuery element tied to the\n * plugin.\n * @param {string} name The name of the plugin.\n * @param {!jQuery} element A jQuery collection with a single element.\n * @param {string} eventType The name of the Metal.js event type.\n * @param {*} eventData Event data that was passed to the listener of the Metal.js\n *   event.\n */\nfunction onMetalEvent(name, element, eventType, eventData) {\n\tvar fullName = getPluginFullName(name);\n\telement.trigger(fullName + ':' + eventType, eventData);\n}\n\nexport default JQueryAdapter;\n"]}