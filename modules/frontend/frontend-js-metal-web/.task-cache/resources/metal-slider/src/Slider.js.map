{"version":3,"sources":["/source/Slider.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport { Drag } from 'metal-drag-drop';\nimport Position from 'metal-position';\nimport SliderBase from './Slider.soy';\n\n/**\n * Slider component.\n */\nclass Slider extends SliderBase {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * Map of different slider DOM elements. Used as a cache to prevent unnecessary dom lookups\n\t\t * on succesive queries.\n\t\t * @type {Map}\n\t\t * @protected\n\t\t */\n\t\tthis.elements_ = new Map();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\t/**\n\t\t * Manages dragging the rail handle to update the slider value.\n\t\t * @type {Drag}\n\t\t * @protected\n\t\t */\n\t\tthis.drag_ = new Drag({\n\t\t\tconstrain: this.getElement_('.rail'),\n\t\t\thandles: this.getElement_('.handle'),\n\t\t\tsources: this.getElement_('.rail-handle')\n\t\t});\n\n\t\t/**\n\t\t * Position and dimensions of the slider element.\n\t\t * @type {DOMRect}\n\t\t * @protected\n\t\t */\n\t\tthis.elementRegion_ = Position.getRegion(this.element);\n\n\t\tthis.attachDragEvents_();\n\t}\n\n\t/**\n\t * Attaches the drag events to handle value updates when dragging the rail handle.\n\t * protected\n\t */\n\tattachDragEvents_() {\n\t\tthis.drag_.on(Drag.Events.DRAG, this.updateValueFromDragData_.bind(this));\n\t\tthis.drag_.on(Drag.Events.END, this.updateValueFromDragData_.bind(this));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\n\t\tthis.drag_.dispose();\n\t\tthis.elements_ = null;\n\t\tthis.elementRegion_ = null;\n\t}\n\n\t/**\n\t * Returns a DOM element inside the slider component based on a selector query.\n\t * @param {string} query Query selector matching the desired element inside the Slider.\n\t * @return {Element} The slider element, or null if none was found.\n\t * @protected\n\t */\n\tgetElement_(query) {\n\t\tlet element = this.elements_.get(query);\n\n\t\tif (!element) {\n\t\t\telement = this.element.querySelector(query);\n\n\t\t\tthis.elements_.set(query, element);\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Handles mouse down actions on the slider rail and updates the slider value accordingly.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tonRailMouseDown_(event) {\n\t\tif (event.target === this.getElement_('.rail') || event.target === this.getElement_('.rail-active')) {\n\t\t\tthis.updateValue_(event.offsetX, 0);\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the max attribute.\n\t * @param {number} newVal The new value of the attribute.\n\t */\n\tsyncMax(newVal) {\n\t\tif (newVal < this.value) {\n\t\t\tthis.value = newVal;\n\t\t} else {\n\t\t\tthis.updateHandlePosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the min attribute.\n\t * @param {number} newVal The new value of the attribute.\n\t */\n\tsyncMin(newVal) {\n\t\tif (newVal > this.value) {\n\t\t\tthis.value = newVal;\n\t\t} else {\n\t\t\tthis.updateHandlePosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Synchronizes the slider UI with the value attribute.\n\t * @param {number} newVal The new value of the attribute.\n\t */\n\tsyncValue() {\n\t\tthis.updateHandlePosition_();\n\t}\n\n\t/**\n\t * Updates the handle position and active region to reflect the current slider value.\n\t * @protected\n\t */\n\tupdateHandlePosition_() {\n\t\tlet positionValue = (100 * (this.value - this.min) / (this.max - this.min)) + '%';\n\n\t\tif (!(this.drag_ && this.drag_.isDragging())) {\n\t\t\tthis.getElement_('.rail-handle').style.left = positionValue;\n\t\t}\n\n\t\tthis.getElement_('.rail-active').style.width = positionValue;\n\t}\n\n\t/**\n\t * Updates the slider value based on the UI state of the handle element.\n\t * @param {number} handlePosition Position of the handle in px.\n\t * @param {number} offset Offset to be added to normalize relative inputs.\n\t * @protected\n\t */\n\tupdateValue_(handlePosition, offset) {\n\t\tthis.value = Math.round(offset + (handlePosition / this.elementRegion_.width) * (this.max - this.min));\n\t}\n\n\t/**\n\t * Handles Drag events from the rail handle and updates the slider value accordingly.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tupdateValueFromDragData_(data) {\n\t\tthis.updateValue_(data.relativeX, this.min);\n\t}\n}\n\nSlider.ATTRS = {\n\t/**\n\t * Name of the hidden input field that holds the slider value. Useful when slider is embedded\n\t * inside a form so it can automatically send its value.\n\t * @type {string}\n\t */\n\tinputName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * Defines the maximum value handled by the slider.\n\t * @type {number}\n\t * @default 100\n\t */\n\tmax: {\n\t\tvalue: 100\n\t},\n\n\t/**\n\t * Defines the minimum value handled by the slider.\n\t * @type {number}\n\t * @default 0\n\t */\n\tmin: {\n\t\tvalue: 0\n\t},\n\n\t/**\n\t * Defines the currently selected value on the slider.\n\t * @type {number}\n\t * @default 50\n\t */\n\tvalue: {\n\t\tvalidator: function(val) {\n\t\t\treturn core.isNumber(val) && this.min <= val && val <= this.max;\n\t\t},\n\t\tvalue: 80\n\t}\n};\n\n/**\n * Default slider elementClasses.\n * @default slider\n * @type {string}\n * @static\n */\nSlider.ELEMENT_CLASSES = 'slider';\n\nexport default Slider;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('slider', Slider);"]}