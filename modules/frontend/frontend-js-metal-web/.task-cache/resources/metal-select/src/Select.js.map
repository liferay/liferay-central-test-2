{"version":3,"sources":["/source/Select.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport dom from 'metal-dom';\nimport SelectBase from './Select.soy';\nimport 'metal-dropdown';\n\n/**\n * Responsible for rendering and handling a custom select component, based\n * on `Dropdown`.\n */\nclass Select extends SelectBase {\n\t/**\n\t * Finds the index of the given element in the items array.\n\t * @param {!Element} element\n\t * @return {number}\n\t * @protected\n\t */\n\tfindItemIndex_(element) {\n\t\tvar items = this.element.querySelectorAll('li');\n\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\tif (items.item(i) === element) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the option at the given index.\n\t * @param {number} index\n\t * @protected\n\t */\n\tfocusIndex_(index) {\n\t\tvar option = this.element.querySelector('.select-option:nth-child(' + (index + 1) + ') a');\n\t\tif (option) {\n\t\t\tthis.focusedIndex_ = index;\n\t\t\toption.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the `Dropdown` instance used by this `Select`.\n\t * @return {!Dropdown}\n\t */\n\tgetDropdown() {\n\t\treturn this.components[this.id + '-dropdown'];\n\t}\n\n\t/**\n\t * Handles a `attrsSynced` event for the dropdown.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\thandleDropdownAttrsSynced_(data) {\n\t\tif (this.openedWithKeyboard_) {\n\t\t\t// This is done on `attrsSynced` because the items need to have already\n\t\t\t// been made visible before we try focusing them.\n\t\t\tthis.focusIndex_(0);\n\t\t\tthis.openedWithKeyboard_ = false;\n\t\t} else if (data.changes.expanded) {\n\t\t\tthis.focusedIndex_ = null;\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `click` event on one of the items. Updates `selectedIndex`\n\t * accordingly.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleItemClick_(event) {\n\t\tthis.selectedIndex = this.findItemIndex_(event.delegateTarget);\n\t\tthis.getDropdown().close();\n\t\tevent.preventDefault();\n\t}\n\n\t/**\n\t * Handles a `keydown` event on this component. Handles keyboard controls.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleKeyDown_(event) {\n\t\tif (this.getDropdown().expanded) {\n\t\t\tswitch (event.keyCode) {\n\t\t\t\tcase 27:\n\t\t\t\t\tthis.getDropdown().close();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 38:\n\t\t\t\t\tthis.focusedIndex_ = core.isDefAndNotNull(this.focusedIndex_) ? this.focusedIndex_ : 1;\n\t\t\t\t\tthis.focusIndex_(this.focusedIndex_ === 0 ? this.items.length - 1 : this.focusedIndex_ - 1);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 40:\n\t\t\t\t\tthis.focusedIndex_ = core.isDefAndNotNull(this.focusedIndex_) ? this.focusedIndex_ : -1;\n\t\t\t\t\tthis.focusIndex_(this.focusedIndex_ === this.items.length - 1 ? 0 : this.focusedIndex_ + 1);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ((event.keyCode === 13 || event.keyCode === 32) && dom.hasClass(event.target, 'dropdown-select')) {\n\t\t\tthis.openedWithKeyboard_ = true;\n\t\t\tthis.getDropdown().open();\n\t\t\tevent.preventDefault();\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n/**\n * Attributes definition.\n * @type {!Object}\n * @static\n */\nSelect.ATTRS = {\n\t/**\n\t * The CSS class used by the select menu arrow.\n\t * @type {string}\n\t * @default 'caret'\n\t */\n\tarrowClass: {\n\t\tvalue: 'caret'\n\t},\n\n\t/**\n\t * The CSS class used by the select menu button.\n\t * @type {string}\n\t * @default 'btn btn-default'\n\t */\n\tbuttonClass: {\n\t\tvalidator: core.isString,\n\t\tvalue: 'btn btn-default'\n\t},\n\n\t/**\n\t * The name of the hidden input field\n\t * @type {string}\n\t */\n\thiddenInputName: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * A list representing the select dropdown items. Can be either already a list\n\t * of objects specifying both name and value for each item, or just a list of\n\t * names, in which case the values will be the indexes where the names show up\n\t * on the list.\n\t * @type {!Array<string>|!Array<!{name: string, value: string}>}\n\t * @default []\n\t */\n\titems: {\n\t\tvalidator: val => val instanceof Array,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t/**\n\t * The label that should be used for the select menu when no item is\n\t * selected. If not set, the first item will be selected automatically.\n\t * @type {string}\n\t */\n\tlabel: {\n\t\tvalidator: core.isString\n\t},\n\n\t/**\n\t * The index of the currently selected item, or -1 if none is selected.\n\t * @type {number}\n\t */\n\tselectedIndex: {\n\t\tvalidator: core.isNumber,\n\t\tvalueFn: function() {\n\t\t\treturn this.label || !this.items.length ? -1 : 0;\n\t\t}\n\t}\n};\n\n/**\n * Default element classes.\n * @type {string}\n * @static\n */\nSelect.ELEMENT_CLASSES = 'select';\n\nexport default Select;\nimport JQueryAdapter from 'metal-jquery-adapter/src/JQueryAdapter';JQueryAdapter.register('select', Select);"]}