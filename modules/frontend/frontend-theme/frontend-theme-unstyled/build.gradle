import com.liferay.gradle.plugins.node.tasks.PublishNodeModuleTask
import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.StripPathSegmentsAction

task buildAlloyTheme(type: Copy)
task buildLexicon(type: Copy)
task buildLexiconIcons(type: Copy)
task buildTheme
task publishNodeModule(type: PublishNodeModuleTask)

String alloyVersion = "3.0"
String lexiconVersion = "0.1"

File themeDestinationDir = file("src/main/resources/META-INF/resources/_unstyled");
File thirdPartyDir = file("../../../../portal-web/third-party")

buildAlloyTheme {
	File alloyThemeDestinationDir = new File(themeDestinationDir, "images/aui")
	FileTree alloyZipFileTree = fileTree(dir: thirdPartyDir, include: "alloy-${alloyVersion}*.zip")

	doFirst {
		delete alloyThemeDestinationDir
	}

	filesMatching "build/aui-*/assets/skins/sam/**", new StripPathSegmentsAction(5)
	filesMatching "build/aui-skin-deprecated/images/**", new StripPathSegmentsAction(3)

	from zipTree(alloyZipFileTree.singleFile)

	include "build/aui-*/assets/skins/sam/**.gif", "build/aui-*/assets/skins/sam/**.jpg", "build/aui-*/assets/skins/sam/**.png"
	include "build/aui-skin-deprecated/images/**"

	includeEmptyDirs = false
	into alloyThemeDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, alloyZipFileTree.singleFile, alloyThemeDestinationDir)
	}
}

buildCSS {
	dependsOn buildTheme
}

buildLexicon {
	File lexiconDestinationDir = new File(themeDestinationDir, "css/aui/lexicon")
	FileTree lexiconZipFileTree = fileTree(dir: thirdPartyDir, include: "lexicon-${lexiconVersion}*.zip")

	doFirst {
		delete lexiconDestinationDir
	}

	eachFile {
		if (name in ["atlas.scss", "bootstrap.scss", "lexicon-base.scss"]) {
			filter {
				String line ->

				if (line == "// INSERT CUSTOM EXTENSIONS") {
					line = """\
@import \"../../liferay_variables_custom\";
@import \"../../liferay_variables\";
@import \"../../aui_custom\";
@import \"../../liferay_custom\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import \"../../aui_variables\";
@import \"fonts/alloy-font-awesome/scss/font-awesome\";"""
				}

				return line
			}
		}
		else if (name in ["atlas-variables.scss", "lexicon-base-variables.scss"]) {
			filter {
				String line ->

				if (line == "// INSERT CUSTOM BASE VARS") {
					line = """\
@import \"../../aui_variables\";
@import \"fonts/alloy-font-awesome/scss/variables\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import \"../../liferay_variables_custom\";
@import \"../../liferay_variables\";"""
				}

				return line
			}
		}
	}

	filesMatching "scss/**", new StripPathSegmentsAction(1)
	from zipTree(lexiconZipFileTree.singleFile)

	include "fonts/**"
	include "scss/**"

	includeEmptyDirs = false
	into lexiconDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, lexiconZipFileTree.singleFile, lexiconDestinationDir)
	}
}

buildLexiconIcons {
	File lexiconIconsDestinationDir = new File(themeDestinationDir, "images/lexicon")
	FileTree lexiconZipFileTree = fileTree(dir: thirdPartyDir, include: "lexicon-${lexiconVersion}*.zip")

	doFirst {
		delete lexiconIconsDestinationDir
	}

	filesMatching "images/icons/**", new StripPathSegmentsAction(2)
	from zipTree(lexiconZipFileTree.singleFile)

	include "images/icons/**"
	includeEmptyDirs = false
	into lexiconIconsDestinationDir

	onlyIf {
		!FileUtil.isUpToDate(project, lexiconZipFileTree.singleFile, lexiconIconsDestinationDir)
	}
}

buildTheme {
	dependsOn buildAlloyTheme
	dependsOn buildLexicon
	dependsOn buildLexiconIcons
}

classes {
	dependsOn buildTheme
}

dependencies {
	compile group: "com.liferay.portal", name: "portal-service", version: liferay.portalVersion
	compile group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	compile group: "org.osgi", name: "org.osgi.compendium", version: "5.0.0"
	compile group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
}

liferay {
	deployDir = file("${liferayHome}/osgi/modules")
}

publishNodeModule {
	dependsOn jar
	workingDir = "src/main/resources/META-INF/resources/_unstyled"
}