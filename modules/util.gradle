import com.liferay.gradle.util.StringUtil
import com.liferay.gradle.util.copy.RenameDependencyClosure

buildscript {
	repositories {
		mavenLocal()

		maven {
			url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}

	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "1.0.22"
	}
}

task setUpPortalTools
task wrapper(type: Wrapper)

File portalToolsDir = rootProject.file("../tools/sdk/tmp/portal-tools")

configurations {
	all {
		resolutionStrategy {
			eachDependency {
				DependencyResolveDetails dependencyResolveDetails ->

				if ((dependencyResolveDetails.requested.version == "default") && project.hasProperty(dependencyResolveDetails.requested.name + ".version")) {
					dependencyResolveDetails.useVersion project.properties[dependencyResolveDetails.requested.name + ".version"]
				}
			}
		}
	}

	portalToolsCssBuilder
	portalToolsJasperJspc
	portalToolsJavadocFormatter
	portalToolsLangBuilder
	portalToolsPortalToolsServiceBuilder
	portalToolsPortalToolsUpgradeTableBuilder
	portalToolsPortalToolsWsddBuilder
	portalToolsSonar
	portalToolsSourceFormatter
	portalToolsTldFormatter
	portalToolsWhip
}

dependencies {
	portalToolsCssBuilder group: "com.liferay", name: "com.liferay.css.builder", version: "default"
	portalToolsJasperJspc group: "com.liferay", name: "com.liferay.jasper.jspc", version: "default"
	portalToolsJavadocFormatter group: "com.liferay", name: "com.liferay.javadoc.formatter", version: "default"
	portalToolsLangBuilder group: "com.liferay", name: "com.liferay.lang.builder", version: "default"
	portalToolsPortalToolsServiceBuilder group: "com.liferay", name: "com.liferay.portal.tools.service.builder", version: "default"
	portalToolsPortalToolsUpgradeTableBuilder group: "com.liferay", name: "com.liferay.portal.tools.upgrade.table.builder", version: "default"
	portalToolsPortalToolsWsddBuilder group: "com.liferay", name: "com.liferay.portal.tools.wsdd.builder", version: "default"
	portalToolsSonar group: "org.codehaus.sonar-plugins", name: "sonar-ant-task", version: "2.1"
	portalToolsSourceFormatter group: "com.liferay", name: "com.liferay.source.formatter", version: "default"
	portalToolsTldFormatter group: "com.liferay", name: "com.liferay.tld.formatter", version: "default"
	portalToolsWhip group: "com.liferay", name: "com.liferay.whip", version: "default"
}

repositories {
	mavenLocal()

	maven {
		url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
	}
}

wrapper {
	File wrapperDir = rootDir.parentFile

	distributionUrl = "../../tools/gradle-${gradle.gradleVersion}.LIFERAY-PATCHED-1-bin.zip"

	doLast {
		ant.replace(file: new File(wrapperDir, "gradlew")) {
			replacefilter token: '# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules', value: '''\
# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS -Dgradle.user.home=$APP_HOME/.gradle"'''

			replacefilter token: 'org.gradle.wrapper.GradleWrapperMain "$@"', value: 'org.gradle.wrapper.GradleWrapperMain --init-script=$APP_HOME/modules/init.gradle "$@"'
		}

		ant.replace(file: new File(wrapperDir, "gradlew.bat")) {
			replacefilter token: '@rem Setup the command line', value: '''\
@rem Setup the command line
set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% -Dgradle.user.home=%APP_HOME%\\.gradle'''

			replacefilter token: 'org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%', value: 'org.gradle.wrapper.GradleWrapperMain --init-script=%APP_HOME%\\modules\\init.gradle %CMD_LINE_ARGS%'
		}
	}

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")
}

Collection<Configuration> portalToolsConfigurations = configurations.matching {
	it.name.startsWith "portalTools"
}

portalToolsConfigurations.each {
	Configuration configuration ->

	String dirName = configuration.name.substring(11)

	dirName = dirName.replaceAll(/[A-Z]/) {
		"-" + it.toLowerCase()
	}

	dirName = dirName.substring(1)

	String taskName = "setUp" + StringUtil.capitalize(configuration.name)

	Task configurationTask = tasks.create(name: taskName, type: Copy) {
		from configuration
		into new File(portalToolsDir, dirName)
		rename new RenameDependencyClosure(project, configuration.name)
	}

	setUpPortalTools.dependsOn configurationTask
}