import org.gradle.internal.hash.HashUtil
import org.gradle.internal.hash.HashValue

if (System.properties["http.proxyHost"] == "squid.lax.liferay.com") {
	println "Using proxy ${System.properties['http.proxyHost']}:${System.properties['http.proxyPort']}."

	System.setProperty "repository.url", "http://repository.liferay.com/nexus/content/groups/public"
}

gradle.buildFinished {
	ByteArrayOutputStream errorByteArrayOutputStream = new ByteArrayOutputStream()
	ByteArrayOutputStream outputByteArrayOutputStream = new ByteArrayOutputStream()

	exec {
		commandLine "git", "ls-files", "--exclude-standard", "--others"
		ignoreExitValue = true
		errorOutput = errorByteArrayOutputStream
		standardOutput = outputByteArrayOutputStream
		workingDir = gradle.gradleUserHomeDir
	}

	String errorString = errorByteArrayOutputStream.toString()

	if (!errorString.contains("Not a git repository")) {
		logger.error errorString
	}

	String output = outputByteArrayOutputStream.toString()

	List<String> fileNames = output.readLines()

	fileNames.retainAll {
		it.endsWith ".pom"
	}

	fileNames.each {
		String pomFileName ->

		File pomFile = new File(gradle.gradleUserHomeDir, pomFileName)

		rootProject.ant.fixcrlf encoding: "UTF-8", eol: "lf", file: pomFile, fixlast: false

		HashValue hashValue = HashUtil.sha1(pomFile)

		String hash = hashValue.asHexString()
		File hashDir = pomFile.parentFile

		if (hashDir.name != hash) {
			boolean success = hashDir.renameTo new File(hashDir.parentFile, hash)

			if (!success) {
				delete hashDir
			}
		}
	}
}