import com.liferay.gradle.util.FileUtil

buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "1.0.23"
	}

	repositories {
		if (!Boolean.getBoolean("maven.local.ignore")) {
			mavenLocal()
		}

		maven {
			url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

_setPropertyDefault project, "junit.java.integration.gc", "-Xms512m -Xmx512m -XX:MaxNewSize=32m -XX:MaxPermSize=200m -XX:MaxTenuringThreshold=0 -XX:NewSize=32m -XX:ParallelGCThreads=2 -XX:PermSize=200m -XX:SurvivorRatio=65536 -XX:TargetSurvivorRatio=0 -XX:-UseAdaptiveSizePolicy -XX:+UseParallelOldGC"
_setPropertyDefault project, "junit.java.unit.gc", "-Xms256m -Xmx256m -XX:MaxNewSize=32m -XX:MaxPermSize=64m -XX:MaxTenuringThreshold=0 -XX:NewSize=32m -XX:ParallelGCThreads=2 -XX:PermSize=64m -XX:SurvivorRatio=65536 -XX:TargetSurvivorRatio=0 -XX:-UseAdaptiveSizePolicy -XX:+UseParallelOldGC -XX:-UseSplitVerifier"

apply plugin: "com.liferay.defaults.plugin"
apply plugin: "com.liferay.plugin"

File portalRootDir = _getPortalRootDir(project)

if (portalRootDir) {
	distsDirName = FileUtil.relativize(new File(portalRootDir, "tools/sdk/dist"), buildDir)
	libsDirName = distsDirName
}

Project frontendCommonCssProject = findProject(":frontend:frontend-common-css")

if (frontendCommonCssProject) {
	buildCSS {
		dependsOn {
			FileCollection cssFiles = getCSSFiles()

			if (!cssFiles.empty) {
				return frontendCommonCssProject.path + ":buildCssCommon"
			}
		}

		portalCommonDir = new File(frontendCommonCssProject.projectDir, "tmp/META-INF/resources")
	}
}

pluginManager.withPlugin("com.liferay.maven.plugin.builder") {
	afterEvaluate {
		buildPluginDescriptor {
			pomArtifactId = bundle.instructions["Bundle-SymbolicName"]
		}
	}

	buildPluginDescriptor {
		configurationScopeMapping "provided", "provided"

		ext {
			autoClean = false
		}
	}
}

if (portalRootDir) {
	pluginManager.withPlugin("com.liferay.portal.tools.service.builder") {
		configurations {
			serviceBuilder {
				exclude group: "com.liferay", module: "com.liferay.portal.tools.service.builder"
			}
		}

		dependencies {
			serviceBuilder fileTree(dir: new File(portalRootDir, "tools/sdk/tmp/portal-tools/portal-tools-service-builder"), include: "*.jar")
		}
	}
}

private File _getPortalRootDir(Project project) {
	File dir = project.rootDir.parentFile

	while (true) {
		File portalImplDir = new File(dir, "portal-impl")

		if (portalImplDir.exists()) {
			return dir
		}

		dir = dir.parentFile

		if (!dir) {
			return null
		}
	}
}

private void _setPropertyDefault(Project project, String name, Object value) {
	if (!project.hasProperty(name)) {
		project.ext.set name, value
	}
}