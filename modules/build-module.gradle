import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.copy.StripPathSegmentsAction

import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "1.0.23"
	}

	repositories {
		if (!Boolean.getBoolean("maven.local.ignore")) {
			mavenLocal()
		}

		maven {
			url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: "com.liferay.plugin"
apply plugin: "eclipse"
apply plugin: "findbugs"
apply plugin: "idea"
apply plugin: "pmd"

if (FileUtil.exists(project, "service.xml")) {
	apply plugin: "com.liferay.portal.tools.service.builder"
	apply plugin: "com.liferay.portal.tools.upgrade.table.builder"
	apply plugin: "com.liferay.portal.tools.wsdd.builder"
}

if (FileUtil.exists(project, "wsdl")) {
	apply plugin: "com.liferay.wsdl.builder"
}

if (FileUtil.exists(project, "xsd")) {
	apply plugin: "com.liferay.xsd.builder"
}

liferay {
	portalVersion = project.properties["liferay.portal.version"]
}

File appServerClassesPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/classes")
File appServerLibPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/lib")

distsDirName = FileUtil.relativize(rootProject.file("../tools/sdk/dist"), buildDir)
group = "com.liferay"
libsDirName = distsDirName
sourceCompatibility = "1.7"
targetCompatibility = "1.7"

afterEvaluate {
	project.ext.set("app.server.lib.portal.dir", project.relativePath(appServerLibPortalDir))
	project.ext.set("app.server.portal.dir", project.relativePath(liferay.appServerPortalDir))
	project.ext.set("plugin.full.version", project.version.toString())

	if (project.hasProperty("snapshot") && !project.version.endsWith("-SNAPSHOT")) {
		project.version = project.version + "-SNAPSHOT"
	}

	Iterable<Task> publishNodeModuleTasks = tasks.matching {
		it.class.name.startsWith "com.liferay.gradle.plugins.node.tasks.PublishNodeModuleTask"
	}

	publishNodeModuleTasks.each {
		it.dependsOn jar

		if (!project.version.endsWith("-SNAPSHOT")) {
			uploadArchives.dependsOn it
		}
	}
}

buildCSS {
	dependsOn {
		FileCollection cssFiles = getCSSFiles()

		if (!cssFiles.empty) {
			":frontend:frontend-common-css:buildCssCommon"
		}
	}

	portalCommonDir = new File(rootDir, "frontend/frontend-common-css/tmp/META-INF/resources")
}

buildSoy {
	ext {
		autoClean = false
	}
}

configure([test, testIntegration]) {
	testLogging {
		events = EnumSet.allOf(TestLogEvent)
		exceptionFormat = "full"
		stackTraceFilters = []
	}
}

configurations {
	all {
		resolutionStrategy {
			eachDependency {
				DependencyResolveDetails dependencyResolveDetails ->

				if ((dependencyResolveDetails.requested.version == "default") && project.hasProperty(dependencyResolveDetails.requested.name + ".version")) {
					dependencyResolveDetails.useVersion project.properties[dependencyResolveDetails.requested.name + ".version"]
				}
			}
		}
	}

	portal
	xmltask

	alloyTaglib {
		extendsFrom configurations.runtime
		extendsFrom portal
	}
}

if (FileUtil.exists(project, "docroot")) {
	copyLibs {
		from(appServerLibPortalDir) {
			include "util-bridges.jar", "util-java.jar", "util-taglib.jar"
		}
	}
}

dependencies {
	alloyTaglib rootProject.files("../lib/development/alloy-taglib.jar", "../lib/development/org.freemarker-2.3.17.LIFERAY-PATCHED-1.jar")
	cssBuilder group: "com.liferay", name: "com.liferay.css.builder", version: "default"
	javadocFormatter group: "com.liferay", name: "com.liferay.javadoc.formatter", version: "default"
	langBuilder group: "com.liferay", name: "com.liferay.lang.builder", version: "default"
	pmd group: "com.liferay", name: "com.liferay.pmd", version: "default"

	portal files(appServerClassesPortalDir)
	portal fileTree(dir: appServerLibPortalDir, include: "*.jar")
	portal fileTree(dir: liferay.appServerLibGlobalDir, exclude: "mail.jar", include: "*.jar")
	portal group: "com.liferay", name: "net.sf.jargs", version: "1.0"
	portal group: "com.thoughtworks.qdox", name: "qdox", version: "1.12.1"
	portal group: "javax.activation", name: "activation", version: "1.1"
	portal group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	portal group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"

	sourceFormatter group: "com.liferay", name: "com.liferay.source.formatter", version: "default"

	testCompile group: "com.liferay.portal", name: "portal-test", version: liferay.portalVersion
	testCompile group: "com.liferay.portal", name: "portal-test-internal", version: liferay.portalVersion

	tldFormatter group: "com.liferay", name: "com.liferay.tld.formatter", version: "default"
	xmlFormatter group: "com.liferay", name: "com.liferay.xml.formatter", version: "default"
	xmltask rootProject.files("../lib/development/xmltask.jar")
}

eclipse {
	classpath {
		file {
			whenMerged {
				it.entries.removeAll {
					(it.kind == "lib") && it.path.endsWith(".pom")
				}
			}
		}

		plusConfigurations += [configurations.testIntegrationRuntime]
	}
}

eclipseClasspath {
	ext {
		autoClean = false
	}
}

eclipseProject {
	ext {
		autoClean = false
	}
}

idea {
	module {
		excludeDirs += sourceSets.main.output.classesDir

		iml {
			withXml {
				XmlProvider xmlProvider ->

				if (!FileUtil.exists(project, "src/main/resources/META-INF/resources")) {
					return
				}

				Node node = xmlProvider.node.component.find {
					it.@name == "NewModuleRootManager"
				}

				node.plus {
					NodeBuilder nodeBuilder = new NodeBuilder()

					nodeBuilder.module(name: "NewModuleRootManager") {
						component(name: "FacetManager") {
							facet(name: "Web", type: "web") {
								configuration {
									webroots {
										root relative: "/", url: 'file://$MODULE_DIR$/src/main/resources/META-INF/resources'
									}
								}
							}
						}
					}
				}
			}
		}

		scopes.TEST.plus += [configurations.testIntegrationRuntime]
	}
}

ideaModule {
	ext {
		autoClean = false
	}
}

jsModuleConfigGenerator {
	version = project.properties["nodejs.lfr.module.config.generator.version"]
}

jspC {
	jspCVersion = project.properties["com.liferay.jasper.jspc.version"]
}

jsTranspiler {
	babelVersion = project.properties["nodejs.babel.version"]
	lfrAmdLoaderVersion = project.properties["nodejs.lfr.amd.loader.version"]
}

node {
	npmArgs "--fetch-retries", "10"
	npmArgs "--fetch-retry-maxtimeout", "120000"
	npmArgs "--fetch-retry-mintimeout", "60000"
}

pmd {
	ruleSetFiles = rootProject.files("../tools/sdk/dependencies/net.sourceforge.pmd/rulesets/java/standard-rules.xml")
	ruleSets = []
}

repositories {
	if (!Boolean.getBoolean("maven.local.ignore")) {
		mavenLocal()
	}

	maven {
		url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
	}
}

sourceSets {
	test {
		compileClasspath = configurations.compile + configurations.portal + compileClasspath
		runtimeClasspath = configurations.compile + configurations.portal + runtimeClasspath
	}

	testIntegration {
		compileClasspath = configurations.portal + compileClasspath
		runtimeClasspath = configurations.portal + runtimeClasspath
	}
}

tasks.eclipse {
	dependsOn cleanEclipse
}

testIntegration {
	File testIntegrationResultsDir = file("test-results/integration")

	binResultsDir = new File(testIntegrationResultsDir, "binary/testIntegration")

	doLast {
		String databaseType = System.properties["database.type"]

		if (!databaseType) {
			return
		}

		FileTree fileTree = fileTree(dir: reports.junitXml.destination, exclude: "TEST-*-*.xml", include: "TEST-*.xml")

		ant.taskdef classname: "com.oopsconsultancy.xmltask.ant.XmlTask", classpath: configurations.xmltask.asPath, name: "xmltask"

		fileTree.each {
			File file ->

			String fileTitle = FileUtil.stripExtension(file.name)

			ant.xmltask(dest: new File(file.parentFile, "${fileTitle}-${databaseType}.xml"), source: file) {
				replace path: "/testsuite/@name", withText: "${fileTitle}-${databaseType}"
			}

			delete file
		}
	}

	reports.junitXml.destination = testIntegrationResultsDir
}

whip {
	version = project.properties["com.liferay.whip.version"]
}

pluginManager.withPlugin("com.liferay.alloy.taglib") {
	buildTaglibs {
		classpath = configurations.alloyTaglib
	}
}

pluginManager.withPlugin("com.liferay.maven.plugin.builder") {
	afterEvaluate {
		buildPluginDescriptor {
			pomArtifactId = bundle.instructions["Bundle-SymbolicName"]
		}
	}

	buildPluginDescriptor {
		configurationScopeMapping "provided", "provided"

		ext {
			autoClean = false
		}
	}
}

pluginManager.withPlugin("com.liferay.portal.tools.service.builder") {
	dependencies {
		serviceBuilder fileTree(dir: rootProject.file("../tools/sdk/tmp/portal-tools/portal-tools-service-builder"), include: "*.jar")
	}
}

pluginManager.withPlugin("com.liferay.portal.tools.upgrade.table.builder") {
	dependencies {
		upgradeTableBuilder group: "com.liferay", name: "com.liferay.portal.tools.upgrade.table.builder", version: "default"
	}
}

pluginManager.withPlugin("com.liferay.portal.tools.wsdd.builder") {
	dependencies {
		wsddBuilder group: "com.liferay", name: "com.liferay.portal.tools.wsdd.builder", version: "default"
	}
}

tasks.withType(FindBugs) {
	maxHeapSize = "1g"

	reports {
		html.enabled = true
		xml.enabled = false
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.warnings = false
}

tasks.withType(Pmd) {
	classpath = null
}

if (gradle.hasProperty("testClassGroupIndex")) {
	configure([test, testIntegration]) {
		include gradle.testClasses

		jvmArgs "-Dtest.class.group.index=" + gradle.testClassGroupIndex
		jvmArgs "-Dtest.class.groups=" + gradle.testClassGroups
	}
}

if (System.getenv("JENKINS_HOME")) {
	autoUpdateXml {
		doFirst {
			File webXmlFile = file("docroot/WEB-INF/web.xml")

			if (webXmlFile.exists()) {
				println "Found web.xml before running ${path}:\n${webXmlFile.text}."
			}
			else {
				println "Unable to find web.xml before running ${path}."
			}
		}

		doLast {
			File webXmlFile = new File(buildDir, "updated-web.xml")

			delete webXmlFile

			copy {
				eachFile new StripPathSegmentsAction(1)
				from zipTree(jar.archivePath)
				include "WEB-INF/web.xml"
				into webXmlFile.parentFile

				rename {
					webXmlFile.name
				}
			}

			println "Found web.xml after running ${path}:\n${webXmlFile.text}."
		}
	}

	node {
		nodeUrl = "https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-linux-x64.tar.gz"
	}

	pluginManager.withPlugin("com.liferay.cache") {
		cache {
			forcedCache = true
		}
	}

	startTestableTomcat {
		ext {
			deleteLiferayHome = false
		}
	}
}
