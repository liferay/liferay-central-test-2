import com.liferay.gradle.util.FileUtil

buildscript {
	repositories {
		mavenLocal()

		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}

	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "latest.release"
	}
}

apply plugin: "com.liferay.plugin"
apply plugin: "eclipse"

liferay {
	appServerParentDir = rootProject.file("../../bundles")

	if (deployDir == new File(appServerParentDir, "deploy")) {
		deployDir = new File(liferayHome, "osgi/apps")
	}
}

File appServerClassesPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/classes")
File appServerLibPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/lib")
File moduleFrameworkBaseDir = new File(liferay.liferayHome, "osgi")

group = "com.liferay"
distsDirName = FileUtil.relativize(rootProject.file("../tools/sdk/dist2"), buildDir)
libsDirName = distsDirName

afterEvaluate {
	project.ext.set("app.server.lib.portal.dir", project.relativePath(appServerLibPortalDir))
	project.ext.set("app.server.portal.dir", project.relativePath(liferay.appServerPortalDir))
	project.ext.set("plugin.full.version", project.version.toString())
}

configurations {
	portal
	portalTest
}

dependencies {
	portal files(appServerClassesPortalDir)
	portal fileTree(dir: appServerLibPortalDir, include: "*.jar")
	portal fileTree(dir: liferay.appServerLibGlobalDir, include: "*.jar")
	portal group: "com.liferay", name: "net.sf.jargs", version: "1.0"
	portal group: "com.thoughtworks.qdox", name: "qdox", version: "1.12.1"
	portal group: "javax.activation", name: "activation", version: "1.1"
	portal group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	portal group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"

	portalTest fileTree(dir: new File(moduleFrameworkBaseDir, "test"), include: "portal-test*.jar")
}

eclipseClasspath {
	ext {
		autoClean = false
	}
}

eclipseProject {
	ext {
		autoClean = false
	}
}

repositories {
	mavenLocal()
}

sourceSets {
	main {
		compileClasspath += configurations.portal
	}

	test {
		compileClasspath += configurations.portal + configurations.portalTest
		runtimeClasspath += configurations.portal + configurations.portalTest
	}

	testIntegration {
		compileClasspath += configurations.portal + configurations.portalTest
		runtimeClasspath += configurations.portal + configurations.portalTest
	}
}

pluginManager.withPlugin("com.liferay.maven.plugin.builder") {
	afterEvaluate {
		buildPluginDescriptor {
			pomArtifactId = bundle.instructions["Bundle-SymbolicName"]
		}
	}

	buildPluginDescriptor {
		configurationScopeMapping "provided", "provided"

		ext {
			autoClean = false
		}
	}
}

pluginManager.withPlugin("com.moowork.node") {
	File nodejsDir = new File(liferay.tmpDir, "nodejs")

	task setupNpmCache(type: NpmTask)

	node {
		download = true
		nodeModulesDir = nodejsDir
		npmVersion = project.properties["nodejs.npm.version"]
		version = project.properties["nodejs.version"]
		workDir = nodejsDir
	}

	npmSetup {
		finalizedBy setupNpmCache
	}

	setupNpmCache {
		args = ["config", "set", "cache", new File(nodejsDir, ".cache"), "--global"]
	}

	tasks.withType(NpmTask) {
		if (it != npmSetup) {
			dependsOn npmSetup
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.warnings = false
}