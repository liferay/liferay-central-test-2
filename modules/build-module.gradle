apply plugin: "com.liferay.plugin"

liferay {
	appServerParentDir = rootProject.file("../../bundles")
}

File appServerClassesPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/classes")
File appServerLibPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/lib")
File moduleFrameworkBaseDir = new File(liferay.liferayHome, "osgi")
File sdkDir = rootProject.file("../tools/sdk")

afterEvaluate {
	project.ext.set("app.server.lib.portal.dir", project.relativePath(appServerLibPortalDir))
	project.ext.set("app.server.portal.dir", project.relativePath(liferay.appServerPortalDir))
	project.ext.set("plugin.full.version", project.version.toString())
}

configurations {
	portal
	portalTest
}

dependencies {
	portal files(appServerClassesPortalDir)
	portal fileTree(dir: appServerLibPortalDir, include: "*.jar")
	portal fileTree(dir: liferay.appServerLibGlobalDir, include: "*.jar")
	portal fileTree(dir: new File(sdkDir, "lib"), includes: ["activation.jar", "javax.servlet-api.jar", "jsp-api.jar", "net.sf.jargs.jar", "qdox.jar"])

	portalTest fileTree(dir: new File(moduleFrameworkBaseDir, "test"), include: "portal-test*.jar")
}

ext {
	sdkDestinationDir = new File(sdkDir, "dist2")
}

jar {
	destinationDir = sdkDestinationDir
}

repositories {
	mavenLocal()
}

sourceSets {
	main {
		compileClasspath += configurations.portal
	}

	test {
		compileClasspath += configurations.portal + configurations.portalTest
		runtimeClasspath += configurations.portal + configurations.portalTest
	}

	testIntegration {
		compileClasspath += configurations.portal + configurations.portalTest
		runtimeClasspath += configurations.portal + configurations.portalTest
	}
}

group = "com.liferay"

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.warnings = false
}

if (project.path in [":util:css-builder"]) {
	apply plugin: "com.liferay.maven.plugin.builder"

	afterEvaluate {
		buildPluginDescriptor {
			pomArtifactId = bundle.instructions["Bundle-SymbolicName"]
		}
	}

	buildPluginDescriptor {
		configurationScopeMapping "provided", "provided"

		ext {
			autoClean = false
		}
	}
}