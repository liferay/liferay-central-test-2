import com.liferay.gradle.util.FileUtil

buildscript {
	repositories {
		if (!Boolean.getBoolean("maven.local.ignore")) {
			mavenLocal()
		}

		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}

	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "1.0.17"
	}
}

apply plugin: "com.liferay.plugin"
apply plugin: "eclipse"

File appServerClassesPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/classes")
File appServerLibPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/lib")
File moduleFrameworkBaseDir = new File(liferay.liferayHome, "osgi")

group = "com.liferay"
distsDirName = FileUtil.relativize(rootProject.file("../tools/sdk/dist2"), buildDir)
libsDirName = distsDirName

afterEvaluate {
	project.ext.set("app.server.lib.portal.dir", project.relativePath(appServerLibPortalDir))
	project.ext.set("app.server.portal.dir", project.relativePath(liferay.appServerPortalDir))
	project.ext.set("plugin.full.version", project.version.toString())

	if (project.hasProperty("snapshot") && !project.version.endsWith("-SNAPSHOT")) {
		project.version = project.version + "-SNAPSHOT"
	}
}

buildCSS {
	dependsOn ":frontend:frontend-common-css:buildCssCommon"
	portalCommonDirName = relativePath(new File(rootDir, "frontend/frontend-common-css/tmp/META-INF/resources/html/css/common"))
}

configurations {
	all {
		resolutionStrategy {
			eachDependency {
				DependencyResolveDetails dependencyResolveDetails ->

				if ((dependencyResolveDetails.requested.version == "default") && project.hasProperty(dependencyResolveDetails.requested.name + ".version")) {
					dependencyResolveDetails.useVersion project.properties[dependencyResolveDetails.requested.name + ".version"]
				}
			}
		}
	}

	portal
	portalEclipse
	portalTest

	whenObjectAdded {
		Configuration configuration ->

		if (configuration.name == "portalToolsThumbnailBuilder") {
			configuration.extendsFrom portal
		}
	}
}

if (FileUtil.exists(project, "docroot")) {
	copyLibs {
		from(appServerLibPortalDir) {
			include "util-bridges.jar", "util-java.jar", "util-taglib.jar"
		}
	}
}

dependencies {
	cssBuilder group: "com.liferay", name: "com.liferay.css.builder", version: "default"
	javadocFormatter group: "com.liferay", name: "com.liferay.javadoc.formatter", version: "default"
	langBuilder group: "com.liferay", name: "com.liferay.lang.builder", version: "default"

	portal files(appServerClassesPortalDir)
	portal fileTree(dir: appServerLibPortalDir, include: "*.jar")
	portal fileTree(dir: liferay.appServerLibGlobalDir, include: "*.jar")
	portal group: "com.liferay", name: "net.sf.jargs", version: "1.0"
	portal group: "com.thoughtworks.qdox", name: "qdox", version: "1.12.1"
	portal group: "javax.activation", name: "activation", version: "1.1"
	portal group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	portal group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"

	portalEclipse group: "biz.aQute.bnd", name: "biz.aQute.bnd", version: "2.4.1"
	portalEclipse group: "commons-logging", name: "commons-logging", version: "1.1.3"
	portalEclipse group: "javax.activation", name: "activation", version: "1.1"
	portalEclipse group: "javax.annotation", name: "jsr250-api", version: "1.0"
	portalEclipse group: "javax.mail", name: "mail", version: "1.4"
	portalEclipse group: "javax.portlet", name: "portlet-api", version: "2.0"
	portalEclipse group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	portalEclipse group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"
	portalEclipse group: "log4j", name: "log4j", version: "1.2.17"

	portalTest fileTree(dir: new File(moduleFrameworkBaseDir, "test"), include: "portal-test*.jar")
	serviceBuilder group: "com.liferay", name: "com.liferay.portal.tools.service.builder", version: "default"
	sourceFormatter group: "com.liferay", name: "com.liferay.source.formatter", version: "default"
	tldFormatter group: "com.liferay", name: "com.liferay.tld.formatter", version: "default"
	upgradeTableBuilder group: "com.liferay", name: "com.liferay.portal.tools.upgrade.table.builder", version: "default"
	wsddBuilder group: "com.liferay", name: "com.liferay.portal.tools.wsdd.builder", version: "dependencies"
	xmlFormatter group: "com.liferay", name: "com.liferay.xml.formatter", version: "default"
}

eclipse {
	classpath {
		file {
			whenMerged {
				it.entries.removeAll {
					(it.kind == "lib") && it.path.endsWith(".pom")
				}
			}

			withXml {
				Node node = it.asNode()

				node.appendNode "classpathentry", [kind: "src", path: "/portal-master"]

				["portal-service", "util-bridges", "util-java", "util-taglib"].each {
					node.appendNode "classpathentry", [kind: "lib", path: "/portal-master/${it}/${it}.jar"]
				}
			}
		}

		plusConfigurations += [configurations.portalEclipse]
	}
}

eclipseClasspath {
	ext {
		autoClean = false
	}
}

eclipseProject {
	ext {
		autoClean = false
	}
}

jspC {
	jspCVersion = project.properties["com.liferay.jasper.jspc.version"]
}

repositories {
	if (!Boolean.getBoolean("maven.local.ignore")) {
		mavenLocal()
	}

	maven {
		url "http://cdn.repository.liferay.com/nexus/content/groups/public"
	}
}

sourceSets {
	FileCollection portalJarsFileCollection = fileTree(dir: appServerLibPortalDir, include: "util-slf4j.jar")

	main {
		compileClasspath += configurations.portal
	}

	test {
		compileClasspath = portalJarsFileCollection + compileClasspath + configurations.portal + configurations.portalTest
		runtimeClasspath = portalJarsFileCollection + runtimeClasspath + configurations.portal + configurations.portalTest
	}

	testIntegration {
		compileClasspath = configurations.portal + compileClasspath + configurations.portalTest
		runtimeClasspath = configurations.portal + runtimeClasspath + configurations.portalTest
	}
}

whip {
	version = project.properties["com.liferay.whip.version"]
}

pluginManager.withPlugin("com.liferay.maven.plugin.builder") {
	afterEvaluate {
		buildPluginDescriptor {
			pomArtifactId = bundle.instructions["Bundle-SymbolicName"]
		}
	}

	buildPluginDescriptor {
		configurationScopeMapping "provided", "provided"

		ext {
			autoClean = false
		}
	}
}

pluginManager.withPlugin("com.moowork.node") {
	File nodejsDir = new File(buildDir, "nodejs")

	task setupNpmCache(type: NpmTask)

	node {
		download = true
		nodeModulesDir = nodejsDir
		npmVersion = project.properties["nodejs.npm.version"]
		version = project.properties["nodejs.version"]
		workDir = nodejsDir
	}

	npmSetup {
		finalizedBy setupNpmCache
	}

	setupNpmCache {
		args = ["config", "set", "cache", new File(nodejsDir, ".cache"), "--global"]
	}

	tasks.withType(NpmTask) {
		if (it != npmSetup) {
			dependsOn npmSetup
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.warnings = false
}

String testClassGroupIndex = System.getProperty("test.class.group.index")

if (testClassGroupIndex) {
	Properties properties = new Properties()

	File file = new File(rootDir, "../test.class.file.names.properties")

	properties.load(new StringReader(file.text.replace("\\", "/")))

	String testClassGroup = properties["TEST_CLASS_GROUP_" + testClassGroupIndex]
	String testClassGroups = properties["TEST_CLASS_GROUPS"]

	List<String> testClasses = testClassGroup.tokenize(",")

	configure([test, testIntegration]) {
		include testClasses

		jvmArgs "-Dtest.class.group.index=" + testClassGroupIndex
		jvmArgs "-Dtest.class.groups=" + testClassGroups
	}

	if (testClassGroupIndex == "0") {
		test.finalizedBy compileJSP
	}
}