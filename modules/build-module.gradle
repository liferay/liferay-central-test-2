import com.liferay.gradle.util.FileUtil

import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "1.0.23"
	}

	repositories {
		if (!Boolean.getBoolean("maven.local.ignore")) {
			mavenLocal()
		}

		maven {
			url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

_setPropertyDefault project, "junit.java.integration.gc", "-Xms512m -Xmx512m -XX:MaxNewSize=32m -XX:MaxPermSize=200m -XX:MaxTenuringThreshold=0 -XX:NewSize=32m -XX:ParallelGCThreads=2 -XX:PermSize=200m -XX:SurvivorRatio=65536 -XX:TargetSurvivorRatio=0 -XX:-UseAdaptiveSizePolicy -XX:+UseParallelOldGC"
_setPropertyDefault project, "junit.java.unit.gc", "-Xms256m -Xmx256m -XX:MaxNewSize=32m -XX:MaxPermSize=64m -XX:MaxTenuringThreshold=0 -XX:NewSize=32m -XX:ParallelGCThreads=2 -XX:PermSize=64m -XX:SurvivorRatio=65536 -XX:TargetSurvivorRatio=0 -XX:-UseAdaptiveSizePolicy -XX:+UseParallelOldGC -XX:-UseSplitVerifier"

_setPropertyDefault project, "nodejs.npm.module.author", "Nathan Cavanaugh <nathan.cavanaugh@liferay.com> (https://github.com/natecavanaugh)"
_setPropertyDefault project, "nodejs.npm.module.bugs.url", "https://issues.liferay.com/"
_setPropertyDefault project, "nodejs.npm.module.license", "LGPL"
_setPropertyDefault project, "nodejs.npm.module.repository", "liferay/liferay-portal"

apply plugin: "com.liferay.plugin"
apply plugin: "eclipse"
apply plugin: "findbugs"
apply plugin: "idea"

if (FileUtil.exists(project, "service.xml")) {
	apply plugin: "com.liferay.portal.tools.service.builder"
	apply plugin: "com.liferay.portal.tools.upgrade.table.builder"
	apply plugin: "com.liferay.portal.tools.wsdd.builder"
}

if (FileUtil.exists(project, "wsdl")) {
	apply plugin: "com.liferay.wsdl.builder"
}

if (FileUtil.exists(project, "xsd")) {
	apply plugin: "com.liferay.xsd.builder"
}

File appServerClassesPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/classes")
File appServerLibPortalDir = new File(liferay.appServerPortalDir, "WEB-INF/lib")
File portalRootDir = _getPortalRootDir(project)

if (portalRootDir) {
	distsDirName = FileUtil.relativize(new File(portalRootDir, "tools/sdk/dist"), buildDir)
	libsDirName = distsDirName
}

group = "com.liferay"
sourceCompatibility = "1.7"
targetCompatibility = "1.7"

afterEvaluate {
	project.ext.set "app.server.lib.portal.dir", project.relativePath(appServerLibPortalDir)
	project.ext.set "app.server.portal.dir", project.relativePath(liferay.appServerPortalDir)
	project.ext.set "plugin.full.version", project.version.toString()

	if (project.hasProperty("snapshot") && !project.version.endsWith("-SNAPSHOT")) {
		project.version = project.version + "-SNAPSHOT"
	}

	if (!project.version.endsWith("-SNAPSHOT")) {
		Iterable<Task> publishNodeModuleTasks = tasks.matching {
			it.class.name.startsWith "com.liferay.gradle.plugins.node.tasks.PublishNodeModuleTask"
		}

		publishNodeModuleTasks.each {
			uploadArchives.dependsOn it
		}
	}
}

Project frontendCommonCssProject = findProject(":frontend:frontend-common-css")

if (frontendCommonCssProject) {
	buildCSS {
		dependsOn {
			FileCollection cssFiles = getCSSFiles()

			if (!cssFiles.empty) {
				return frontendCommonCssProject.path + ":buildCssCommon"
			}
		}

		portalCommonDir = new File(frontendCommonCssProject.projectDir, "tmp/META-INF/resources")
	}
}

configure([test, testIntegration]) {
	testLogging {
		events = EnumSet.allOf(TestLogEvent)
		exceptionFormat = "full"
		stackTraceFilters = []
	}
}

configurations {
	all {
		resolutionStrategy {
			eachDependency {
				DependencyResolveDetails dependencyResolveDetails ->

				if (dependencyResolveDetails.requested.group == "com.liferay.portal") {
					dependencyResolveDetails.useVersion liferay.portalVersion
				}
			}
		}
	}

	portal
	portalTest

	alloyTaglib {
		extendsFrom configurations.runtime
		extendsFrom portal
	}
}

dependencies {
	alloyTaglib group: "com.liferay", name: "com.liferay.alloy.taglib", version: "1.1.6"
	alloyTaglib group: "com.liferay", name: "org.freemarker", version: "2.3.17.LIFERAY-PATCHED-1"

	cssBuilder group: "com.liferay", name: "com.liferay.css.builder", version: "1.0.11"
	javadocFormatter group: "com.liferay", name: "com.liferay.javadoc.formatter", version: "1.0.8"
	jspCTool group: "com.liferay", name: "com.liferay.jasper.jspc", version: "1.0.4"
	jspCTool group: "org.apache.ant", name: "ant", version: "1.9.4"
	langBuilder group: "com.liferay", name: "com.liferay.lang.builder", version: "1.0.2"

	portal files(appServerClassesPortalDir)
	portal fileTree(dir: appServerLibPortalDir, include: "*.jar")
	portal fileTree(dir: liferay.appServerLibGlobalDir, exclude: "mail.jar", include: "*.jar")
	portal group: "com.liferay", name: "net.sf.jargs", version: "1.0"
	portal group: "com.thoughtworks.qdox", name: "qdox", version: "1.12.1"
	portal group: "javax.activation", name: "activation", version: "1.1"
	portal group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	portal group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"

	portalTest group: "com.liferay.portal", name: "portal-test", version: liferay.portalVersion
	portalTest group: "com.liferay.portal", name: "portal-test-internal", version: liferay.portalVersion

	sourceFormatter group: "com.liferay", name: "com.liferay.source.formatter", version: "1.0.97"

	testCompile group: "org.powermock", name: "powermock-api-mockito", version: "1.6.1"
	testCompile group: "org.powermock", name: "powermock-core", version: "1.6.1"
	testCompile group: "org.powermock", name: "powermock-module-junit4", version: "1.6.1"
	testCompile group: "org.springframework", name: "spring-test", version: "3.2.15.RELEASE"

	tldFormatter group: "com.liferay", name: "com.liferay.tld.formatter", version: "1.0.0"
	whip group: "com.liferay", name: "com.liferay.whip", version: "1.0.0"
	xmlFormatter group: "com.liferay", name: "com.liferay.xml.formatter", version: "1.0.0"
}

eclipse {
	classpath {
		file {
			whenMerged {
				it.entries.removeAll {
					(it.kind == "lib") && it.path.endsWith(".pom")
				}
			}
		}

		plusConfigurations += [configurations.portalTest]
	}
}

idea {
	module {
		excludeDirs += sourceSets.main.output.classesDir

		iml {
			withXml {
				XmlProvider xmlProvider ->

				if (!FileUtil.exists(project, "src/main/resources/META-INF/resources")) {
					return
				}

				Node node = xmlProvider.node.component.find {
					it.@name == "NewModuleRootManager"
				}

				node.plus {
					NodeBuilder nodeBuilder = new NodeBuilder()

					nodeBuilder.module(name: "NewModuleRootManager") {
						component(name: "FacetManager") {
							facet(name: "Web", type: "web") {
								configuration {
									webroots {
										root relative: "/", url: 'file://$MODULE_DIR$/src/main/resources/META-INF/resources'
									}
								}
							}
						}
					}
				}
			}
		}

		scopes.TEST.plus += [configurations.portalTest]
	}
}

jsModuleConfigGenerator {
	version = "1.1.7"
}

jsTranspiler {
	babelVersion = "5.8.23"
	lfrAmdLoaderVersion = "1.3.5"
}

repositories {
	if (!Boolean.getBoolean("maven.local.ignore")) {
		mavenLocal()
	}

	maven {
		url System.properties["repository.url"] ?: "http://cdn.repository.liferay.com/nexus/content/groups/public"
	}
}

sourceSets {
	test {
		compileClasspath = configurations.compile + configurations.portal + compileClasspath + configurations.portalTest
		runtimeClasspath = configurations.compile + configurations.portal + runtimeClasspath + configurations.portalTest
	}

	testIntegration {
		compileClasspath = configurations.portal + compileClasspath + configurations.portalTest
		runtimeClasspath = configurations.portal + runtimeClasspath + configurations.portalTest
	}
}

tasks.eclipse {
	dependsOn cleanEclipse
}

testIntegration {
	File testIntegrationResultsDir = file("test-results/integration")

	binResultsDir = new File(testIntegrationResultsDir, "binary/testIntegration")
	reports.junitXml.destination = testIntegrationResultsDir
}

pluginManager.withPlugin("com.liferay.alloy.taglib") {
	buildTaglibs {
		classpath = configurations.alloyTaglib
	}
}

pluginManager.withPlugin("com.liferay.maven.plugin.builder") {
	afterEvaluate {
		buildPluginDescriptor {
			pomArtifactId = bundle.instructions["Bundle-SymbolicName"]
		}
	}

	buildPluginDescriptor {
		configurationScopeMapping "provided", "provided"

		ext {
			autoClean = false
		}
	}
}

pluginManager.withPlugin("com.liferay.portal.tools.service.builder") {
	dependencies {
		if (portalRootDir) {
			serviceBuilder fileTree(dir: new File(portalRootDir, "tools/sdk/tmp/portal-tools/portal-tools-service-builder"), include: "*.jar")
		}
		else {
			serviceBuilder group: "com.liferay", name: "com.liferay.portal.tools.service.builder", version: "1.0.64"
		}
	}
}

pluginManager.withPlugin("com.liferay.portal.tools.upgrade.table.builder") {
	dependencies {
		upgradeTableBuilder group: "com.liferay", name: "com.liferay.portal.tools.upgrade.table.builder", version: "1.0.2"
	}
}

pluginManager.withPlugin("com.liferay.portal.tools.wsdd.builder") {
	dependencies {
		wsddBuilder group: "com.liferay", name: "com.liferay.portal.tools.wsdd.builder", version: "1.0.4"
	}
}

tasks.withType(FindBugs) {
	maxHeapSize = "1g"

	reports {
		html.enabled = true
		xml.enabled = false
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.warnings = false
}

private File _getPortalRootDir(Project project) {
	File dir = project.rootDir.parentFile

	while (true) {
		File portalImplDir = new File(dir, "portal-impl")

		if (portalImplDir.exists()) {
			return dir
		}

		dir = dir.parentFile

		if (!dir) {
			return null
		}
	}
}

private void _setPropertyDefault(Project project, String name, Object value) {
	if (!project.hasProperty(name)) {
		project.ext.set name, value
	}
}