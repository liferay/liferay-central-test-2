diff --git a/org/phidias/compile/BundleJavaManager.java b/org/phidias/compile/BundleJavaManager.java
index f8adf8c..cb3aeeb 100644
--- a/org/phidias/compile/BundleJavaManager.java
+++ b/org/phidias/compile/BundleJavaManager.java
@@ -25,6 +25,7 @@ import java.net.URL;/* @generated */
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -110,7 +111,21 @@ public class BundleJavaManager
 			Bundle curBundle = providerWiring.getBundle();
 
 			if (_strict && (curBundle.getBundleId() == 0)) {
-				_systemBundleWiring = providerWiring;
+				List<BundleCapability> bundleCapabilities =
+					providerWiring.getCapabilities(
+						BundleRevision.PACKAGE_NAMESPACE);
+
+				for (BundleCapability bundleCapability : bundleCapabilities) {
+					Map<String, Object> attributes =
+						bundleCapability.getAttributes();
+
+					Object packageNamespace = attributes.get(
+						BundleRevision.PACKAGE_NAMESPACE);
+
+					if (packageNamespace != null) {
+						_systemCapabilities.add(packageNamespace);
+					}
+				}
 			}
 
 			if (_log.isEnabled()) {
@@ -121,11 +136,6 @@ public class BundleJavaManager
 
 			_bundleWirings.add(providerWiring);
 		}
-
-		if (_strict && (_systemBundleWiring != null)) {
-			_systemCapabilities = _systemBundleWiring.getCapabilities(
-				BundleRevision.PACKAGE_NAMESPACE);
-		}
 	}
 
 	public void addBundleRequirement(BundleRequirement bundleRequirement) {
@@ -321,27 +331,7 @@ public class BundleJavaManager
 		// if mode is strict. Otherwise, allow loading classes from the defined
 		// classpath.
 
-		return (_systemBundleWiring != null) &&
-			hasPackageCapability(_systemCapabilities, packageName);
-	}
-
-	private boolean hasPackageCapability(
-		List<BundleCapability> capabilities, String packageName) {
-
-		for (BundleCapability capability : capabilities) {
-			Map<String, Object> attributes = capability.getAttributes();
-
-			Object packageAttribute = attributes.get(
-				BundleRevision.PACKAGE_NAMESPACE);
-
-			if ((packageAttribute != null) &&
-				packageAttribute.equals(packageName)) {
-
-				return true;
-			}
-		}
-
-		return false;
+		return _systemCapabilities.contains(packageName);
 	}
 
 	private void list(
@@ -426,7 +416,6 @@ public class BundleJavaManager
 	private List<BundleRequirement> _packageRequirements;
 	private ResourceResolver _resourceResolver;
 	private boolean _strict;
-	private BundleWiring _systemBundleWiring;
-	private List<BundleCapability> _systemCapabilities;
+	private final Set<Object> _systemCapabilities = new HashSet<Object>();
 
 }
\ No newline at end of file
