<?xml version="1.0"?>

<project name="portal-test-batch" basedir="." xmlns:antelope="antlib:ise.antelope.tasks" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="build-test.xml" />

	<condition else="0" property="axis.variable" value="${env.AXIS_VARIABLE}">
		<isset property="env.AXIS_VARIABLE" />
	</condition>

	<property name="default.test.results.axis.dir" value="${default.test.results.dir}/test-suite" />
	<property name="default.test.results.axis.file.name" value="TESTS-${test.batch.name}_${axis.variable}_axis.xml" />
	<property name="default.test.results.dir" value="${project.dir}/test-results" />
	<property name="default.test.results.suite.dir" value="${default.test.results.dir}/test-suite" />
	<property name="default.test.results.suite.file.name" value="TESTS-${test.batch.name}_${axis.variable}_suite.xml" />

	<macrodef name="apply-properties-to-testray-results">
		<attribute name="test.results.file" />

		<sequential>
			<property name="test.suite.properties">
				<![CDATA[
					<environments>
						<environment type="Application Server" option="${env.option.app.server}" />
						<environment type="Browser" option="${env.option.browser}" />
						<environment type="Database" option="${env.option.database}" />
						<environment type="Java JDK" option="${env.option.java.jdk}" />
						<environment type="Operating System" option="${env.option.operating.system}" />
					</environments>
					<properties>
						<property name="app.server.type" value="${app.server.type}" />
						<property name="app.server.version" value="${app.server.version}" />
						<property name="browser.type" value="${browser.type}" />
						<property name="browser.version" value="${browser.version}" />
						<property name="database.type" value="${database.type}" />
						<property name="database.version" value="${database.version}" />
						<property name="liferay.compare.urls" value="${liferay.compare.urls}" />
						<property name="liferay.plugins.git.id" value="${liferay.plugins.git.id}" />
						<property name="liferay.portal.branch" value="${liferay.portal.branch}" />
						<property name="liferay.portal.bundle" value="${liferay.portal.bundle}" />
						<property name="liferay.portal.git.id" value="${liferay.portal.git.id}" />
						<property name="java.jdk.type" value="${java.jdk.type}" />
						<property name="java.jdk.version" value="${java.jdk.version}" />
						<property name="operating.system.type" value="${operating.system.type}" />
						<property name="operating.system.version" value="${operating.system.version}" />
						<property name="testray.build.name" value="${testray.build.name}" />
						<property name="testray.build.time" value="${testray.build.time}" />
						<property name="testray.build.type" value="${testray.build.type}" />
						<property name="testray.product.type" value="${testray.product.type}" />
						<property name="testray.product.version" value="${testray.product.version}" />
						<property name="testray.project.name" value="${testray.project.name}" />
						<property name="testray.run.id" value="${testray.run.id}" />
					</properties>
				]]>
			</property>

			<replaceregexp
				file="@{test.results.file}"
				match="&lt;testcase[^&gt;]*&gt;"
				replace="${test.suite.properties}\0"
			/>

			<if>
				<isset property="testray.logs.report" />
				<then>
					<property name="test.case.attachments">
						<![CDATA[
							<attachments>
								<file name="console.output" value="${testray.logs.console}" />
								<file name="report.html" value="${testray.logs.report}" />
							</attachments>
						]]>
					</property>
				</then>
				<else>
					<property name="test.case.attachments">
						<![CDATA[
							<attachments>
								<file name="console.output" value="${testray.logs.console}" />
							</attachments>
						]]>
					</property>
				</else>
			</if>

			<property name="test.case.properties">
				<![CDATA[
					<properties>
						<property name="testray.case.defect" value="${testray.case.defect}" />
						<property name="testray.component.names" value="${testray.component.names}" />
						<property name="testray.main.component.name" value="${testray.main.component.name}" />
						<property name="testray.team.name" value="${testray.team.name}" />
						<property name="testray.testcase.description" value="${testray.testcase.description}" />
						<property name="testray.testcase.name" value="${testray.testcase.name}" />
						<property name="testray.testcase.priority" value="${testray.testcase.priority}" />
						<property name="testray.testcase.product.edition" value="${testray.testcase.product.edition}" />
					</properties>
				]]>
			</property>

			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="(&lt;/?)error"
				replace="\1failure"
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="(&lt;failure\s*)type"
				replace="\1message"
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="&lt;testcase[^&gt;]*&gt;"
				replace="\0${test.case.attachments}${line.separator}${test.case.properties}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="apply-testcase-name-to-testray-results">
		<attribute name="test.results.file" />

		<sequential>
			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="(.*classname=&quot;\S+\.(\w+).*name=&quot;(\w+)[\s\S]+?)(\$\{testray\.testcase\.name\})"
				replace="\1\2#\3"
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="\$\{testray\.testcase\.name\}"
				replace="${testray.main.component.name}"
			/>

			<if>
				<contains string="@{test.results.file}" substring="EvaluateLog" />
				<then>
					<replaceregexp
						file="@{test.results.file}"
						flags="g"
						match="testray\.testcase\.name.*(?=&quot;)"
						replace="\0_EvaluateLog"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="build-testray-result">
		<attribute name="test.results.file" />

		<sequential>
			<echo>Build testray result: @{test.results.file}.</echo>

			<format-testray-results test.results.file="@{test.results.file}" />

			<clean-testray-results test.results.file="@{test.results.file}" />

			<apply-properties-to-testray-results test.results.file="@{test.results.file}" />

			<apply-testcase-name-to-testray-results test.results.file="@{test.results.file}" />

			<format-testray-results test.results.file="@{test.results.file}" />
		</sequential>
	</macrodef>

	<macrodef name="build-testray-results">
		<attribute default="${default.test.results.dir}" name="test.results.dir" />
		<attribute default="**/TEST-*.xml" name="test.results.fileset" />

		<sequential>
			<for param="file.name">
				<path>
					<fileset dir="@{test.results.dir}" erroronmissingdir="false">
						<include name="@{test.results.fileset}" />
					</fileset>
				</path>
				<sequential>
					<build-testray-result test.results.file="@{file.name}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="check-deprecated-method">
		<sequential>
			<if>
				<and>
					<available file="javac.output.txt" />
					<isset property="env.TOP_LEVEL_SHARED_DIR" />
				</and>
				<then>
					<copy file="javac.output.txt" tofile="${env.TOP_LEVEL_SHARED_DIR}/javac.output.txt" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="clean-restart-sybase">
		<attribute name="retry" default="false" />
		<sequential>
			<exec executable="service">
				<arg line="sybase stop" />
			</exec>

			<waitfor maxwait="60" maxwaitunit="second">
				<not>
					<socket server="localhost" port="5000" />
				</not>
			</waitfor>

			<sleep if:true="@{retry}" seconds="10" />

			<antcall target="clean-up-sybase-processes" />

			<if if:true="@{retry}">
				<available file="/opt/sybase.tar.gz" />
				<then>
					<delete dir="/opt/sybase" />

					<exec executable="tar" failonerror="true">
						<arg line="xf /opt/sybase.tar.gz -C /" />
					</exec>

					<exec executable="hostname" failonerror="true" outputproperty="hostname" />

					<echo file="/opt/sybase/interfaces">lportal
		master tcp ether ${hostname} 5000
		query tcp ether ${hostname} 5000
					</echo>
				</then>
				<else>
					<fail message="Unable to reset Sybase installation due to missing /opt/sybase.tar.gz." />
				</else>
			</if>

			<exec executable="service" failonerror="true">
				<arg line="sybase start" />
			</exec>

			<waitfor maxwait="60" maxwaitunit="second">
				<socket server="localhost" port="5000" />
			</waitfor>

			<sleep if:true="@{retry}" seconds="10" />
		</sequential>
	</macrodef>

	<macrodef name="clean-testray-results">
		<attribute name="test.results.file" />

		<sequential>
			<replaceregexp
				file="@{test.results.file}"
				flags="gm"
				match="^\s*&lt;/?attachments[^&gt;]*&gt;[\s]"
				replace=""
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="gm"
				match="^\s*&lt;/?environment[^&gt;]*&gt;[\s]"
				replace=""
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="gm"
				match="^\s*&lt;/?file[^&gt;]*&gt;[\s]"
				replace=""
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="gm"
				match="^\s*&lt;/?propert[^&gt;]*&gt;[\s]"
				replace=""
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="gm"
				match="&lt;testcase[^&lt;]*?&lt;skipped[\s\S]*?testcase&gt;"
				replace=""
			/>
		</sequential>
	</macrodef>

	<macrodef name="copy-testray-results">
		<attribute default="${default.test.results.dir}" name="test.results.dest.dir" />
		<attribute default="**/TEST-*.xml" name="test.results.fileset" />

		<sequential>
			<copy flatten="true" todir="@{test.results.dest.dir}">
				<fileset dir="modules" erroronmissingdir="false">
					<include name="@{test.results.fileset}" />
				</fileset>
				<fileset dir="portal-impl/test-results" erroronmissingdir="false">
					<include name="@{test.results.fileset}" />
				</fileset>
				<fileset dir="portal-service/test-results" erroronmissingdir="false">
					<include name="@{test.results.fileset}" />
				</fileset>
				<fileset dir="portal-web/test-results" erroronmissingdir="false">
					<include name="@{test.results.fileset}" />
				</fileset>
				<fileset dir="util-java/test-results" erroronmissingdir="false">
					<include name="@{test.results.fileset}" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="database-test-action">
		<attribute name="database.type" />
		<element name="action" />

		<sequential>
			<local name="database.type" />

			<property name="database.type" value="@{database.type}" />

			<local name="database.service.executable" />

			<get-database-property property.name="database.service.executable" />

			<local name="database.service.cmd.start" />

			<get-database-property property.name="database.service.cmd.start" />

			<local name="database.service.cmd.stop" />

			<get-database-property property.name="database.service.cmd.stop" />

			<action />
		</sequential>
	</macrodef>

	<macrodef name="database-test-run-test">
		<attribute name="database.type" />
		<attribute default="${database.@{database.type}.version}" name="database.version" />
		<attribute name="stop.app.server" default="false" />
		<element name="test-action" />

		<sequential>
			<var name="database.type" value="@{database.type}" />
			<var name="database.version" value="@{database.version}" />

			<database-test-action database.type="@{database.type}">
				<action>
					<exec executable="${database.service.executable}">
						<arg line="${database.service.cmd.stop}" />
					</exec>
				</action>
			</database-test-action>

			<database-test-action database.type="@{database.type}">
				<action>
					<set-portal-impl-portal-ext-properties />

					<set-portal-impl-portal-test-ext-properties />

					<set-portal-impl-system-ext-properties />

					<exec executable="${database.service.executable}" failonerror="true">
						<arg line="${database.service.cmd.start}" />
					</exec>

					<antcall target="copy-optional-jars" inheritall="false" >
						<param name="database.type" value="@{database.type}" />
						<param name="todir" value="lib/development" />
					</antcall>

					<antcall target="copy-optional-jars" inheritall="false" >
						<param name="database.type" value="@{database.type}" />
						<param name="todir" value="${app.server.lib.global.dir}" />
					</antcall>

					<antcall target="rebuild-database" inheritall="false" >
						<param name="database.type" value="@{database.type}" />
					</antcall>

					<test-action />

					<if if:true="@{stop.app.server}">
						<available file=".testable.portal.started" />
						<then>
							<antcall target="stop-app-server" />

							<delete file=".testable.portal.started" failonerror="false" />
						</then>
					</if>

					<exec executable="${database.service.executable}" failonerror="true">
						<arg line="${database.service.cmd.stop}" />
					</exec>
				</action>
			</database-test-action>
		</sequential>
	</macrodef>

	<macrodef name="format-testray-results">
		<attribute name="test.results.file" />

		<sequential>
			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="\^"
				replace=""
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="gm"
				match="&gt;([^&gt;^&lt;]*)&lt;"
				replace="&gt;${line.separator}&lt;"
			/>

			<replaceregexp
				file="@{test.results.file}"
				flags="g"
				match="(\s*&lt;testcase[^/\n]*)/&gt;"
				replace="\1&gt;${line.separator}&lt;/testcase&gt;"
			/>
		</sequential>
	</macrodef>

	<macrodef name="generate-testray-axis-result">
		<attribute default="" name="job.failure.message" />
		<attribute default="${default.test.results.axis.dir}" name="test.results.axis.dir" />
		<attribute default="${default.test.results.axis.file.name}" name="test.results.axis.file.name" />

		<sequential>
			<local name="test.results.axis.file" />

			<property name="test.results.axis.file" value="@{test.results.axis.dir}/@{test.results.axis.file.name}" />

			<echo>Generate axis result ${test.results.axis.file}.</echo>

			<var name="build.name" value="${env.JOB_NAME}" />

			<if>
				<isset property="env.JOB_VARIANT" />
				<then>
					<var name="build.name" value="${env.JOB_NAME}_${env.JOB_VARIANT}" />
				</then>
			</if>

			<var name="job.failure.report" unset="true" />

			<if>
				<equals arg1="@{job.failure.message}" arg2="" />
				<then>
					<property name="job.failure.report" value="" />
				</then>
				<else>
					<property name="job.failure.report">
						<![CDATA[
							<failure message="@{job.failure.message}">
								@{job.failure.message}
							</failure>
						]]>
					</property>
				</else>
			</if>

			<echo file="${test.results.axis.file}">
				<![CDATA[
					<testsuite errors="0" failures="0" name="com.liferay.jenkins.Jenkins" skipped="0" tests="1" time="0">
						<environments>
							<environment type="Application Server" option="${env.option.app.server}" />
							<environment type="Browser" option="${env.option.browser}" />
							<environment type="Database" option="${env.option.database}" />
							<environment type="Java JDK" option="${env.option.java.jdk}" />
							<environment type="Operating System" option="${env.option.operating.system}" />
						</environments>

						<properties>
							<property name="app.server.type" value="${app.server.type}" />
							<property name="app.server.version" value="${app.server.version}" />
							<property name="browser.type" value="${browser.type}" />
							<property name="browser.version" value="${browser.version}" />
							<property name="database.type" value="${database.type}" />
							<property name="database.version" value="${database.version}" />
							<property name="liferay.compare.urls" value="${liferay.compare.urls}" />
							<property name="liferay.plugins.git.id" value="${liferay.plugins.git.id}" />
							<property name="liferay.portal.branch" value="${liferay.portal.branch}" />
							<property name="liferay.portal.bundle" value="${liferay.portal.bundle}" />
							<property name="liferay.portal.git.id" value="${liferay.portal.git.id}" />
							<property name="java.jdk.type" value="${java.jdk.type}" />
							<property name="java.jdk.version" value="${java.jdk.version}" />
							<property name="operating.system.type" value="${operating.system.type}" />
							<property name="operating.system.version" value="${operating.system.version}" />
							<property name="testray.build.name" value="${testray.build.name}" />
							<property name="testray.build.time" value="${testray.build.time}" />
							<property name="testray.build.type" value="${testray.build.type}" />
							<property name="testray.product.type" value="${testray.product.type}" />
							<property name="testray.product.version" value="${testray.product.version}" />
							<property name="testray.project.name" value="${testray.project.name}" />
							<property name="testray.run.id" value="${testray.run.id}" />
						</properties>

						<testcase classname="com.liferay.jenkins.Jenkins" name="${build.name}" time="0">
							<attachments>
								<file name="console.output" value="${testray.logs.console}" />
							</attachments>
							${job.failure.report}
							<properties>
								<property name="testray.case.defect" value="${testray.case.defect}" />
								<property name="testray.component.names" value="${testray.component.names}" />
								<property name="testray.main.component.name" value="${testray.main.component.name}" />
								<property name="testray.team.name" value="${testray.team.name}" />
								<property name="testray.testcase.description" value="${testray.testcase.description}" />
								<property name="testray.testcase.name" value="${testray.axis.name}" />
								<property name="testray.testcase.priority" value="${testray.testcase.priority}" />
								<property name="testray.testcase.product.edition" value="${testray.testcase.product.edition}" />
							</properties>
						</testcase>

						<system-out />

						<system-err />
					</testsuite>
				]]>
			</echo>
		</sequential>
	</macrodef>

	<macrodef name="get-testray-build-time">
		<sequential>
			<var name="test.batch.duration" unset="true" />
			<var name="testray.build.time" unset="true" />

			<if>
				<isset property="test.batch.start.time" />
				<then>
					<beanshell>
						<![CDATA[
							long testBatchStopTime = System.currentTimeMillis();

							project.setProperty("test.batch.stop.time", String.valueOf(testBatchStopTime));
						]]>
					</beanshell>

					<math
						datatype="long"
						operand1="${test.batch.stop.time}"
						operand2="${test.batch.start.time}"
						operation="-"
						result="test.batch.duration"
					/>
				</then>
				<else>
					<var name="test.batch.duration" value="0" />
				</else>
			</if>

			<beanshell>
				<![CDATA[
					import java.util.concurrent.TimeUnit;

					int milliseconds = Integer.parseInt(project.getProperty("test.batch.duration"));

					int hours = TimeUnit.MILLISECONDS.toHours(milliseconds);
					int minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds) % 60;
					int seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds) % 60;

					StringBuilder sb = new StringBuilder();

					if (hours > 0) {
						sb.append(hours);
						sb.append(" hour");

						if (hours > 1) {
							sb.append("s");
						}

						sb.append(" ");
					}

					if (minutes > 0) {
						sb.append(minutes);
						sb.append(" minute");

						if (minutes > 1) {
							sb.append("s");
						}

						sb.append(" ");
					}

					sb.append(seconds);
					sb.append(" second");

					if (seconds > 1) {
						sb.append("s");
					}

					project.setProperty("testray.build.time", sb.toString());
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="merge-test-results">
		<sequential>
			<antcall target="merge-test-results" />

			<if>
				<isset property="env.WORKSPACE" />
				<then>
					<mkdir dir="${env.WORKSPACE}/test-results" />

					<copy file="test-results/TESTS-TestSuites.xml" tofile="${env.WORKSPACE}/test-results/TESTS-TestSuites.xml" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="merge-testray-results">
		<attribute default="${default.test.results.dir}" name="test.results.dir" />
		<attribute default="*.xml" name="test.results.fileset" />
		<attribute default="${default.test.results.suite.dir}" name="test.results.suite.dir" />
		<attribute default="${default.test.results.suite.file.name}" name="test.results.suite.file.name" />

		<sequential>
			<local name="test.results.suite.file" />

			<property name="test.results.suite.file" value="@{test.results.suite.dir}/@{test.results.suite.file.name}" />

			<echo>Merging into file ${test.results.suite.file}.</echo>

			<first id="first">
				<fileset dir="@{test.results.dir}" includes="@{test.results.fileset}" />
			</first>

			<loadfile property="test.results.suite.file.header" srcfile="${toString:first}" />

			<propertyregex
				input="${test.results.suite.file.header}"
				override="true"
				property="test.results.suite.file.header"
				regexp="&lt;testcase[\s\S.]*"
				replace=""
			/>

			<propertyregex
				input="${test.results.suite.file.header}"
				override="true"
				property="test.results.suite.file.header"
				regexp="&lt;testsuite.*\n"
				replace="&lt;testsuite&gt;${line.separator}"
			/>

			<echo file="${test.results.suite.file}">${test.results.suite.file.header}</echo>

			<for param="test.results.file">
				<path>
					<fileset dir="@{test.results.dir}">
						<include name="@{test.results.fileset}" />
					</fileset>
				</path>
				<sequential>
					<var name="test.results.file.body" unset="true" />

					<loadfile property="test.results.file.body" srcfile="@{test.results.file}" />

					<if>
						<contains string="${test.results.file.body}" substring="testcase" />
						<then>
							<echo>Merging @{test.results.file}.</echo>

							<propertyregex
								input="${test.results.file.body}"
								override="true"
								property="test.results.file.body"
								regexp="&lt;\?xml[\s\S]*?&lt;testcase"
								replace="&lt;testcase"
							/>

							<propertyregex
								input="${test.results.file.body}"
								override="true"
								property="test.results.file.body"
								regexp="&lt;/testcase&gt;[\s\S]*"
								replace="&lt;/testcase&gt;${line.separator}"
							/>

							<echo append="true" file="${test.results.suite.file}">${test.results.file.body}</echo>
						</then>
					</if>
				</sequential>
			</for>

			<echo append="true" file="${test.results.suite.file}">&lt;/testsuite&gt;</echo>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-build">
		<sequential>
			<antcall target="prepare-test-build">
				<param name="test.class.groups.size" value="${test.batch.size}" />
				<param name="test.plugin.groups.size" value="${test.batch.size}" />
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-build-unit">
		<sequential>
			<antcall target="prepare-test-build-unit">
				<param name="test.class.groups.size" value="${test.batch.size}" />
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="prepare-testray-results">
		<attribute default="" name="job.failure.message" />
		<attribute default="${default.test.results.dir}" name="test.results.dir" />
		<attribute default="${default.test.results.suite.dir}" name="test.results.suite.dir" />
		<attribute default="${default.test.results.suite.file.name}" name="test.results.suite.file.name" />

		<sequential>
			<set-testray-required-properties />

			<generate-testray-axis-result job.failure.message="@{job.failure.message}" />

			<copy-testray-results />

			<if>
				<resourcecount when="greater" count="0">
					<fileset dir="@{test.results.dir}" erroronmissingdir="false" includes="TEST-*.xml" />
				</resourcecount>
				<then>
					<build-testray-results />

					<merge-testray-results />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="print-test-class-group">
		<attribute name="test.class.group.index" />

		<sequential>
			<property file="${project.dir}/test.class.file.names.properties" />

			<propertycopy from="TEST_CLASS_GROUP_@{test.class.group.index}" name="test.class.group" />

			<echo>TEST_CLASS_GROUP_@{test.class.group.index}=${test.class.group}</echo>
		</sequential>
	</macrodef>

	<macrodef name="run-batch-test">
		<attribute default="false" name="tomcat.gc.log" />
		<attribute default="false" name="tsant.gc.log" />
		<element name="test-action" />
		<element name="test-set-up" optional="true" />
		<element name="test-tear-down" optional="true" />

		<sequential>
			<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-java-processes" />

			<test-set-up />

			<trycatch property="job.failure.message">
				<try>
					<test-action />
				</try>

				<finally>
					<property name="job.failure.message" value="" />

					<echo>${job.failure.message}</echo>

					<if>
						<isset property="testray.results.dir" />
						<then>
							<prepare-testray-results job.failure.message="${job.failure.message}" />

							<send-testray-results testray.results.dir="${testray.results.dir}" />
						</then>
					</if>

					<merge-test-results />

					<check-deprecated-method />

					<test-tear-down />

					<print-gc-logs
						tomcat.gc.log="@{tomcat.gc.log}"
						tsant.gc.log="@{tsant.gc.log}"
					/>
				</finally>
			</trycatch>
		</sequential>
	</macrodef>

	<macrodef name="run-functional-test">
		<attribute name="app.server.type" />
		<attribute default="${app.server.@{app.server.type}.version}" name="app.server.version" />
		<attribute name="database.type" />
		<attribute default="${database.@{database.type}.version}" name="database.version" />
		<attribute default="" name="test.license.xml.url" />
		<attribute default="" name="test.plugin.zip.url" />
		<attribute default="" name="test.portal.bundle.zip.url" />
		<attribute default="" name="test.sql.zip.url" />
		<attribute default="false" name="tomcat.gc.log" />
		<attribute default="false" name="tsant.gc.log" />

		<sequential>
			<var name="app.server.type" value="@{app.server.type}" />
			<var name="app.server.version" value="@{app.server.version}" />

			<property name="test.class" value="${axis.variable}" />

			<run-batch-test tomcat.gc.log="@{tomcat.gc.log}" tsant.gc.log="@{tsant.gc.log}">
				<test-action>
					<database-test-run-test database.type="@{database.type}">
						<test-action>
							<ant antfile="build-test-${app.server.type}.xml" inheritAll="false" target="run-selenium-${app.server.type}">
								<property name="database.type" value="@{database.type}" />
								<property name="print.java.process.on.fail" value="Bootstrap" />
								<property name="test.class" value="${test.class}" />
							</ant>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<if>
						<and>
							<matches pattern="http" string="@{test.license.xml.url}" />
							<matches pattern="http" string="@{test.portal.bundle.zip.url}" />
							<matches pattern="http" string="@{test.sql.zip.url}" />
						</and>
						<then>
							<propertycopy from="app.server.${app.server.type}.bin.dir" name="test.app.server.bin.dir" />

							<antcall inheritAll="false" target="prepare-test-bundle">
								<param name="app.server.type" value="${app.server.type}" />
								<param name="test.app.server.bin.dir" value="${test.app.server.bin.dir}" />
								<param name="test.build.bundle.zip.url" value="@{test.portal.bundle.zip.url}" />
							</antcall>

							<antcall target="deploy-license-xml">
								<param name="test.build.license.xml.zip.url" value="@{test.license.xml.url}" />
							</antcall>

							<antcall target="deploy-sql-zip">
								<param name="test.sql.zip.url" value="@{test.sql.zip.url}" />
							</antcall>
						</then>
						<else>
							<antcall target="compile" />

							<ant antfile="build-dist.xml" target="build-dist-${app.server.type}" />
						</else>
					</if>

					<if>
						<matches pattern="http" string="@{test.plugin.zip.url}" />
						<then>
							<mkdir dir="${liferay.home}/deploy" />

							<mirrors-get
								dest="${liferay.home}/deploy"
								src="@{test.plugin.zip.url}"
							/>
						</then>
					</if>

					<antcall target="record-test-generated-properties" />

					<echo if:set="env.JENKINS_HOME">ANT_OPTS=${env.ANT_OPTS}</echo>
				</test-set-up>

				<test-tear-down>
					<if>
						<available file=".testable.portal.started" />
						<then>
							<antcall target="stop-app-server" />

							<delete file=".testable.portal.started" failonerror="false" />
						</then>
					</if>
				</test-tear-down>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-integration-test">
		<attribute name="database.type" />

		<sequential>
			<property name="testray.main.component.name" value="Integration" />
			<property name="testray.testcase.priority" value="4" />

			<run-batch-test>
				<test-action>
					<database-test-run-test database.type="@{database.type}">
						<test-action>
							<print-test-class-group test.class.group.index="${axis.variable}" />

							<ant dir="portal-impl" target="test-class-group" inheritAll="false">
								<property name="database.type" value="@{database.type}" />
								<property name="test.class.group.index" value="${axis.variable}" />
								<property name="test.type" value="integration" />
							</ant>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<prepare-test-build />
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-modules-integration-test">
		<attribute name="database.type" />

		<sequential>
			<property name="testray.main.component.name" value="Integration" />
			<property name="testray.testcase.priority" value="4" />

			<run-batch-test tomcat.gc.log="true">
				<test-action>
					<database-test-run-test database.type="@{database.type}" stop.app.server="true">
						<test-action>
							<print-test-class-group test.class.group.index="${axis.variable}" />

							<antcall target="prepare-log4j-ext-xml" inheritAll="false">
								<param name="database.type" value="@{database.type}" />
							</antcall>

							<antcall target="prepare-portal-ext-properties" inheritAll="false">
								<param name="database.type" value="@{database.type}" />
							</antcall>

							<antcall target="prepare-system-ext-properties" inheritAll="false" />

							<gradle-execute dir="modules" task="testIntegration">
								<arg value="-Ddatabase.type=@{database.type}" />
								<arg value="-Dtest.class.group.index=${axis.variable}" />
							</gradle-execute>

							<ant dir="portal-service" target="test-class" inheritAll="false">
								<property name="test.class" value="PortalLogAssertorTest" />
							</ant>
						</test-action>
					</database-test-run-test>
				</test-action>

				<test-set-up>
					<prepare-test-build />
				</test-set-up>
			</run-batch-test>
		</sequential>
	</macrodef>

	<macrodef name="run-poshi-validation">
		<sequential>
			<antcall target="run-poshi-validation" />
		</sequential>
	</macrodef>

	<macrodef name="run-source-formatter">
		<sequential>
			<gradle-execute dir="modules/util/source-formatter" task="test" />
		</sequential>
	</macrodef>

	<macrodef name="send-testray-results">
		<attribute default="${default.test.results.suite.dir}" name="test.results.suite.dir" />
		<attribute name="testray.results.dir" />

		<sequential>
			<echo>Sending testray results to @{testray.results.dir}.</echo>

			<for list="uat" param="testray.base.dir.name">
				<sequential>
					<rsync rsync.dest="testray-results/@{testray.base.dir.name}" rsync.src="@{test.results.suite.dir}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="set-testray-required-properties">
		<sequential>
			<get-env-app-server />
			<get-env-browser />
			<get-env-database />
			<get-env-java-jdk />
			<get-env-liferay-portal />
			<get-env-operating-system />
			<get-testray-build-time />
			<get-testray-case-defect />
			<get-testray-components />
			<get-testray-logs />
			<get-testray-project-name />
			<get-testray-run-id />
			<get-testray-team-name />
			<get-testray-testcase-description />
			<get-testray-testcase-name />
			<get-testray-testcase-product-edition />

			<if>
				<not>
					<isset property="testray.testcase.priority" />
				</not>
				<then>
					<get-testray-testcase-priority />
				</then>
			</if>

			<if>
				<not>
					<isset property="testray.run.id" />
				</not>
				<then>
					<get-testray-testcase-run-id />
				</then>
			</if>

			<property name="testray.axis.name" value="${test.batch.name}#${axis.variable}" />
		</sequential>
	</macrodef>

	<target name="functional-bundle-tomcat-mysql">
		<set-tomcat-version-number liferay.portal.bundle="${test.portal.bundle.version}" />

		<run-functional-test
			app.server.type="tomcat"
			database.type="mysql"
			test.license.xml.url="${test.license.xml.url}"
			test.plugin.zip.url="${test.plugin.zip.url}"
			test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
			test.sql.zip.url="${test.sql.zip.url}"
		/>
	</target>

	<target name="functional-tomcat-hypersonic">
		<run-functional-test app.server.type="tomcat" database.type="hypersonic" />
	</target>

	<target name="functional-tomcat-mysql">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>

	<target name="integration-db2">
		<run-integration-test database.type="db2" />
	</target>

	<target name="integration-hypersonic">
		<run-integration-test database.type="hypersonic" />
	</target>

	<target name="integration-mysql">
		<run-integration-test database.type="mysql" />
	</target>

	<target name="integration-oracle">
		<run-integration-test database.type="oracle" />
	</target>

	<target name="integration-postgresql">
		<run-integration-test database.type="postgresql" />
	</target>

	<target name="integration-sybase">
		<run-integration-test database.type="sybase" />
	</target>

	<target name="modules-functional">
		<run-batch-test>
			<test-action>
				<antcall target="run-selenium-test">
					<param name="test.class" value="${axis.variable}" />
				</antcall>
			</test-action>
		</run-batch-test>
	</target>

	<target name="modules-functional-tomcat-mysql">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>

	<target name="modules-integration-db2">
		<run-modules-integration-test database.type="db2" />
	</target>

	<target name="modules-integration-hypersonic">
		<run-modules-integration-test database.type="hypersonic" />
	</target>

	<target name="modules-integration-mysql">
		<run-modules-integration-test database.type="mysql" />
	</target>

	<target name="modules-integration-oracle">
		<run-modules-integration-test database.type="oracle" />
	</target>

	<target name="modules-integration-postgresql">
		<run-modules-integration-test database.type="postgresql" />
	</target>

	<target name="modules-integration-sybase">
		<run-modules-integration-test database.type="sybase" />
	</target>

	<target name="modules-unit">
		<property name="testray.main.component.name" value="Unit" />
		<property name="testray.testcase.priority" value="4" />

		<run-batch-test>
			<test-action>
				<gradle-execute dir="modules" task="test">
					<arg value="-Dtest.class.group.index=${axis.variable}" />
				</gradle-execute>

				<if>
					<equals arg1="${axis.variable}" arg2="0" />
					<then>
						<gradle-execute dir="modules" task="compileJSP" />
					</then>
				</if>
			</test-action>

			<test-set-up>
				<prepare-test-build />
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="oracle-service-start">
		<exec executable="service" failonerror="true">
			<arg line="oracledb start" />
		</exec>

		<retry retrycount="60">
			<sequential>
				<local name="output.content" />
				<local name="return.code" />

				<exec executable="${oracle.lsnrctl.executable}" outputproperty="output.content">
					<arg value="services" />
				</exec>

				<echo>Output:
${output.content}</echo>

				<if>
					<or>
						<contains string="${output.content}" substring="The listener supports no services" />
					</or>
					<then>
						<sleep seconds="5" />

						<fail message="Output: ${output.content}" />
					</then>
				</if>
			</sequential>
		</retry>
	</target>

	<target name="oracle-service-stop">
		<exec executable="service">
			<arg line="oracledb stop" />
		</exec>
	</target>

	<target name="plugins-compile">
		<property name="testray.main.component.name" value="Plugins" />
		<property name="testray.testcase.priority" value="4" />

		<run-batch-test>
			<test-action>
				<ant antfile="build-test-plugins.xml" target="test-plugin-group">
					<property name="test.plugin.group.index" value="${axis.variable}" />
				</ant>
			</test-action>

			<test-set-up>
				<prepare-test-build />
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="plugins-functional-bundle-tomcat-mysql">
		<set-tomcat-version-number liferay.portal.bundle="${test.portal.bundle.version}" />

		<run-functional-test
			app.server.type="tomcat"
			database.type="mysql"
			test.license.xml.url="${test.license.xml.url}"
			test.portal.bundle.zip.url="${test.portal.bundle.zip.url}"
			test.sql.zip.url="${test.sql.zip.url}"
		/>
	</target>

	<target name="plugins-functional-tomcat-mysql">
		<run-functional-test app.server.type="tomcat" database.type="mysql" />
	</target>

	<target name="portal-web">
		<property name="testray.main.component.name" value="Portal Web" />
		<property name="testray.testcase.priority" value="4" />

		<run-batch-test>
			<test-action>
				<database-test-run-test database.type="mysql">
					<test-action>
						<run-poshi-validation />

						<if>
							<equals arg1="${env.TEST_PORTAL_WEB}" arg2="true" />
							<then>
								<run-source-formatter />
							</then>
						</if>
					</test-action>
				</database-test-run-test>
			</test-action>

			<test-set-up>
				<prepare-test-build />
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="ruby-sass-compiler">
		<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-java-processes" />

		<echo file="build.${user.name}.properties">sass.compiler.class.name=ruby</echo>

		<antcall target="setup-sdk" inheritAll="false" />

		<record action="start" name="${project.dir}/sass-compiler-log" />

		<gradle-execute dir="modules" task="buildCSS" />

		<ant dir="portal-web" target="build-css" inheritAll="false" />

		<record action="stop" name="${project.dir}/sass-compiler-log" />

		<fail message="The Sass compiler is not using Ruby.">
			<condition>
				<and>
					<not>
						<resourcecontains resource="${project.dir}/sass-compiler-log" substring="Using Ruby Sass compiler" />
					</not>
					<or>
						<resourcecontains resource="${project.dir}/sass-compiler-log" substring="Unable to load Ruby compiler, falling back to native" />
						<resourcecontains resource="${project.dir}/sass-compiler-log" substring="Using native Sass compiler" />
					</or>
				</and>
			</condition>
		</fail>
	</target>

	<target name="service-builder">
		<property name="testray.main.component.name" value="Service Builder" />
		<property name="testray.testcase.priority" value="4" />

		<run-batch-test>
			<test-action>
				<gradle-execute dir="modules/util/portal-tools-service-builder" task="deploy">
					<arg value="clean" />
				</gradle-execute>

				<record action="start" name="${project.dir}/build.services.output.txt" />

				<ant dir="portal-impl" target="build-services" />

				<record action="stop" name="${project.dir}/build.services.output.txt" />

				<replace file="${project.dir}/build.services.output.txt" token="Writing src/main/resources/service.properties" value="" />
				<replace file="${project.dir}/build.services.output.txt" token="Writing src/service.properties" value="" />

				<loadfile property="build.services.output.txt.content" srcfile="${project.dir}/build.services.output.txt" />

				<delete file="${project.dir}/build.services.output.txt" />

				<if>
					<contains string="${build.services.output.txt.content}" substring="Writing " />
					<then>
						<fail>
.

Detected build services changes. See above build services log for more
information. Make sure to commit in all build services results.
						</fail>
					</then>
				</if>
			</test-action>

			<test-set-up>
				<prepare-test-build />
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="sybase-service-start">
		<local name="database.type" />

		<property name="database.type" value="sybase" />

		<get-database-property property.name="database.password" />
		<get-database-property property.name="database.schema" />
		<get-database-property property.name="database.username" />

		<clean-restart-sybase />

		<echo file="create-header.sql">use master
dump transaction master with no_log
go
alter database master on master=232
go
drop database lportal
go
exec sp_configure 'lock scheme', 0, datarows
go
create database lportal on master = "250m"
go
exec sp_dboption 'lportal', 'allow nulls by default' , true
go
exec sp_dboption 'lportal', 'select into/bulkcopy/pllsort' , true
go</echo>

		<retry retrycount="10">
			<sequential>
				<if>
					<not>
						<available file="/opt/sybase/charsets" />
					</not>
					<then>
						<clean-restart-sybase retry="true" />

						<fail message="Missing /opt/sybase/charsets." />
					</then>
				</if>

				<local name="output.content" />
				<local name="return.code" />

				<exec executable="${sybase.executable}" outputproperty="output.content" resultproperty="return.code">
					<arg value="-i" />
					<arg value="create-header.sql" />
					<arg value="-P" />
					<arg value="${database.password}" />
					<arg value="-S" />
					<arg value="${database.schema}" />
					<arg value="-U" />
					<arg value="${database.username}" />
				</exec>

				<echo>Return code: ${return.code}
Output:
${output.content}</echo>

				<if>
					<or>
						<contains string="${output.content}" substring="Database 'lportal' already exists" />
						<contains string="${output.content}" substring="sp_dboption" />
						<contains string="${output.content}" substring="The model database is unavailable. It is being used to create a new database." />
					</or>
					<then>
						<clean-restart-sybase retry="true" />

						<fail message="Output: ${output.content}" />
					</then>
				</if>

				<if>
					<not>
						<equals arg1="${return.code}" arg2="0" />
					</not>
					<then>
						<clean-restart-sybase retry="true" />

						<fail message="Return code: ${return.code}"  />
					</then>
				</if>
			</sequential>
		</retry>

		<delete file="create-header.sql" />
	</target>

	<target name="sybase-service-stop">
		<exec executable="service">
			<arg line="sybase stop" />
		</exec>

		<waitfor maxwait="60" maxwaitunit="second">
			<not>
				<socket server="localhost" port="5000" />
			</not>
		</waitfor>

		<antcall target="clean-up-sybase-processes" />
	</target>

	<target name="tck">
		<property name="testray.main.component.name" value="TCK" />
		<property name="testray.testcase.priority" value="4" />

		<run-batch-test tomcat.gc.log="true" tsant.gc.log="true">
			<test-action>
				<database-test-run-test database.type="mysql" stop.app.server="true">
					<test-action>
						<ant antfile="build-test-tck.xml" target="record-test-tck-package-names">
							<property name="test.class.groups.size" value="${test.batch.size}" />
						</ant>

						<ant antfile="build-test-tck.xml" target="test-class-group">
							<property name="test.class.group.index" value="${axis.variable}" />
						</ant>
					</test-action>
				</database-test-run-test>
			</test-action>

			<test-set-up>
				<prepare-test-build />

				<antcall target="prepare-portal-ext-properties">
					<param name="hot.deploy.dependency.management.enabled" value="false" />
				</antcall>

				<antcall target="prepare-system-ext-properties" />
			</test-set-up>
		</run-batch-test>
	</target>

	<target name="unit">
		<property name="testray.main.component.name" value="Unit" />
		<property name="testray.testcase.priority" value="4" />

		<run-batch-test>
			<test-action>
				<ant dir="portal-service" target="test-class-group" inheritAll="false">
					<property name="test.class.group.index" value="${axis.variable}" />
				</ant>

				<ant dir="portal-impl" target="test-class-group" inheritAll="false">
					<property name="test.class.group.index" value="${axis.variable}" />
					<property name="test.type" value="unit" />
				</ant>

				<ant dir="util-java" target="test-class-group" inheritAll="false">
					<property name="test.class.group.index" value="${axis.variable}" />
				</ant>
			</test-action>

			<test-set-up>
				<prepare-test-build-unit />
			</test-set-up>
		</run-batch-test>
	</target>
</project>