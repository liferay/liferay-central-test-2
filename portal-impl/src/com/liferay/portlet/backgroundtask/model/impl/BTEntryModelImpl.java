/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.backgroundtask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.backgroundtask.model.BTEntry;
import com.liferay.portlet.backgroundtask.model.BTEntryModel;
import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BTEntry service. Represents a row in the &quot;BTEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.backgroundtask.model.BTEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BTEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BTEntryImpl
 * @see com.liferay.portlet.backgroundtask.model.BTEntry
 * @see com.liferay.portlet.backgroundtask.model.BTEntryModel
 * @generated
 */
public class BTEntryModelImpl extends BaseModelImpl<BTEntry>
	implements BTEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a b t entry model instance should use the {@link com.liferay.portlet.backgroundtask.model.BTEntry} interface instead.
	 */
	public static final String TABLE_NAME = "BTEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "btEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "servletContextNames", Types.VARCHAR },
			{ "taskExecutorClassName", Types.VARCHAR },
			{ "taskContext", Types.CLOB },
			{ "completed", Types.BOOLEAN },
			{ "completionDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table BTEntry (btEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,servletContextNames VARCHAR(255) null,taskExecutorClassName VARCHAR(200) null,taskContext TEXT null,completed BOOLEAN,completionDate DATE null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table BTEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY btEntry.btEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BTEntry.btEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.backgroundtask.model.BTEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.backgroundtask.model.BTEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portlet.backgroundtask.model.BTEntry"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long TASKEXECUTORCLASSNAME_COLUMN_BITMASK = 4L;
	public static long BTENTRYID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portlet.backgroundtask.model.BTEntry"));

	public BTEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _btEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBtEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _btEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BTEntry.class;
	}

	@Override
	public String getModelClassName() {
		return BTEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("btEntryId", getBtEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("servletContextNames", getServletContextNames());
		attributes.put("taskExecutorClassName", getTaskExecutorClassName());
		attributes.put("taskContext", getTaskContext());
		attributes.put("completed", getCompleted());
		attributes.put("completionDate", getCompletionDate());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long btEntryId = (Long)attributes.get("btEntryId");

		if (btEntryId != null) {
			setBtEntryId(btEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String servletContextNames = (String)attributes.get(
				"servletContextNames");

		if (servletContextNames != null) {
			setServletContextNames(servletContextNames);
		}

		String taskExecutorClassName = (String)attributes.get(
				"taskExecutorClassName");

		if (taskExecutorClassName != null) {
			setTaskExecutorClassName(taskExecutorClassName);
		}

		String taskContext = (String)attributes.get("taskContext");

		if (taskContext != null) {
			setTaskContext(taskContext);
		}

		Boolean completed = (Boolean)attributes.get("completed");

		if (completed != null) {
			setCompleted(completed);
		}

		Date completionDate = (Date)attributes.get("completionDate");

		if (completionDate != null) {
			setCompletionDate(completionDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getBtEntryId() {
		return _btEntryId;
	}

	@Override
	public void setBtEntryId(long btEntryId) {
		_btEntryId = btEntryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getServletContextNames() {
		if (_servletContextNames == null) {
			return StringPool.BLANK;
		}
		else {
			return _servletContextNames;
		}
	}

	@Override
	public void setServletContextNames(String servletContextNames) {
		_servletContextNames = servletContextNames;
	}

	@Override
	public String getTaskExecutorClassName() {
		if (_taskExecutorClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _taskExecutorClassName;
		}
	}

	@Override
	public void setTaskExecutorClassName(String taskExecutorClassName) {
		_columnBitmask |= TASKEXECUTORCLASSNAME_COLUMN_BITMASK;

		if (_originalTaskExecutorClassName == null) {
			_originalTaskExecutorClassName = _taskExecutorClassName;
		}

		_taskExecutorClassName = taskExecutorClassName;
	}

	public String getOriginalTaskExecutorClassName() {
		return GetterUtil.getString(_originalTaskExecutorClassName);
	}

	@Override
	public String getTaskContext() {
		if (_taskContext == null) {
			return StringPool.BLANK;
		}
		else {
			return _taskContext;
		}
	}

	@Override
	public void setTaskContext(String taskContext) {
		_taskContext = taskContext;
	}

	@Override
	public boolean getCompleted() {
		return _completed;
	}

	@Override
	public boolean isCompleted() {
		return _completed;
	}

	@Override
	public void setCompleted(boolean completed) {
		_completed = completed;
	}

	@Override
	public Date getCompletionDate() {
		return _completionDate;
	}

	@Override
	public void setCompletionDate(Date completionDate) {
		_completionDate = completionDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BTEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BTEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BTEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BTEntryImpl btEntryImpl = new BTEntryImpl();

		btEntryImpl.setBtEntryId(getBtEntryId());
		btEntryImpl.setGroupId(getGroupId());
		btEntryImpl.setCompanyId(getCompanyId());
		btEntryImpl.setUserId(getUserId());
		btEntryImpl.setUserName(getUserName());
		btEntryImpl.setCreateDate(getCreateDate());
		btEntryImpl.setModifiedDate(getModifiedDate());
		btEntryImpl.setName(getName());
		btEntryImpl.setServletContextNames(getServletContextNames());
		btEntryImpl.setTaskExecutorClassName(getTaskExecutorClassName());
		btEntryImpl.setTaskContext(getTaskContext());
		btEntryImpl.setCompleted(getCompleted());
		btEntryImpl.setCompletionDate(getCompletionDate());
		btEntryImpl.setStatus(getStatus());

		btEntryImpl.resetOriginalValues();

		return btEntryImpl;
	}

	@Override
	public int compareTo(BTEntry btEntry) {
		long primaryKey = btEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BTEntry)) {
			return false;
		}

		BTEntry btEntry = (BTEntry)obj;

		long primaryKey = btEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BTEntryModelImpl btEntryModelImpl = this;

		btEntryModelImpl._originalGroupId = btEntryModelImpl._groupId;

		btEntryModelImpl._setOriginalGroupId = false;

		btEntryModelImpl._originalTaskExecutorClassName = btEntryModelImpl._taskExecutorClassName;

		btEntryModelImpl._originalStatus = btEntryModelImpl._status;

		btEntryModelImpl._setOriginalStatus = false;

		btEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BTEntry> toCacheModel() {
		BTEntryCacheModel btEntryCacheModel = new BTEntryCacheModel();

		btEntryCacheModel.btEntryId = getBtEntryId();

		btEntryCacheModel.groupId = getGroupId();

		btEntryCacheModel.companyId = getCompanyId();

		btEntryCacheModel.userId = getUserId();

		btEntryCacheModel.userName = getUserName();

		String userName = btEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			btEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			btEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			btEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			btEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			btEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		btEntryCacheModel.name = getName();

		String name = btEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			btEntryCacheModel.name = null;
		}

		btEntryCacheModel.servletContextNames = getServletContextNames();

		String servletContextNames = btEntryCacheModel.servletContextNames;

		if ((servletContextNames != null) &&
				(servletContextNames.length() == 0)) {
			btEntryCacheModel.servletContextNames = null;
		}

		btEntryCacheModel.taskExecutorClassName = getTaskExecutorClassName();

		String taskExecutorClassName = btEntryCacheModel.taskExecutorClassName;

		if ((taskExecutorClassName != null) &&
				(taskExecutorClassName.length() == 0)) {
			btEntryCacheModel.taskExecutorClassName = null;
		}

		btEntryCacheModel.taskContext = getTaskContext();

		String taskContext = btEntryCacheModel.taskContext;

		if ((taskContext != null) && (taskContext.length() == 0)) {
			btEntryCacheModel.taskContext = null;
		}

		btEntryCacheModel.completed = getCompleted();

		Date completionDate = getCompletionDate();

		if (completionDate != null) {
			btEntryCacheModel.completionDate = completionDate.getTime();
		}
		else {
			btEntryCacheModel.completionDate = Long.MIN_VALUE;
		}

		btEntryCacheModel.status = getStatus();

		return btEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{btEntryId=");
		sb.append(getBtEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", servletContextNames=");
		sb.append(getServletContextNames());
		sb.append(", taskExecutorClassName=");
		sb.append(getTaskExecutorClassName());
		sb.append(", taskContext=");
		sb.append(getTaskContext());
		sb.append(", completed=");
		sb.append(getCompleted());
		sb.append(", completionDate=");
		sb.append(getCompletionDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.backgroundtask.model.BTEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>btEntryId</column-name><column-value><![CDATA[");
		sb.append(getBtEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>servletContextNames</column-name><column-value><![CDATA[");
		sb.append(getServletContextNames());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskExecutorClassName</column-name><column-value><![CDATA[");
		sb.append(getTaskExecutorClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskContext</column-name><column-value><![CDATA[");
		sb.append(getTaskContext());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completed</column-name><column-value><![CDATA[");
		sb.append(getCompleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completionDate</column-name><column-value><![CDATA[");
		sb.append(getCompletionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BTEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BTEntry.class
		};
	private long _btEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _servletContextNames;
	private String _taskExecutorClassName;
	private String _originalTaskExecutorClassName;
	private String _taskContext;
	private boolean _completed;
	private Date _completionDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private BTEntry _escapedModel;
}