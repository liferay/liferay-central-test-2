<?xml version="1.0"?>

<project name="build-common-java" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-common.xml" />

	<macrodef name="clean-common">
		<element name="clean-extra" optional="true" />

		<sequential>
			<delete dir="classes" />
			<delete dir="test-classes" />
			<delete dir="test-coverage" />
			<delete dir="test-results" />
			<delete dir="woven-classes" />
			<delete dir="${doc.dir}/${ant.project.name}/javadocs" />
			<delete file="${jar.file}.jar" failonerror="false" />
			<delete file="${jar.file}-javadoc.jar" failonerror="false" />
			<delete file="${jar.file}-sources.jar" failonerror="false" />

			<clean-extra />
		</sequential>
	</macrodef>

	<macrodef name="compile-java">
		<sequential>
			<compile-java-cmd />
		</sequential>
	</macrodef>

	<macrodef name="compile-java-cmd">
		<attribute default="project.classpath" name="javac.classpathref" />
		<attribute default="classes" name="javac.destdir" />
		<attribute default="src" name="javac.srcdir" />
		<element name="compile-java-post" optional="true" />

		<sequential>
			<if>
				<not>
					<uptodate targetfile="classes/.touch">
						<srcfiles dir="${basedir}" includes="bnd.bnd,build.xml,ivy.xml,src/**/*.*" />
					</uptodate>
				</not>
				<then>
					<copy todir="@{javac.destdir}" preservelastmodified="true">
						<fileset dir="@{javac.srcdir}" excludes="**/*.java" />
					</copy>

					<if>
						<equals arg1="${javac.deprecation}" arg2="on" />
						<then>
							<record action="start" name="${project.dir}/${ant.project.name}/javac.output.txt" />
						</then>
					</if>

					<javac
						classpathref="@{javac.classpathref}"
						compiler="${javac.compiler}"
						debug="${javac.debug}"
						deprecation="${javac.deprecation}"
						destdir="@{javac.destdir}"
						encoding="${javac.encoding}"
						includeAntRuntime="false"
						nowarn="${javac.nowarn}"
						srcdir="@{javac.srcdir}"
					/>

					<if>
						<equals arg1="${javac.deprecation}" arg2="on" />
						<then>
							<record action="stop" name="${project.dir}/${ant.project.name}/javac.output.txt" />

							<loadfile property="javac.output.txt.content" srcfile="${project.dir}/${ant.project.name}/javac.output.txt" />

							<delete file="${project.dir}/${ant.project.name}/javac.output.txt" />

							<if>
								<or>
									<contains string="${javac.output.txt.content}" substring="a deprecated API" />
									<contains string="${javac.output.txt.content}" substring="[deprecation]" />
								</or>
								<then>
									<echo append="true" file="${project.dir}/javac.output.txt" message="${line.separator}${ant.project.name}${line.separator}" />
									<echo append="true" file="${project.dir}/javac.output.txt" message="${javac.output.txt.content}" />
								</then>
							</if>
						</then>
					</if>

					<compile-java-post />

					<echo file="@{javac.destdir}/.touch"></echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="jar-marco">
		<sequential>
			<jar-marco-cmd />
		</sequential>
	</macrodef>

	<macrodef name="jar-marco-cmd">
		<element name="jar-post" optional="true" />
		<element name="jar-pre" optional="true" />

		<sequential>
			<if>
				<not>
					<uptodate targetfile="${jar.file}.jar">
						<srcfiles dir="${basedir}" includes="bnd.bnd,build.xml,ivy.xml,src/**/*.*" />
					</uptodate>
				</not>
				<then>
					<compile-java />

					<jar-pre />

					<if>
						<available file="bnd.bnd" />
						<then>
							<manifest-helper />

							<bndexpand propertyfile="${project.dir}/common.bnd" />

							<bnd eclipse="false" exceptions="true" failok="false" inherit="true" output="${jar.file}.jar">
								<bndfiles>
									<fileset dir=".">
										<include name="bnd.bnd" />
									</fileset>
								</bndfiles>
								<classpath>
									<pathelement location="classes" />
								</classpath>
								<property name="-sourcepath" value="." />
							</bnd>

							<baseline-jar
								bndFile="bnd.bnd"
								bndRootFile="${project.dir}/common.bnd"
								newJarFile="${jar.file}.jar"
							/>
						</then>
						<else>
							<antcall target="manifest" />

							<jar
								basedir="classes"
								jarfile="${jar.file}.jar"
								manifest="classes/META-INF/MANIFEST.MF"
							/>
						</else>
					</if>

					<jar-post />
				</then>
			</if>
		</sequential>
	</macrodef>

	<if>
		<and>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<antelope:endswith string="${app.server.portal.dir}" with="/portal-web/docroot" />
		</and>
		<then>
			<property name="portal-impl.classes.dir" value="${project.dir}/portal-web/docroot/WEB-INF/classes" />
		</then>
		<else>
			<property name="portal-impl.classes.dir" value="${project.dir}/portal-impl/classes" />
		</else>
	</if>

	<target name="check-deploy-uptodate">
		<uptodate property="deploy.uptodate" targetfile="${deploy.dir}/${jar.file}.jar">
			<srcfiles dir="${basedir}" includes="bnd.bnd,build.xml,ivy.xml,src/**/*.*" />
		</uptodate>
	</target>

	<target name="clean">
		<clean-common />
	</target>

	<target name="compile">
		<compile-java />
	</target>

	<target name="deploy" depends="check-deploy-uptodate" unless="${deploy.uptodate}">
		<jar-marco />

		<copy file="${jar.file}.jar" todir="${deploy.dir}" preservelastmodified="true" />
	</target>

	<target name="jar">
		<jar-marco />
	</target>

	<target name="jar-javadoc" depends="javadoc">
		<jar
			basedir="${doc.dir}/${ant.project.name}/javadocs"
			jarfile="${jar.file}-javadoc.jar"
		/>
	</target>

	<target name="jar-sources">
		<jar
			basedir="src"
			jarfile="${jar.file}-sources.jar"
		/>
	</target>

	<target name="javadoc">
		<mkdir dir="${doc.dir}/${ant.project.name}/javadocs" />

		<javadoc
			breakiterator="yes"
			classpathref="project.classpath"
			destdir="${doc.dir}/${ant.project.name}/javadocs"
			encoding="UTF-8"
			maxmemory="2048m"
			packagenames="*.*"
			sourcepath="src"
			stylesheetfile="${project.dir}/tools/javadoc.css"
			useexternalfile="yes"
		>
			<arg line="-quiet -tag generated" />
		</javadoc>
	</target>

	<target name="manifest">
		<if>
			<not>
				<available file="classes/META-INF/MANIFEST.MF" />
			</not>
			<then>
				<manifest-helper analyze="true" />

				<mkdir dir="classes/META-INF" />

				<tstamp>
					<format property="build.time" pattern="EEE MMM d HH:mm:ss z yyyy" />
				</tstamp>

				<manifest file="classes/META-INF/MANIFEST.MF">
					<attribute name="Bundle-ManifestVersion" value="2" />
					<attribute name="Bundle-RequiredExecutionEnvironment" value="J2SE-1.5" />
					<attribute name="Bundle-Vendor" value="${release.info.vendor}" />
					<attribute name="Bundle-Version" value="${release.info.version}" />
					<attribute name="Export-Package" value="${export.packages}" />
					<attribute name="Import-Package" value="${import.packages}" />
					<attribute name="Javac-Compiler" value="${javac.compiler}" />
					<attribute name="Javac-Debug" value="${javac.debug}" />
					<attribute name="Javac-Deprecation" value="${javac.deprecation}" />
					<attribute name="Javac-Encoding" value="${javac.encoding}" />
					<attribute name="Jsp-Precompile" value="${jsp.precompile}" />
					<attribute name="Liferay-Portal-Build-Date" value="${release.info.build.date}" />
					<attribute name="Liferay-Portal-Build-Number" value="${release.info.build.number}" />
					<attribute name="Liferay-Portal-Build-Revision" value="${build.revision}" />
					<attribute name="Liferay-Portal-Build-Time" value="${build.time}" />
					<attribute name="Liferay-Portal-Code-Name" value="${release.info.code.name}" />
					<attribute name="Liferay-Portal-Parent-Build-Number" value="${release.info.parent.build.number}" />
					<attribute name="Liferay-Portal-Release-Info" value="${release.info.release.info}" />
					<attribute name="Liferay-Portal-Server-Info" value="${release.info.server.info}" />
					<attribute name="Liferay-Portal-Version" value="${release.info.version}" />
				</manifest>

				<if>
					<and>
						<isset property="manifest.bundle.name" />
						<isset property="manifest.bundle.symbolic.name" />
					</and>
					<then>
						<manifest file="classes/META-INF/MANIFEST.MF" mode="update">
							<attribute name="Bundle-Name" value="${manifest.bundle.name}" />
							<attribute name="Bundle-SymbolicName" value="${manifest.bundle.symbolic.name}" />
						</manifest>
					</then>
				</if>

				<if>
					<isset property="manifest.premain.class" />
					<then>
						<manifest file="classes/META-INF/MANIFEST.MF" mode="update">
							<attribute name="Can-Redefine-Classes" value="${manifest.can.redefine.classes}" />
							<attribute name="Can-Retransform-Classes" value="${manifest.can.retransform.classes}" />
							<attribute name="Premain-Class" value="${manifest.premain.class}" />
						</manifest>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="release" depends="jar">
		<if>
			<available file="bnd.bnd" />
			<then>
				<bndexpand propertyfile="${project.dir}/common.bnd" />

				<release-to-repo
					bndRootFile="${project.dir}/common.bnd"
					file="${jar.file}.jar"
				/>
			</then>
		</if>
	</target>
</project>